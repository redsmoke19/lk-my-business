(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _applyDecoratedDescriptor;
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {
    };
    Object['ke' + 'ys'](descriptor).forEach(function(key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function(desc1, decorator) {
        return decorator ? decorator(target, property, desc1) || desc1 : desc1;
    }, desc);
    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }
    return desc;
}

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _arrayWithHoles;
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _arrayWithoutHoles;
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){
            arr2[i] = arr[i];
        }
        return arr2;
    }
}

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _assertThisInitialized;
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = AsyncGenerator;
var _awaitValue = _interopRequireDefault(require("./_await_value"));
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function AsyncGenerator(gen) {
    var send = function send(key, arg) {
        return new Promise(function(resolve, reject) {
            var request = {
                key: key,
                arg: arg,
                resolve: resolve,
                reject: reject,
                next: null
            };
            if (back) {
                back = back.next = request;
            } else {
                front = back = request;
                resume(key, arg);
            }
        });
    };
    var settle = function settle(type, value) {
        switch(type){
            case "return":
                front.resolve({
                    value: value,
                    done: true
                });
                break;
            case "throw":
                front.reject(value);
                break;
            default:
                front.resolve({
                    value: value,
                    done: false
                });
                break;
        }
        front = front.next;
        if (front) {
            resume(front.key, front.arg);
        } else {
            back = null;
        }
    };
    var front, back;
    function resume(key, arg) {
        try {
            var result = gen[key](arg);
            var value = result.value;
            var wrappedAwait = _instanceof(value, _awaitValue.default);
            Promise.resolve(wrappedAwait ? value.wrapped : value).then(function(arg1) {
                if (wrappedAwait) {
                    resume("next", arg1);
                    return;
                }
                settle(result.done ? "return" : "normal", arg1);
            }, function(err) {
                resume("throw", err);
            });
        } catch (err) {
            settle("throw", err);
        }
    }
    this._invoke = send;
    if (typeof gen.return !== "function") {
        this.return = undefined;
    }
}
if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
        return this;
    };
}
AsyncGenerator.prototype.next = function(arg) {
    return this._invoke("next", arg);
};
AsyncGenerator.prototype.throw = function(arg) {
    return this._invoke("throw", arg);
};
AsyncGenerator.prototype.return = function(arg) {
    return this._invoke("return", arg);
};

},{"./_await_value":10}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncGeneratorDelegate;
function _asyncGeneratorDelegate(inner, awaitWrap) {
    var pump = function pump(key, value) {
        waiting = true;
        value = new Promise(function(resolve) {
            resolve(inner[key](value));
        });
        return {
            done: false,
            value: awaitWrap(value)
        };
    };
    var iter = {
    }, waiting = false;
    ;
    if (typeof Symbol === "function" && Symbol.iterator) {
        iter[Symbol.iterator] = function() {
            return this;
        };
    }
    iter.next = function(value) {
        if (waiting) {
            waiting = false;
            return value;
        }
        return pump("next", value);
    };
    if (typeof inner.throw === "function") {
        iter.throw = function(value) {
            if (waiting) {
                waiting = false;
                throw value;
            }
            return pump("throw", value);
        };
    }
    if (typeof inner.return === "function") {
        iter.return = function(value) {
            return pump("return", value);
        };
    }
    return iter;
}

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncIterator;
function _asyncIterator(iterable) {
    var method;
    if (typeof Symbol === "function") {
        if (Symbol.asyncIterator) {
            method = iterable[Symbol.asyncIterator];
            if (method != null) return method.call(iterable);
        }
        if (Symbol.iterator) {
            method = iterable[Symbol.iterator];
            if (method != null) return method.call(iterable);
        }
    }
    throw new TypeError("Object is not async iterable");
}

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncToGenerator;
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _awaitAsyncGenerator;
var _awaitValue = _interopRequireDefault(require("./_await_value"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _awaitAsyncGenerator(value) {
    return new _awaitValue.default(value);
}

},{"./_await_value":10}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _AwaitValue;
function _AwaitValue(value) {
    this.wrapped = value;
}

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classCallCheck;
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _classCallCheck(instance, Constructor) {
    if (!_instanceof(instance, Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classNameTDZError;
function _classNameTDZError(name) {
    throw new Error("Class \"" + name + "\" cannot be referenced in computed property keys.");
}

},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldGet;
function _classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver).value;
}

},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldBase;
function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
        throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
}

},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateFieldSet;
function _classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    var descriptor = privateMap.get(receiver);
    if (!descriptor.writable) {
        throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
    return value;
}

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateMethodGet;
function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}

},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classPrivateMethodSet;
function _classPrivateMethodSet() {
    throw new TypeError("attempted to reassign private method");
}

},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classStaticPrivateFieldSpecGet;
function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    if (receiver !== classConstructor) {
        throw new TypeError("Private static access of wrong provenance");
    }
    return descriptor.value;
}

},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _classStaticPrivateFieldSpecSet;
function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    if (receiver !== classConstructor) {
        throw new TypeError("Private static access of wrong provenance");
    }
    if (!descriptor.writable) {
        throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
    return value;
}

},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _construct;
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}
function construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
        construct = Reflect.construct;
    } else {
        construct = function construct1(Parent1, args1, Class1) {
            var a = [
                null
            ];
            a.push.apply(a, args1);
            var Constructor = Function.bind.apply(Parent1, a);
            var instance = new Constructor();
            if (Class1) _setPrototypeOf(instance, Class1.prototype);
            return instance;
        };
    }
    return construct.apply(null, arguments);
}
function _construct(Parent, args, Class) {
    return construct.apply(null, arguments);
}

},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _createClass;
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _createSuper;
var _isNativeReflectConstruct = _interopRequireDefault(require("./_is_native_reflect_construct"));
var _getPrototypeOf = _interopRequireDefault(require("./_get_prototype_of"));
var _possibleConstructorReturn = _interopRequireDefault(require("./_possible_constructor_return"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = (0, _isNativeReflectConstruct).default();
    return function _createSuperInternal() {
        var Super = (0, _getPrototypeOf).default(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = (0, _getPrototypeOf).default(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return (0, _possibleConstructorReturn).default(this, result);
    };
}

},{"./_get_prototype_of":29,"./_is_native_reflect_construct":38,"./_possible_constructor_return":49}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _decorate;
var _toArray = _interopRequireDefault(require("./_to_array"));
var _toPropertyKey = _interopRequireDefault(require("./_to_property_key"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _decorate(decorators, factory, superClass) {
    var r = factory(function initialize(O) {
        _initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = _decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators);
    _initializeClassElements(r.F, decorated.elements);
    return _runClassFinishers(r.F, decorated.finishers);
}
function _createElementDescriptor(def) {
    var key = (0, _toPropertyKey).default(def.key);
    var descriptor;
    if (def.kind === "method") {
        descriptor = {
            value: def.value,
            writable: true,
            configurable: true,
            enumerable: false
        };
        Object.defineProperty(def.value, "name", {
            value: _typeof(key) === "symbol" ? "" : key,
            configurable: true
        });
    } else if (def.kind === "get") {
        descriptor = {
            get: def.value,
            configurable: true,
            enumerable: false
        };
    } else if (def.kind === "set") {
        descriptor = {
            set: def.value,
            configurable: true,
            enumerable: false
        };
    } else if (def.kind === "field") {
        descriptor = {
            configurable: true,
            writable: true,
            enumerable: true
        };
    }
    var element = {
        kind: def.kind === "field" ? "field" : "method",
        key: key,
        placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype",
        descriptor: descriptor
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;
    return element;
}
function _coalesceGetterSetter(element, other) {
    if (element.descriptor.get !== undefined) {
        other.descriptor.get = element.descriptor.get;
    } else {
        other.descriptor.set = element.descriptor.set;
    }
}
function _coalesceClassElements(elements) {
    var newElements = [];
    var isSameElement = function isSameElement1(other) {
        return other.kind === "method" && other.key === element.key && other.placement === element.placement;
    };
    for(var i = 0; i < elements.length; i++){
        var element = elements[i];
        var other;
        if (element.kind === "method" && (other = newElements.find(isSameElement))) {
            if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) {
                if (_hasDecorators(element) || _hasDecorators(other)) {
                    throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated.");
                }
                other.descriptor = element.descriptor;
            } else {
                if (_hasDecorators(element)) {
                    if (_hasDecorators(other)) {
                        throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ").");
                    }
                    other.decorators = element.decorators;
                }
                _coalesceGetterSetter(element, other);
            }
        } else {
            newElements.push(element);
        }
    }
    return newElements;
}
function _hasDecorators(element) {
    return element.decorators && element.decorators.length;
}
function _isDataDescriptor(desc) {
    return desc !== undefined && !(desc.value === undefined && desc.writable === undefined);
}
function _initializeClassElements(F, elements) {
    var proto = F.prototype;
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            var placement = element.placement;
            if (element.kind === kind && (placement === "static" || placement === "prototype")) {
                var receiver = placement === "static" ? F : proto;
                _defineClassElement(receiver, element);
            }
        });
    });
}
function _initializeInstanceElements(O, elements) {
    [
        "method",
        "field"
    ].forEach(function(kind) {
        elements.forEach(function(element) {
            if (element.kind === kind && element.placement === "own") {
                _defineClassElement(O, element);
            }
        });
    });
}
function _defineClassElement(receiver, element) {
    var descriptor = element.descriptor;
    if (element.kind === "field") {
        var initializer = element.initializer;
        descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver)
        };
    }
    Object.defineProperty(receiver, element.key, descriptor);
}
function _decorateClass(elements, decorators) {
    var newElements = [];
    var finishers = [];
    var placements = {
        static: [],
        prototype: [],
        own: []
    };
    elements.forEach(function(element) {
        _addElementPlacement(element, placements);
    });
    elements.forEach(function(element) {
        if (!_hasDecorators(element)) return newElements.push(element);
        var elementFinishersExtras = _decorateElement(element, placements);
        newElements.push(elementFinishersExtras.element);
        newElements.push.apply(newElements, elementFinishersExtras.extras);
        finishers.push.apply(finishers, elementFinishersExtras.finishers);
    });
    if (!decorators) {
        return {
            elements: newElements,
            finishers: finishers
        };
    }
    var result = _decorateConstructor(newElements, decorators);
    finishers.push.apply(finishers, result.finishers);
    result.finishers = finishers;
    return result;
}
function _addElementPlacement(element, placements, silent) {
    var keys = placements[element.placement];
    if (!silent && keys.indexOf(element.key) !== -1) {
        throw new TypeError("Duplicated element (" + element.key + ")");
    }
    keys.push(element.key);
}
function _decorateElement(element, placements) {
    var extras = [];
    var finishers = [];
    for(var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--){
        var keys = placements[element.placement];
        keys.splice(keys.indexOf(element.key), 1);
        var elementObject = _fromElementDescriptor(element);
        var elementFinisherExtras = _toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject);
        element = elementFinisherExtras.element;
        _addElementPlacement(element, placements);
        if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
        }
        var newExtras = elementFinisherExtras.extras;
        if (newExtras) {
            for(var j = 0; j < newExtras.length; j++){
                _addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
        }
    }
    return {
        element: element,
        finishers: finishers,
        extras: extras
    };
}
function _decorateConstructor(elements, decorators) {
    var finishers = [];
    for(var i = decorators.length - 1; i >= 0; i--){
        var obj = _fromClassDescriptor(elements);
        var elementsAndFinisher = _toClassDescriptor((0, decorators[i])(obj) || obj);
        if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
        }
        if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;
            for(var j = 0; j < elements.length - 1; j++){
                for(var k = j + 1; k < elements.length; k++){
                    if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) {
                        throw new TypeError("Duplicated element (" + elements[j].key + ")");
                    }
                }
            }
        }
    }
    return {
        elements: elements,
        finishers: finishers
    };
}
function _fromElementDescriptor(element) {
    var obj = {
        kind: element.kind,
        key: element.key,
        placement: element.placement,
        descriptor: element.descriptor
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    if (element.kind === "field") obj.initializer = element.initializer;
    return obj;
}
function _toElementDescriptors(elementObjects) {
    if (elementObjects === undefined) return;
    return (0, _toArray).default(elementObjects).map(function(elementObject) {
        var element = _toElementDescriptor(elementObject);
        _disallowProperty(elementObject, "finisher", "An element descriptor");
        _disallowProperty(elementObject, "extras", "An element descriptor");
        return element;
    });
}
function _toElementDescriptor(elementObject) {
    var kind = String(elementObject.kind);
    if (kind !== "method" && kind !== "field") {
        throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"');
    }
    var key = (0, _toPropertyKey).default(elementObject.key);
    var placement = String(elementObject.placement);
    if (placement !== "static" && placement !== "prototype" && placement !== "own") {
        throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"');
    }
    var descriptor = elementObject.descriptor;
    _disallowProperty(elementObject, "elements", "An element descriptor");
    var element = {
        kind: kind,
        key: key,
        placement: placement,
        descriptor: Object.assign({
        }, descriptor)
    };
    if (kind !== "field") {
        _disallowProperty(elementObject, "initializer", "A method descriptor");
    } else {
        _disallowProperty(descriptor, "get", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "set", "The property descriptor of a field descriptor");
        _disallowProperty(descriptor, "value", "The property descriptor of a field descriptor");
        element.initializer = elementObject.initializer;
    }
    return element;
}
function _toElementFinisherExtras(elementObject) {
    var element = _toElementDescriptor(elementObject);
    var finisher = _optionalCallableProperty(elementObject, "finisher");
    var extras = _toElementDescriptors(elementObject.extras);
    return {
        element: element,
        finisher: finisher,
        extras: extras
    };
}
function _fromClassDescriptor(elements) {
    var obj = {
        kind: "class",
        elements: elements.map(_fromElementDescriptor)
    };
    var desc = {
        value: "Descriptor",
        configurable: true
    };
    Object.defineProperty(obj, Symbol.toStringTag, desc);
    return obj;
}
function _toClassDescriptor(obj) {
    var kind = String(obj.kind);
    if (kind !== "class") {
        throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"');
    }
    _disallowProperty(obj, "key", "A class descriptor");
    _disallowProperty(obj, "placement", "A class descriptor");
    _disallowProperty(obj, "descriptor", "A class descriptor");
    _disallowProperty(obj, "initializer", "A class descriptor");
    _disallowProperty(obj, "extras", "A class descriptor");
    var finisher = _optionalCallableProperty(obj, "finisher");
    var elements = _toElementDescriptors(obj.elements);
    return {
        elements: elements,
        finisher: finisher
    };
}
function _disallowProperty(obj, name, objectType) {
    if (obj[name] !== undefined) {
        throw new TypeError(objectType + " can't have a ." + name + " property.");
    }
}
function _optionalCallableProperty(obj, name) {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
        throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
}
function _runClassFinishers(constructor, finishers) {
    for(var i = 0; i < finishers.length; i++){
        var newConstructor = (0, finishers[i])(constructor);
        if (newConstructor !== undefined) {
            if (typeof newConstructor !== "function") {
                throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
        }
    }
    return constructor;
}

},{"./_to_array":60,"./_to_property_key":63}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defaults;
function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }
    return obj;
}

},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defineEnumerableProperties;
function _defineEnumerableProperties(obj, descs) {
    for(var key in descs){
        var desc = descs[key];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, key, desc);
    }
    if (Object.getOwnPropertySymbols) {
        var objectSymbols = Object.getOwnPropertySymbols(descs);
        for(var i = 0; i < objectSymbols.length; i++){
            var sym = objectSymbols[i];
            var desc = descs[sym];
            desc.configurable = desc.enumerable = true;
            if ("value" in desc) desc.writable = true;
            Object.defineProperty(obj, sym, desc);
        }
    }
    return obj;
}

},{}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _defineProperty;
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

},{}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _extends;
function extends_() {
    extends_ = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return extends_.apply(this, arguments);
}
function _extends() {
    return extends_.apply(this, arguments);
}

},{}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _get;
var _superPropBase = _interopRequireDefault(require("./_super_prop_base"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
        get = Reflect.get;
    } else {
        get = function get1(target1, property1, receiver1) {
            var base = (0, _superPropBase).default(target1, property1);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property1);
            if (desc.get) {
                return desc.get.call(receiver1 || target1);
            }
            return desc.value;
        };
    }
    return get(target, property, receiver);
}
function _get(target, property, reciever) {
    return get(target, property, reciever);
}

},{"./_super_prop_base":56}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _getPrototypeOf;
function getPrototypeOf(o) {
    getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf1(o1) {
        return o1.__proto__ || Object.getPrototypeOf(o1);
    };
    return getPrototypeOf(o);
}
function _getPrototypeOf(o) {
    return getPrototypeOf(o);
}

},{}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _inherits;
var _setPrototypeOf = _interopRequireDefault(require("./_set_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) (0, _setPrototypeOf).default(subClass, superClass);
}

},{"./_set_prototype_of":52}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _inheritsLoose;
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}

},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _initializerDefineProperty;
function _initializerDefineProperty(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
        enumerable: descriptor.enumerable,
        configurable: descriptor.configurable,
        writable: descriptor.writable,
        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
}

},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _initializerWarningHelper;
function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.');
}

},{}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _instanceof1;
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _instanceof1(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return right[Symbol.hasInstance](left);
    } else {
        return _instanceof(left, right);
    }
}

},{}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _interopRequireDefault;
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

},{}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _interopRequireWildcard;
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {
        };
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {
                    };
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}

},{}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _isNativeFunction;
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

},{}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _isNativeReflectConstruct;
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
    } catch (e) {
        return false;
    }
}

},{}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArray;
function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

},{}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArrayLimit;
function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}

},{}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _iterableToArrayLimitLoose;
function _iterableToArrayLimitLoose(arr, i) {
    var _arr = [];
    for(var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;){
        _arr.push(_step.value);
        if (i && _arr.length === i) break;
    }
    return _arr;
}

},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _createRawReactElement;
var REACT_ELEMENT_TYPE;
function _createRawReactElement(type, props, key, children) {
    if (!REACT_ELEMENT_TYPE) {
        REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
    }
    var defaultProps = type && type.defaultProps;
    var childrenLength = arguments.length - 3;
    if (!props && childrenLength !== 0) {
        props = {
            children: void 0
        };
    }
    if (props && defaultProps) {
        for(var propName in defaultProps){
            if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
            }
        }
    } else if (!props) {
        props = defaultProps || {
        };
    }
    if (childrenLength === 1) {
        props.children = children;
    } else if (childrenLength > 1) {
        var childArray = new Array(childrenLength);
        for(var i = 0; i < childrenLength; i++){
            childArray[i] = arguments[i + 3];
        }
        props.children = childArray;
    }
    return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key === undefined ? null : '' + key,
        ref: null,
        props: props,
        _owner: null
    };
}

},{}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _newArrowCheck;
function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
        throw new TypeError("Cannot instantiate an arrow function");
    }
}

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _nonIterableRest;
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

},{}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _nonIterableSpread;
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
}

},{}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectSpread;
var _defineProperty = _interopRequireDefault(require("./_define_property"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    var _arguments = arguments, _loop = function(i) {
        var source = _arguments[i] != null ? _arguments[i] : {
        };
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            (0, _defineProperty).default(target, key, source[key]);
        });
    };
    for(var i = 1; i < arguments.length; i++)_loop(i);
    return target;
}

},{"./_define_property":26}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectWithoutProperties;
var _objectWithoutPropertiesLoose = _interopRequireDefault(require("./_object_without_properties_loose"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {
    };
    var target = (0, _objectWithoutPropertiesLoose).default(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}

},{"./_object_without_properties_loose":48}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _objectWithoutPropertiesLoose;
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _possibleConstructorReturn;
var _assertThisInitialized = _interopRequireDefault(require("./_assert_this_initialized"));
var _typeOf = _interopRequireDefault(require("./_type_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && ((0, _typeOf).default(call) === "object" || typeof call === "function")) {
        return call;
    }
    return (0, _assertThisInitialized).default(self);
}

},{"./_assert_this_initialized":4,"./_type_of":64}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _readOnlyError;
function _readOnlyError(name) {
    throw new Error("\"" + name + "\" is read-only");
}

},{}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _set;
var _defineProperty = _interopRequireDefault(require("./_define_property"));
var _superPropBase = _interopRequireDefault(require("./_super_prop_base"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
        set = Reflect.set;
    } else {
        set = function set1(target1, property1, value1, receiver1) {
            var base = (0, _superPropBase).default(target1, property1);
            var desc;
            if (base) {
                desc = Object.getOwnPropertyDescriptor(base, property1);
                if (desc.set) {
                    desc.set.call(receiver1, value1);
                    return true;
                } else if (!desc.writable) {
                    return false;
                }
            }
            desc = Object.getOwnPropertyDescriptor(receiver1, property1);
            if (desc) {
                if (!desc.writable) {
                    return false;
                }
                desc.value = value1;
                Object.defineProperty(receiver1, property1, desc);
            } else {
                (0, _defineProperty).default(receiver1, property1, value1);
            }
            return true;
        };
    }
    return set(target, property, value, receiver);
}
function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
        throw new Error('failed to set property');
    }
    return value;
}

},{"./_define_property":26,"./_super_prop_base":56}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _setPrototypeOf;
function setPrototypeOf(o, p) {
    setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf1(o1, p1) {
        o1.__proto__ = p1;
        return o1;
    };
    return setPrototypeOf(o, p);
}
function _setPrototypeOf(o, p) {
    return setPrototypeOf(o, p);
}

},{}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _skipFirstGeneratorNext;
function _skipFirstGeneratorNext(fn) {
    return function() {
        var it = fn.apply(this, arguments);
        it.next();
        return it;
    };
}

},{}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _slicedToArray;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _slicedToArray(arr, i) {
    return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr, i) || (0, _nonIterableRest).default();
}

},{"./_array_with_holes":2,"./_iterable_to_array":39,"./_non_iterable_rest":44}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _slicedToArrayLoose;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArrayLimitLoose = _interopRequireDefault(require("./_iterable_to_array_limit_loose"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _slicedToArrayLoose(arr, i) {
    return (0, _arrayWithHoles).default(arr) || (0, _iterableToArrayLimitLoose).default(arr, i) || (0, _nonIterableRest).default();
}

},{"./_array_with_holes":2,"./_iterable_to_array_limit_loose":41,"./_non_iterable_rest":44}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _superPropBase;
var _getPrototypeOf = _interopRequireDefault(require("./_get_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _superPropBase(object, property) {
    while(!Object.prototype.hasOwnProperty.call(object, property)){
        object = (0, _getPrototypeOf).default(object);
        if (object === null) break;
    }
    return object;
}

},{"./_get_prototype_of":29}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _taggedTemplateLiteral;
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}

},{}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _taggedTemplateLiteralLoose;
function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    strings.raw = raw;
    return strings;
}

},{}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _throw;
function _throw(e) {
    throw e;
}

},{}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toArray;
var _arrayWithHoles = _interopRequireDefault(require("./_array_with_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableRest = _interopRequireDefault(require("./_non_iterable_rest"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toArray(arr) {
    return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _nonIterableRest).default();
}

},{"./_array_with_holes":2,"./_iterable_to_array":39,"./_non_iterable_rest":44}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toConsumableArray;
var _arrayWithoutHoles = _interopRequireDefault(require("./_array_without_holes"));
var _iterableToArray = _interopRequireDefault(require("./_iterable_to_array"));
var _nonIterableSpread = _interopRequireDefault(require("./_non_iterable_spread"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toConsumableArray(arr) {
    return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _nonIterableSpread).default();
}

},{"./_array_without_holes":3,"./_iterable_to_array":39,"./_non_iterable_spread":45}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toPrimitive;
var _typeOf = _interopRequireDefault(require("./_type_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toPrimitive(input, hint) {
    if ((0, _typeOf).default(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if ((0, _typeOf).default(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

},{"./_type_of":64}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _toPropertyKey;
var _typeOf = _interopRequireDefault(require("./_type_of"));
var _toPrimitive = _interopRequireDefault(require("./_to_primitive"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toPropertyKey(arg) {
    var key = (0, _toPrimitive).default(arg, "string");
    return (0, _typeOf).default(key) === "symbol" ? key : String(key);
}

},{"./_to_primitive":62,"./_type_of":64}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _typeof1;
var _typeof = function(obj) {
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _typeof1(obj) {
    return obj && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
}
;

},{}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _wrapAsyncGenerator;
var _asyncGenerator = _interopRequireDefault(require("./_async_generator"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _wrapAsyncGenerator(fn) {
    return function() {
        return new _asyncGenerator.default(fn.apply(this, arguments));
    };
}

},{"./_async_generator":5}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _wrapNativeSuper;
var _construct = _interopRequireDefault(require("./_construct"));
var _isNativeFunction = _interopRequireDefault(require("./_is_native_function"));
var _getPrototypeOf = _interopRequireDefault(require("./_get_prototype_of"));
var _setPrototypeOf = _interopRequireDefault(require("./_set_prototype_of"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    wrapNativeSuper = function wrapNativeSuper1(Class1) {
        var Wrapper = function Wrapper() {
            return (0, _construct).default(Class1, arguments, (0, _getPrototypeOf).default(this).constructor);
        };
        if (Class1 === null || !(0, _isNativeFunction).default(Class1)) return Class1;
        if (typeof Class1 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class1)) return _cache.get(Class1);
            _cache.set(Class1, Wrapper);
        }
        Wrapper.prototype = Object.create(Class1.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return (0, _setPrototypeOf).default(Wrapper, Class1);
    };
    return wrapNativeSuper(Class);
}
function _wrapNativeSuper(Class) {
    return wrapNativeSuper(Class);
}

},{"./_construct":20,"./_get_prototype_of":29,"./_is_native_function":37,"./_set_prototype_of":52}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "applyDecoratedDescriptor", {
    enumerable: true,
    get: function() {
        return _applyDecoratedDescriptor.default;
    }
});
Object.defineProperty(exports, "arrayWithHoles", {
    enumerable: true,
    get: function() {
        return _arrayWithHoles.default;
    }
});
Object.defineProperty(exports, "arrayWithoutHoles", {
    enumerable: true,
    get: function() {
        return _arrayWithoutHoles.default;
    }
});
Object.defineProperty(exports, "assertThisInitialized", {
    enumerable: true,
    get: function() {
        return _assertThisInitialized.default;
    }
});
Object.defineProperty(exports, "asyncGenerator", {
    enumerable: true,
    get: function() {
        return _asyncGenerator.default;
    }
});
Object.defineProperty(exports, "asyncGeneratorDelegate", {
    enumerable: true,
    get: function() {
        return _asyncGeneratorDelegate.default;
    }
});
Object.defineProperty(exports, "asyncIterator", {
    enumerable: true,
    get: function() {
        return _asyncIterator.default;
    }
});
Object.defineProperty(exports, "asyncToGenerator", {
    enumerable: true,
    get: function() {
        return _asyncToGenerator.default;
    }
});
Object.defineProperty(exports, "awaitAsyncGenerator", {
    enumerable: true,
    get: function() {
        return _awaitAsyncGenerator.default;
    }
});
Object.defineProperty(exports, "awaitValue", {
    enumerable: true,
    get: function() {
        return _awaitValue.default;
    }
});
Object.defineProperty(exports, "classCallCheck", {
    enumerable: true,
    get: function() {
        return _classCallCheck.default;
    }
});
Object.defineProperty(exports, "classNameTDZError", {
    enumerable: true,
    get: function() {
        return _classNameTdzError.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldGet", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldGet.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldLooseBase", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldLooseBase.default;
    }
});
Object.defineProperty(exports, "classPrivateFieldSet", {
    enumerable: true,
    get: function() {
        return _classPrivateFieldSet.default;
    }
});
Object.defineProperty(exports, "classPrivateMethodGet", {
    enumerable: true,
    get: function() {
        return _classPrivateMethodGet.default;
    }
});
Object.defineProperty(exports, "classPrivateMethodSet", {
    enumerable: true,
    get: function() {
        return _classPrivateMethodSet.default;
    }
});
Object.defineProperty(exports, "classStaticPrivateFieldSpecGet", {
    enumerable: true,
    get: function() {
        return _classStaticPrivateFieldSpecGet.default;
    }
});
Object.defineProperty(exports, "classStaticPrivateFieldSpecSet", {
    enumerable: true,
    get: function() {
        return _classStaticPrivateFieldSpecSet.default;
    }
});
Object.defineProperty(exports, "construct", {
    enumerable: true,
    get: function() {
        return _construct.default;
    }
});
Object.defineProperty(exports, "createClass", {
    enumerable: true,
    get: function() {
        return _createClass.default;
    }
});
Object.defineProperty(exports, "decorate", {
    enumerable: true,
    get: function() {
        return _decorate.default;
    }
});
Object.defineProperty(exports, "defaults", {
    enumerable: true,
    get: function() {
        return _defaults.default;
    }
});
Object.defineProperty(exports, "defineEnumerableProperties", {
    enumerable: true,
    get: function() {
        return _defineEnumerableProperties.default;
    }
});
Object.defineProperty(exports, "defineProperty", {
    enumerable: true,
    get: function() {
        return _defineProperty.default;
    }
});
Object.defineProperty(exports, "extends", {
    enumerable: true,
    get: function() {
        return _extends.default;
    }
});
Object.defineProperty(exports, "get", {
    enumerable: true,
    get: function() {
        return _get.default;
    }
});
Object.defineProperty(exports, "getPrototypeOf", {
    enumerable: true,
    get: function() {
        return _getPrototypeOf.default;
    }
});
Object.defineProperty(exports, "inherits", {
    enumerable: true,
    get: function() {
        return _inherits.default;
    }
});
Object.defineProperty(exports, "inheritsLoose", {
    enumerable: true,
    get: function() {
        return _inheritsLoose.default;
    }
});
Object.defineProperty(exports, "initializerDefineProperty", {
    enumerable: true,
    get: function() {
        return _initializerDefineProperty.default;
    }
});
Object.defineProperty(exports, "initializerWarningHelper", {
    enumerable: true,
    get: function() {
        return _initializerWarningHelper.default;
    }
});
Object.defineProperty(exports, "_instanceof", {
    enumerable: true,
    get: function() {
        return _instanceof.default;
    }
});
Object.defineProperty(exports, "interopRequireDefault", {
    enumerable: true,
    get: function() {
        return _interopRequireDefault1.default;
    }
});
Object.defineProperty(exports, "interopRequireWildcard", {
    enumerable: true,
    get: function() {
        return _interopRequireWildcard.default;
    }
});
Object.defineProperty(exports, "isNativeFunction", {
    enumerable: true,
    get: function() {
        return _isNativeFunction.default;
    }
});
Object.defineProperty(exports, "iterableToArray", {
    enumerable: true,
    get: function() {
        return _iterableToArray.default;
    }
});
Object.defineProperty(exports, "iterableToArrayLimit", {
    enumerable: true,
    get: function() {
        return _iterableToArrayLimit.default;
    }
});
Object.defineProperty(exports, "iterableToArrayLimitLoose", {
    enumerable: true,
    get: function() {
        return _iterableToArrayLimitLoose.default;
    }
});
Object.defineProperty(exports, "jsx", {
    enumerable: true,
    get: function() {
        return _jsx.default;
    }
});
Object.defineProperty(exports, "newArrowCheck", {
    enumerable: true,
    get: function() {
        return _newArrowCheck.default;
    }
});
Object.defineProperty(exports, "nonIterableRest", {
    enumerable: true,
    get: function() {
        return _nonIterableRest.default;
    }
});
Object.defineProperty(exports, "nonIterableSpread", {
    enumerable: true,
    get: function() {
        return _nonIterableSpread.default;
    }
});
Object.defineProperty(exports, "objectSpread", {
    enumerable: true,
    get: function() {
        return _objectSpread.default;
    }
});
Object.defineProperty(exports, "objectWithoutProperties", {
    enumerable: true,
    get: function() {
        return _objectWithoutProperties.default;
    }
});
Object.defineProperty(exports, "objectWithoutPropertiesLoose", {
    enumerable: true,
    get: function() {
        return _objectWithoutPropertiesLoose.default;
    }
});
Object.defineProperty(exports, "possibleConstructorReturn", {
    enumerable: true,
    get: function() {
        return _possibleConstructorReturn.default;
    }
});
Object.defineProperty(exports, "readOnlyError", {
    enumerable: true,
    get: function() {
        return _readOnlyError.default;
    }
});
Object.defineProperty(exports, "set", {
    enumerable: true,
    get: function() {
        return _set.default;
    }
});
Object.defineProperty(exports, "setPrototypeOf", {
    enumerable: true,
    get: function() {
        return _setPrototypeOf.default;
    }
});
Object.defineProperty(exports, "skipFirstGeneratorNext", {
    enumerable: true,
    get: function() {
        return _skipFirstGeneratorNext.default;
    }
});
Object.defineProperty(exports, "slicedToArray", {
    enumerable: true,
    get: function() {
        return _slicedToArray.default;
    }
});
Object.defineProperty(exports, "slicedToArrayLoose", {
    enumerable: true,
    get: function() {
        return _slicedToArrayLoose.default;
    }
});
Object.defineProperty(exports, "superPropBase", {
    enumerable: true,
    get: function() {
        return _superPropBase.default;
    }
});
Object.defineProperty(exports, "taggedTemplateLiteral", {
    enumerable: true,
    get: function() {
        return _taggedTemplateLiteral.default;
    }
});
Object.defineProperty(exports, "taggedTemplateLiteralLoose", {
    enumerable: true,
    get: function() {
        return _taggedTemplateLiteralLoose.default;
    }
});
Object.defineProperty(exports, "_throw", {
    enumerable: true,
    get: function() {
        return _throw.default;
    }
});
Object.defineProperty(exports, "toArray", {
    enumerable: true,
    get: function() {
        return _toArray.default;
    }
});
Object.defineProperty(exports, "toConsumableArray", {
    enumerable: true,
    get: function() {
        return _toConsumableArray.default;
    }
});
Object.defineProperty(exports, "toPrimitive", {
    enumerable: true,
    get: function() {
        return _toPrimitive.default;
    }
});
Object.defineProperty(exports, "toPropertyKey", {
    enumerable: true,
    get: function() {
        return _toPropertyKey.default;
    }
});
Object.defineProperty(exports, "typeOf", {
    enumerable: true,
    get: function() {
        return _typeOf.default;
    }
});
Object.defineProperty(exports, "wrapAsyncGenerator", {
    enumerable: true,
    get: function() {
        return _wrapAsyncGenerator.default;
    }
});
Object.defineProperty(exports, "wrapNativeSuper", {
    enumerable: true,
    get: function() {
        return _wrapNativeSuper.default;
    }
});
Object.defineProperty(exports, "createSuper", {
    enumerable: true,
    get: function() {
        return _createSuper.default;
    }
});
Object.defineProperty(exports, "isNativeReflectConstruct", {
    enumerable: true,
    get: function() {
        return _isNativeReflectConstruct.default;
    }
});
var _applyDecoratedDescriptor = _interopRequireDefault2(require("./_apply_decorated_descriptor"));
var _arrayWithHoles = _interopRequireDefault2(require("./_array_with_holes"));
var _arrayWithoutHoles = _interopRequireDefault2(require("./_array_without_holes"));
var _assertThisInitialized = _interopRequireDefault2(require("./_assert_this_initialized"));
var _asyncGenerator = _interopRequireDefault2(require("./_async_generator"));
var _asyncGeneratorDelegate = _interopRequireDefault2(require("./_async_generator_delegate"));
var _asyncIterator = _interopRequireDefault2(require("./_async_iterator"));
var _asyncToGenerator = _interopRequireDefault2(require("./_async_to_generator"));
var _awaitAsyncGenerator = _interopRequireDefault2(require("./_await_async_generator"));
var _awaitValue = _interopRequireDefault2(require("./_await_value"));
var _classCallCheck = _interopRequireDefault2(require("./_class_call_check"));
var _classNameTdzError = _interopRequireDefault2(require("./_class_name_tdz_error"));
var _classPrivateFieldGet = _interopRequireDefault2(require("./_class_private_field_get"));
var _classPrivateFieldLooseBase = _interopRequireDefault2(require("./_class_private_field_loose_base"));
var _classPrivateFieldSet = _interopRequireDefault2(require("./_class_private_field_set"));
var _classPrivateMethodGet = _interopRequireDefault2(require("./_class_private_method_get"));
var _classPrivateMethodSet = _interopRequireDefault2(require("./_class_private_method_set"));
var _classStaticPrivateFieldSpecGet = _interopRequireDefault2(require("./_class_static_private_field_spec_get"));
var _classStaticPrivateFieldSpecSet = _interopRequireDefault2(require("./_class_static_private_field_spec_set"));
var _construct = _interopRequireDefault2(require("./_construct"));
var _createClass = _interopRequireDefault2(require("./_create_class"));
var _decorate = _interopRequireDefault2(require("./_decorate"));
var _defaults = _interopRequireDefault2(require("./_defaults"));
var _defineEnumerableProperties = _interopRequireDefault2(require("./_define_enumerable_properties"));
var _defineProperty = _interopRequireDefault2(require("./_define_property"));
var _extends = _interopRequireDefault2(require("./_extends"));
var _get = _interopRequireDefault2(require("./_get"));
var _getPrototypeOf = _interopRequireDefault2(require("./_get_prototype_of"));
var _inherits = _interopRequireDefault2(require("./_inherits"));
var _inheritsLoose = _interopRequireDefault2(require("./_inherits_loose"));
var _initializerDefineProperty = _interopRequireDefault2(require("./_initializer_define_property"));
var _initializerWarningHelper = _interopRequireDefault2(require("./_initializer_warning_helper"));
var _instanceof = _interopRequireDefault2(require("./_instanceof"));
var _interopRequireDefault1 = _interopRequireDefault2(require("./_interop_require_default"));
var _interopRequireWildcard = _interopRequireDefault2(require("./_interop_require_wildcard"));
var _isNativeFunction = _interopRequireDefault2(require("./_is_native_function"));
var _iterableToArray = _interopRequireDefault2(require("./_iterable_to_array"));
var _iterableToArrayLimit = _interopRequireDefault2(require("./_iterable_to_array_limit"));
var _iterableToArrayLimitLoose = _interopRequireDefault2(require("./_iterable_to_array_limit_loose"));
var _jsx = _interopRequireDefault2(require("./_jsx"));
var _newArrowCheck = _interopRequireDefault2(require("./_new_arrow_check"));
var _nonIterableRest = _interopRequireDefault2(require("./_non_iterable_rest"));
var _nonIterableSpread = _interopRequireDefault2(require("./_non_iterable_spread"));
var _objectSpread = _interopRequireDefault2(require("./_object_spread"));
var _objectWithoutProperties = _interopRequireDefault2(require("./_object_without_properties"));
var _objectWithoutPropertiesLoose = _interopRequireDefault2(require("./_object_without_properties_loose"));
var _possibleConstructorReturn = _interopRequireDefault2(require("./_possible_constructor_return"));
var _readOnlyError = _interopRequireDefault2(require("./_read_only_error"));
var _set = _interopRequireDefault2(require("./_set"));
var _setPrototypeOf = _interopRequireDefault2(require("./_set_prototype_of"));
var _skipFirstGeneratorNext = _interopRequireDefault2(require("./_skip_first_generator_next"));
var _slicedToArray = _interopRequireDefault2(require("./_sliced_to_array"));
var _slicedToArrayLoose = _interopRequireDefault2(require("./_sliced_to_array_loose"));
var _superPropBase = _interopRequireDefault2(require("./_super_prop_base"));
var _taggedTemplateLiteral = _interopRequireDefault2(require("./_tagged_template_literal"));
var _taggedTemplateLiteralLoose = _interopRequireDefault2(require("./_tagged_template_literal_loose"));
var _throw = _interopRequireDefault2(require("./_throw"));
var _toArray = _interopRequireDefault2(require("./_to_array"));
var _toConsumableArray = _interopRequireDefault2(require("./_to_consumable_array"));
var _toPrimitive = _interopRequireDefault2(require("./_to_primitive"));
var _toPropertyKey = _interopRequireDefault2(require("./_to_property_key"));
var _typeOf = _interopRequireDefault2(require("./_type_of"));
var _wrapAsyncGenerator = _interopRequireDefault2(require("./_wrap_async_generator"));
var _wrapNativeSuper = _interopRequireDefault2(require("./_wrap_native_super"));
var _createSuper = _interopRequireDefault2(require("./_create_super"));
var _isNativeReflectConstruct = _interopRequireDefault2(require("./_is_native_reflect_construct"));
function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

},{"./_apply_decorated_descriptor":1,"./_array_with_holes":2,"./_array_without_holes":3,"./_assert_this_initialized":4,"./_async_generator":5,"./_async_generator_delegate":6,"./_async_iterator":7,"./_async_to_generator":8,"./_await_async_generator":9,"./_await_value":10,"./_class_call_check":11,"./_class_name_tdz_error":12,"./_class_private_field_get":13,"./_class_private_field_loose_base":14,"./_class_private_field_set":15,"./_class_private_method_get":16,"./_class_private_method_set":17,"./_class_static_private_field_spec_get":18,"./_class_static_private_field_spec_set":19,"./_construct":20,"./_create_class":21,"./_create_super":22,"./_decorate":23,"./_defaults":24,"./_define_enumerable_properties":25,"./_define_property":26,"./_extends":27,"./_get":28,"./_get_prototype_of":29,"./_inherits":30,"./_inherits_loose":31,"./_initializer_define_property":32,"./_initializer_warning_helper":33,"./_instanceof":34,"./_interop_require_default":35,"./_interop_require_wildcard":36,"./_is_native_function":37,"./_is_native_reflect_construct":38,"./_iterable_to_array":39,"./_iterable_to_array_limit":40,"./_iterable_to_array_limit_loose":41,"./_jsx":42,"./_new_arrow_check":43,"./_non_iterable_rest":44,"./_non_iterable_spread":45,"./_object_spread":46,"./_object_without_properties":47,"./_object_without_properties_loose":48,"./_possible_constructor_return":49,"./_read_only_error":50,"./_set":51,"./_set_prototype_of":52,"./_skip_first_generator_next":53,"./_sliced_to_array":54,"./_sliced_to_array_loose":55,"./_super_prop_base":56,"./_tagged_template_literal":57,"./_tagged_template_literal_loose":58,"./_throw":59,"./_to_array":60,"./_to_consumable_array":61,"./_to_primitive":62,"./_to_property_key":63,"./_type_of":64,"./_wrap_async_generator":65,"./_wrap_native_super":66}],68:[function(require,module,exports){
var $6mU8w$swchelpers = require("@swc/helpers");
var $6mU8w$justextend = require("just-extend");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "default", function () { return $a601ff30f483e917$export$2e2bcd8739ae039; });
$parcel$export(module.exports, "Dropzone", function () { return $a601ff30f483e917$export$2e2bcd8739ae039; });



var $b1d17cfb1d15c36a$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
    "use strict";
    function $b1d17cfb1d15c36a$export$2e2bcd8739ae039() {
        $6mU8w$swchelpers.classCallCheck(this, $b1d17cfb1d15c36a$export$2e2bcd8739ae039);
    }
    $6mU8w$swchelpers.createClass($b1d17cfb1d15c36a$export$2e2bcd8739ae039, [
        {
            // Add an event listener for given event
            key: "on",
            value: function on(event, fn) {
                this._callbacks = this._callbacks || {
                };
                // Create namespace for this event
                if (!this._callbacks[event]) this._callbacks[event] = [];
                this._callbacks[event].push(fn);
                return this;
            }
        },
        {
            key: "emit",
            value: function emit(event) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                this._callbacks = this._callbacks || {
                };
                var callbacks = this._callbacks[event];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (callbacks) try {
                    for(var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var callback = _step.value;
                        callback.apply(this, args);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                // trigger a corresponding DOM event
                if (this.element) this.element.dispatchEvent(this.makeEvent("dropzone:" + event, {
                    args: args
                }));
                return this;
            }
        },
        {
            key: "makeEvent",
            value: function makeEvent(eventName, detail) {
                var params = {
                    bubbles: true,
                    cancelable: true,
                    detail: detail
                };
                if (typeof window.CustomEvent === "function") return new CustomEvent(eventName, params);
                else {
                    // IE 11 support
                    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
                    var evt = document.createEvent("CustomEvent");
                    evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);
                    return evt;
                }
            }
        },
        {
            // Remove event listener for given event. If fn is not provided, all event
            // listeners for that event will be removed. If neither is provided, all
            // event listeners will be removed.
            key: "off",
            value: function off(event, fn) {
                if (!this._callbacks || arguments.length === 0) {
                    this._callbacks = {
                    };
                    return this;
                }
                // specific event
                var callbacks = this._callbacks[event];
                if (!callbacks) return this;
                // remove all handlers
                if (arguments.length === 1) {
                    delete this._callbacks[event];
                    return this;
                }
                // remove specific handler
                for(var i = 0; i < callbacks.length; i++){
                    var callback = callbacks[i];
                    if (callback === fn) {
                        callbacks.splice(i, 1);
                        break;
                    }
                }
                return this;
            }
        }
    ]);
    return $b1d17cfb1d15c36a$export$2e2bcd8739ae039;
}();



var $69c61888cc1f4c57$exports = {};
$69c61888cc1f4c57$exports = "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail=\"\"></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size=\"\"></span></div>\n    <div class=\"dz-filename\"><span data-dz-name=\"\"></span></div>\n  </div>\n  <div class=\"dz-progress\">\n    <span class=\"dz-upload\" data-dz-uploadprogress=\"\"></span>\n  </div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage=\"\"></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M10.2071 29.7929L14.2929 25.7071C14.6834 25.3166 15.3166 25.3166 15.7071 25.7071L21.2929 31.2929C21.6834 31.6834 22.3166 31.6834 22.7071 31.2929L38.2929 15.7071C38.6834 15.3166 39.3166 15.3166 39.7071 15.7071L43.7929 19.7929C44.1834 20.1834 44.1834 20.8166 43.7929 21.2071L22.7071 42.2929C22.3166 42.6834 21.6834 42.6834 21.2929 42.2929L10.2071 31.2071C9.81658 30.8166 9.81658 30.1834 10.2071 29.7929Z\"></path>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M26.2929 20.2929L19.2071 13.2071C18.8166 12.8166 18.1834 12.8166 17.7929 13.2071L13.2071 17.7929C12.8166 18.1834 12.8166 18.8166 13.2071 19.2071L20.2929 26.2929C20.6834 26.6834 20.6834 27.3166 20.2929 27.7071L13.2071 34.7929C12.8166 35.1834 12.8166 35.8166 13.2071 36.2071L17.7929 40.7929C18.1834 41.1834 18.8166 41.1834 19.2071 40.7929L26.2929 33.7071C26.6834 33.3166 27.3166 33.3166 27.7071 33.7071L34.7929 40.7929C35.1834 41.1834 35.8166 41.1834 36.2071 40.7929L40.7929 36.2071C41.1834 35.8166 41.1834 35.1834 40.7929 34.7929L33.7071 27.7071C33.3166 27.3166 33.3166 26.6834 33.7071 26.2929L40.7929 19.2071C41.1834 18.8166 41.1834 18.1834 40.7929 17.7929L36.2071 13.2071C35.8166 12.8166 35.1834 12.8166 34.7929 13.2071L27.7071 20.2929C27.3166 20.6834 26.6834 20.6834 26.2929 20.2929Z\"></path>\n    </svg>\n  </div>\n</div>\n";


var $b657c03155fc27e2$var$defaultOptions = {
    /**
   * Has to be specified on elements other than form (or when the form doesn't
   * have an `action` attribute).
   *
   * You can also provide a function that will be called with `files` and
   * `dataBlocks`  and must return the url as string.
   */ url: null,
    /**
   * Can be changed to `"put"` if necessary. You can also provide a function
   * that will be called with `files` and must return the method (since `v3.12.0`).
   */ method: "post",
    /**
   * Will be set on the XHRequest.
   */ withCredentials: false,
    /**
   * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
   * If set to null or 0, no timeout is going to be set.
   */ timeout: null,
    /**
   * How many file uploads to process in parallel (See the
   * Enqueuing file uploads documentation section for more info)
   */ parallelUploads: 2,
    /**
   * Whether to send multiple files in one request. If
   * this it set to true, then the fallback file input element will
   * have the `multiple` attribute as well. This option will
   * also trigger additional events (like `processingmultiple`). See the events
   * documentation section for more information.
   */ uploadMultiple: false,
    /**
   * Whether you want files to be uploaded in chunks to your server. This can't be
   * used in combination with `uploadMultiple`.
   *
   * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
   */ chunking: false,
    /**
   * If `chunking` is enabled, this defines whether **every** file should be chunked,
   * even if the file size is below chunkSize. This means, that the additional chunk
   * form data will be submitted and the `chunksUploaded` callback will be invoked.
   */ forceChunking: false,
    /**
   * If `chunking` is `true`, then this defines the chunk size in bytes.
   */ chunkSize: 2097152,
    /**
   * If `true`, the individual chunks of a file are being uploaded simultaneously.
   */ parallelChunkUploads: false,
    /**
   * Whether a chunk should be retried if it fails.
   */ retryChunks: false,
    /**
   * If `retryChunks` is true, how many times should it be retried.
   */ retryChunksLimit: 3,
    /**
   * The maximum filesize (in MiB) that is allowed to be uploaded.
   */ maxFilesize: 256,
    /**
   * The name of the file param that gets transferred.
   * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
   * Dropzone will append `[]` to the name.
   */ paramName: "file",
    /**
   * Whether thumbnails for images should be generated
   */ createImageThumbnails: true,
    /**
   * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
   */ maxThumbnailFilesize: 10,
    /**
   * If `null`, the ratio of the image will be used to calculate it.
   */ thumbnailWidth: 120,
    /**
   * The same as `thumbnailWidth`. If both are null, images will not be resized.
   */ thumbnailHeight: 120,
    /**
   * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
   * Can be either `contain` or `crop`.
   */ thumbnailMethod: "crop",
    /**
   * If set, images will be resized to these dimensions before being **uploaded**.
   * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
   * ratio of the file will be preserved.
   *
   * The `options.transformFile` function uses these options, so if the `transformFile` function
   * is overridden, these options don't do anything.
   */ resizeWidth: null,
    /**
   * See `resizeWidth`.
   */ resizeHeight: null,
    /**
   * The mime type of the resized image (before it gets uploaded to the server).
   * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
   * See `resizeWidth` for more information.
   */ resizeMimeType: null,
    /**
   * The quality of the resized images. See `resizeWidth`.
   */ resizeQuality: 0.8,
    /**
   * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
   * Can be either `contain` or `crop`.
   */ resizeMethod: "contain",
    /**
   * The base that is used to calculate the **displayed** filesize. You can
   * change this to 1024 if you would rather display kibibytes, mebibytes,
   * etc... 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte`
   * not `1 kilobyte`. You can change this to `1024` if you don't care about
   * validity.
   */ filesizeBase: 1000,
    /**
   * If not `null` defines how many files this Dropzone handles. If it exceeds,
   * the event `maxfilesexceeded` will be called. The dropzone element gets the
   * class `dz-max-files-reached` accordingly so you can provide visual
   * feedback.
   */ maxFiles: null,
    /**
   * An optional object to send additional headers to the server. Eg:
   * `{ "My-Awesome-Header": "header value" }`
   */ headers: null,
    /**
   * Should the default headers be set or not?
   * Accept: application/json <- for requesting json response
   * Cache-Control: no-cache <- Request shouldnt be cached
   * X-Requested-With: XMLHttpRequest <- We sent the request via XMLHttpRequest
   */ defaultHeaders: true,
    /**
   * If `true`, the dropzone element itself will be clickable, if `false`
   * nothing will be clickable.
   *
   * You can also pass an HTML element, a CSS selector (for multiple elements)
   * or an array of those. In that case, all of those elements will trigger an
   * upload when clicked.
   */ clickable: true,
    /**
   * Whether hidden files in directories should be ignored.
   */ ignoreHiddenFiles: true,
    /**
   * The default implementation of `accept` checks the file's mime type or
   * extension against this list. This is a comma separated list of mime
   * types or file extensions.
   *
   * Eg.: `image/*,application/pdf,.psd`
   *
   * If the Dropzone is `clickable` this option will also be used as
   * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
   * parameter on the hidden file input as well.
   */ acceptedFiles: null,
    /**
   * **Deprecated!**
   * Use acceptedFiles instead.
   */ acceptedMimeTypes: null,
    /**
   * If false, files will be added to the queue but the queue will not be
   * processed automatically.
   * This can be useful if you need some additional user input before sending
   * files (or if you want want all files sent at once).
   * If you're ready to send the file simply call `myDropzone.processQueue()`.
   *
   * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
   * section for more information.
   */ autoProcessQueue: true,
    /**
   * If false, files added to the dropzone will not be queued by default.
   * You'll have to call `enqueueFile(file)` manually.
   */ autoQueue: true,
    /**
   * If `true`, this will add a link to every file preview to remove or cancel (if
   * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
   * and `dictRemoveFile` options are used for the wording.
   */ addRemoveLinks: false,
    /**
   * Defines where to display the file previews – if `null` the
   * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
   * selector. The element should have the `dropzone-previews` class so
   * the previews are displayed properly.
   */ previewsContainer: null,
    /**
   * Set this to `true` if you don't want previews to be shown.
   */ disablePreviews: false,
    /**
   * This is the element the hidden input field (which is used when clicking on the
   * dropzone to trigger file selection) will be appended to. This might
   * be important in case you use frameworks to switch the content of your page.
   *
   * Can be a selector string, or an element directly.
   */ hiddenInputContainer: "body",
    /**
   * If null, no capture type will be specified
   * If camera, mobile devices will skip the file selection and choose camera
   * If microphone, mobile devices will skip the file selection and choose the microphone
   * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
   * On apple devices multiple must be set to false.  AcceptedFiles may need to
   * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
   */ capture: null,
    /**
   * **Deprecated**. Use `renameFile` instead.
   */ renameFilename: null,
    /**
   * A function that is invoked before the file is uploaded to the server and renames the file.
   * This function gets the `File` as argument and can use the `file.name`. The actual name of the
   * file that gets used during the upload can be accessed through `file.upload.filename`.
   */ renameFile: null,
    /**
   * If `true` the fallback will be forced. This is very useful to test your server
   * implementations first and make sure that everything works as
   * expected without dropzone if you experience problems, and to test
   * how your fallbacks will look.
   */ forceFallback: false,
    /**
   * The text used before any files are dropped.
   */ dictDefaultMessage: "Drop files here to upload",
    /**
   * The text that replaces the default message text it the browser is not supported.
   */ dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
    /**
   * The text that will be added before the fallback form.
   * If you provide a  fallback element yourself, or if this option is `null` this will
   * be ignored.
   */ dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
    /**
   * If the filesize is too big.
   * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
   */ dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
    /**
   * If the file doesn't match the file type.
   */ dictInvalidFileType: "You can't upload files of this type.",
    /**
   * If the server response was invalid.
   * `{{statusCode}}` will be replaced with the servers status code.
   */ dictResponseError: "Server responded with {{statusCode}} code.",
    /**
   * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
   */ dictCancelUpload: "Cancel upload",
    /**
   * The text that is displayed if an upload was manually canceled
   */ dictUploadCanceled: "Upload canceled.",
    /**
   * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
   */ dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
    /**
   * If `addRemoveLinks` is true, the text to be used to remove a file.
   */ dictRemoveFile: "Remove file",
    /**
   * If this is not null, then the user will be prompted before removing a file.
   */ dictRemoveFileConfirmation: null,
    /**
   * Displayed if `maxFiles` is st and exceeded.
   * The string `{{maxFiles}}` will be replaced by the configuration value.
   */ dictMaxFilesExceeded: "You can not upload any more files.",
    /**
   * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
   * `b` for bytes.
   */ dictFileSizeUnits: {
        tb: "TB",
        gb: "GB",
        mb: "MB",
        kb: "KB",
        b: "b"
    },
    /**
   * Called when dropzone initialized
   * You can add event listeners here
   */ init: function() {
    },
    /**
   * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
   * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
   * of a function, this needs to return a map.
   *
   * The default implementation does nothing for normal uploads, but adds relevant information for
   * chunked uploads.
   *
   * This is the same as adding hidden input fields in the form element.
   */ params: function(files, xhr, chunk) {
        if (chunk) return {
            dzuuid: chunk.file.upload.uuid,
            dzchunkindex: chunk.index,
            dztotalfilesize: chunk.file.size,
            dzchunksize: this.options.chunkSize,
            dztotalchunkcount: chunk.file.upload.totalChunkCount,
            dzchunkbyteoffset: chunk.index * this.options.chunkSize
        };
    },
    /**
   * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
   * and a `done` function as parameters.
   *
   * If the done function is invoked without arguments, the file is "accepted" and will
   * be processed. If you pass an error message, the file is rejected, and the error
   * message will be displayed.
   * This function will not be called if the file is too big or doesn't match the mime types.
   */ accept: function(file, done) {
        return done();
    },
    /**
   * The callback that will be invoked when all chunks have been uploaded for a file.
   * It gets the file for which the chunks have been uploaded as the first parameter,
   * and the `done` function as second. `done()` needs to be invoked when everything
   * needed to finish the upload process is done.
   */ chunksUploaded: function chunksUploaded(file, done) {
        done();
    },
    /**
   * Sends the file as binary blob in body instead of form data.
   * If this is set, the `params` option will be ignored.
   * It's an error to set this to `true` along with `uploadMultiple` since
   * multiple files cannot be in a single binary body.
   */ binaryBody: false,
    /**
   * Gets called when the browser is not supported.
   * The default implementation shows the fallback input field and adds
   * a text.
   */ fallback: function() {
        // This code should pass in IE7... :(
        var messageElement;
        this.element.className = "".concat(this.element.className, " dz-browser-not-supported");
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = this.element.getElementsByTagName("div")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var child = _step.value;
                if (/(^| )dz-message($| )/.test(child.className)) {
                    messageElement = child;
                    child.className = "dz-message"; // Removes the 'dz-default' class
                    break;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        if (!messageElement) {
            messageElement = $a601ff30f483e917$export$2e2bcd8739ae039.createElement('<div class="dz-message"><span></span></div>');
            this.element.appendChild(messageElement);
        }
        var span = messageElement.getElementsByTagName("span")[0];
        if (span) {
            if (span.textContent != null) span.textContent = this.options.dictFallbackMessage;
            else if (span.innerText != null) span.innerText = this.options.dictFallbackMessage;
        }
        return this.element.appendChild(this.getFallbackForm());
    },
    /**
   * Gets called to calculate the thumbnail dimensions.
   *
   * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
   *
   *  - `srcWidth` & `srcHeight` (required)
   *  - `trgWidth` & `trgHeight` (required)
   *  - `srcX` & `srcY` (optional, default `0`)
   *  - `trgX` & `trgY` (optional, default `0`)
   *
   * Those values are going to be used by `ctx.drawImage()`.
   */ resize: function(file, width, height, resizeMethod) {
        var info = {
            srcX: 0,
            srcY: 0,
            srcWidth: file.width,
            srcHeight: file.height
        };
        var srcRatio = file.width / file.height;
        // Automatically calculate dimensions if not specified
        if (width == null && height == null) {
            width = info.srcWidth;
            height = info.srcHeight;
        } else if (width == null) width = height * srcRatio;
        else if (height == null) height = width / srcRatio;
        // Make sure images aren't upscaled
        width = Math.min(width, info.srcWidth);
        height = Math.min(height, info.srcHeight);
        var trgRatio = width / height;
        if (info.srcWidth > width || info.srcHeight > height) {
            // Image is bigger and needs rescaling
            if (resizeMethod === "crop") {
                if (srcRatio > trgRatio) {
                    info.srcHeight = file.height;
                    info.srcWidth = info.srcHeight * trgRatio;
                } else {
                    info.srcWidth = file.width;
                    info.srcHeight = info.srcWidth / trgRatio;
                }
            } else if (resizeMethod === "contain") {
                // Method 'contain'
                if (srcRatio > trgRatio) height = width / srcRatio;
                else width = height * srcRatio;
            } else throw new Error("Unknown resizeMethod '".concat(resizeMethod, "'"));
        }
        info.srcX = (file.width - info.srcWidth) / 2;
        info.srcY = (file.height - info.srcHeight) / 2;
        info.trgWidth = width;
        info.trgHeight = height;
        return info;
    },
    /**
   * Can be used to transform the file (for example, resize an image if necessary).
   *
   * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
   * images according to those dimensions.
   *
   * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
   * to be invoked with the file when the transformation is done.
   */ transformFile: function(file, done) {
        if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);
        else return done(file);
    },
    /**
   * A string that contains the template used for each dropped
   * file. Change it to fulfill your needs but make sure to properly
   * provide all elements.
   *
   * If you want to use an actual HTML element instead of providing a String
   * as a config option, you could create a div with the id `tpl`,
   * put the template inside it and provide the element like this:
   *
   *     document
   *       .querySelector('#tpl')
   *       .innerHTML
   *
   */ previewTemplate: (/*@__PURE__*/$parcel$interopDefault($69c61888cc1f4c57$exports)),
    /*
   Those functions register themselves to the events on init and handle all
   the user interface specific stuff. Overwriting them won't break the upload
   but can break the way it's displayed.
   You can overwrite them if you don't like the default behavior. If you just
   want to add an additional event handler, register it on the dropzone object
   and don't overwrite those options.
   */ // Those are self explanatory and simply concern the DragnDrop.
    drop: function(e) {
        return this.element.classList.remove("dz-drag-hover");
    },
    dragstart: function(e) {
    },
    dragend: function(e) {
        return this.element.classList.remove("dz-drag-hover");
    },
    dragenter: function(e) {
        return this.element.classList.add("dz-drag-hover");
    },
    dragover: function(e) {
        return this.element.classList.add("dz-drag-hover");
    },
    dragleave: function(e) {
        return this.element.classList.remove("dz-drag-hover");
    },
    paste: function(e) {
    },
    // Called whenever there are no files left in the dropzone anymore, and the
    // dropzone should be displayed as if in the initial state.
    reset: function() {
        return this.element.classList.remove("dz-started");
    },
    // Called when a file is added to the queue
    // Receives `file`
    addedfile: function(file) {
        if (this.element === this.previewsContainer) this.element.classList.add("dz-started");
        if (this.previewsContainer && !this.options.disablePreviews) {
            var _this = this;
            file.previewElement = $a601ff30f483e917$export$2e2bcd8739ae039.createElement(this.options.previewTemplate.trim());
            file.previewTemplate = file.previewElement; // Backwards compatibility
            this.previewsContainer.appendChild(file.previewElement);
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = file.previewElement.querySelectorAll("[data-dz-name]")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var node = _step.value;
                    node.textContent = file.name;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
            try {
                for(var _iterator1 = file.previewElement.querySelectorAll("[data-dz-size]")[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                    node = _step1.value;
                    node.innerHTML = this.filesize(file.size);
                }
            } catch (err) {
                _didIteratorError1 = true;
                _iteratorError1 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
            }
            if (this.options.addRemoveLinks) {
                file._removeLink = $a601ff30f483e917$export$2e2bcd8739ae039.createElement("<a class=\"dz-remove\" href=\"javascript:undefined;\" data-dz-remove>".concat(this.options.dictRemoveFile, "</a>"));
                file.previewElement.appendChild(file._removeLink);
            }
            var removeFileEvent = function(e) {
                var _this1 = _this;
                e.preventDefault();
                e.stopPropagation();
                if (file.status === $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING) return $a601ff30f483e917$export$2e2bcd8739ae039.confirm(_this.options.dictCancelUploadConfirmation, function() {
                    return _this1.removeFile(file);
                });
                else {
                    var _this2 = _this;
                    if (_this.options.dictRemoveFileConfirmation) return $a601ff30f483e917$export$2e2bcd8739ae039.confirm(_this.options.dictRemoveFileConfirmation, function() {
                        return _this2.removeFile(file);
                    });
                    else return _this.removeFile(file);
                }
            };
            var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
            try {
                for(var _iterator2 = file.previewElement.querySelectorAll("[data-dz-remove]")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                    var removeLink = _step2.value;
                    removeLink.addEventListener("click", removeFileEvent);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                    }
                } finally{
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    },
    // Called whenever a file is removed.
    removedfile: function(file) {
        if (file.previewElement != null && file.previewElement.parentNode != null) file.previewElement.parentNode.removeChild(file.previewElement);
        return this._updateMaxFilesReachedClass();
    },
    // Called when a thumbnail has been generated
    // Receives `file` and `dataUrl`
    thumbnail: function(file, dataUrl) {
        if (file.previewElement) {
            file.previewElement.classList.remove("dz-file-preview");
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = file.previewElement.querySelectorAll("[data-dz-thumbnail]")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var thumbnailElement = _step.value;
                    thumbnailElement.alt = file.name;
                    thumbnailElement.src = dataUrl;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
            return setTimeout(function() {
                return file.previewElement.classList.add("dz-image-preview");
            }, 1);
        }
    },
    // Called whenever an error occurs
    // Receives `file` and `message`
    error: function(file, message) {
        if (file.previewElement) {
            file.previewElement.classList.add("dz-error");
            if (typeof message !== "string" && message.error) message = message.error;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = file.previewElement.querySelectorAll("[data-dz-errormessage]")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var node = _step.value;
                    node.textContent = message;
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    },
    errormultiple: function() {
    },
    // Called when a file gets processed. Since there is a cue, not all added
    // files are processed immediately.
    // Receives `file`
    processing: function(file) {
        if (file.previewElement) {
            file.previewElement.classList.add("dz-processing");
            if (file._removeLink) return file._removeLink.innerHTML = this.options.dictCancelUpload;
        }
    },
    processingmultiple: function() {
    },
    // Called whenever the upload progress gets updated.
    // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.
    // To get the total number of bytes of the file, use `file.size`
    uploadprogress: function(file, progress, bytesSent) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        if (file.previewElement) try {
            for(var _iterator = file.previewElement.querySelectorAll("[data-dz-uploadprogress]")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var node = _step.value;
                node.nodeName === "PROGRESS" ? node.value = progress : node.style.width = "".concat(progress, "%");
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    },
    // Called whenever the total upload progress gets updated.
    // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent
    totaluploadprogress: function() {
    },
    // Called just before the file is sent. Gets the `xhr` object as second
    // parameter, so you can modify it (for example to add a CSRF token) and a
    // `formData` object to add additional information.
    sending: function() {
    },
    sendingmultiple: function() {
    },
    // When the complete upload is finished and successful
    // Receives `file`
    success: function(file) {
        if (file.previewElement) return file.previewElement.classList.add("dz-success");
    },
    successmultiple: function() {
    },
    // When the upload is canceled.
    canceled: function(file) {
        return this.emit("error", file, this.options.dictUploadCanceled);
    },
    canceledmultiple: function() {
    },
    // When the upload is finished, either with success or an error.
    // Receives `file`
    complete: function(file) {
        if (file._removeLink) file._removeLink.innerHTML = this.options.dictRemoveFile;
        if (file.previewElement) return file.previewElement.classList.add("dz-complete");
    },
    completemultiple: function() {
    },
    maxfilesexceeded: function() {
    },
    maxfilesreached: function() {
    },
    queuecomplete: function() {
    },
    addedfiles: function() {
    }
};
var $b657c03155fc27e2$export$2e2bcd8739ae039 = $b657c03155fc27e2$var$defaultOptions;


var $a601ff30f483e917$export$2e2bcd8739ae039 = /*#__PURE__*/ function(Emitter) {
    "use strict";
    $6mU8w$swchelpers.inherits($a601ff30f483e917$export$2e2bcd8739ae039, Emitter);
    function $a601ff30f483e917$export$2e2bcd8739ae039(el, options) {
        $6mU8w$swchelpers.classCallCheck(this, $a601ff30f483e917$export$2e2bcd8739ae039);
        var _this;
        _this = $6mU8w$swchelpers.possibleConstructorReturn(this, $6mU8w$swchelpers.getPrototypeOf($a601ff30f483e917$export$2e2bcd8739ae039).call(this));
        var fallback, left;
        _this.element = el;
        _this.clickableElements = [];
        _this.listeners = [];
        _this.files = []; // All files
        if (typeof _this.element === "string") _this.element = document.querySelector(_this.element);
        // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.
        if (!_this.element || _this.element.nodeType == null) throw new Error("Invalid dropzone element.");
        if (_this.element.dropzone) throw new Error("Dropzone already attached.");
        // Now add this dropzone to the instances.
        $a601ff30f483e917$export$2e2bcd8739ae039.instances.push($6mU8w$swchelpers.assertThisInitialized(_this));
        // Put the dropzone inside the element itself.
        _this.element.dropzone = $6mU8w$swchelpers.assertThisInitialized(_this);
        var elementOptions = (left = $a601ff30f483e917$export$2e2bcd8739ae039.optionsForElement(_this.element)) != null ? left : {
        };
        _this.options = $parcel$interopDefault($6mU8w$justextend)(true, {
        }, $b657c03155fc27e2$export$2e2bcd8739ae039, elementOptions, options != null ? options : {
        });
        _this.options.previewTemplate = _this.options.previewTemplate.replace(/\n*/g, "");
        // If the browser failed, just call the fallback and leave
        if (_this.options.forceFallback || !$a601ff30f483e917$export$2e2bcd8739ae039.isBrowserSupported()) return $6mU8w$swchelpers.possibleConstructorReturn(_this, _this.options.fallback.call($6mU8w$swchelpers.assertThisInitialized(_this)));
        // @options.url = @element.getAttribute "action" unless @options.url?
        if (_this.options.url == null) _this.options.url = _this.element.getAttribute("action");
        if (!_this.options.url) throw new Error("No URL provided.");
        if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
        if (_this.options.uploadMultiple && _this.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking.");
        if (_this.options.binaryBody && _this.options.uploadMultiple) throw new Error("You cannot set both: binaryBody and uploadMultiple.");
        // Backwards compatibility
        if (_this.options.acceptedMimeTypes) {
            _this.options.acceptedFiles = _this.options.acceptedMimeTypes;
            delete _this.options.acceptedMimeTypes;
        }
        // Backwards compatibility
        if (_this.options.renameFilename != null) _this.options.renameFile = function(file) {
            return _this.options.renameFilename.call($6mU8w$swchelpers.assertThisInitialized(_this), file.name, file);
        };
        if (typeof _this.options.method === "string") _this.options.method = _this.options.method.toUpperCase();
        if ((fallback = _this.getExistingFallback()) && fallback.parentNode) // Remove the fallback
        fallback.parentNode.removeChild(fallback);
        // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false
        if (_this.options.previewsContainer !== false) {
            if (_this.options.previewsContainer) _this.previewsContainer = $a601ff30f483e917$export$2e2bcd8739ae039.getElement(_this.options.previewsContainer, "previewsContainer");
            else _this.previewsContainer = _this.element;
        }
        if (_this.options.clickable) {
            if (_this.options.clickable === true) _this.clickableElements = [
                _this.element
            ];
            else _this.clickableElements = $a601ff30f483e917$export$2e2bcd8739ae039.getElements(_this.options.clickable, "clickable");
        }
        _this.init();
        return _this;
    }
    $6mU8w$swchelpers.createClass($a601ff30f483e917$export$2e2bcd8739ae039, [
        {
            // Returns all files that have been accepted
            key: "getAcceptedFiles",
            value: function getAcceptedFiles() {
                return this.files.filter(function(file) {
                    return file.accepted;
                }).map(function(file) {
                    return file;
                });
            }
        },
        {
            // Returns all files that have been rejected
            // Not sure when that's going to be useful, but added for completeness.
            key: "getRejectedFiles",
            value: function getRejectedFiles() {
                return this.files.filter(function(file) {
                    return !file.accepted;
                }).map(function(file) {
                    return file;
                });
            }
        },
        {
            key: "getFilesWithStatus",
            value: function getFilesWithStatus(status) {
                return this.files.filter(function(file) {
                    return file.status === status;
                }).map(function(file) {
                    return file;
                });
            }
        },
        {
            // Returns all files that are in the queue
            key: "getQueuedFiles",
            value: function getQueuedFiles() {
                return this.getFilesWithStatus($a601ff30f483e917$export$2e2bcd8739ae039.QUEUED);
            }
        },
        {
            key: "getUploadingFiles",
            value: function getUploadingFiles() {
                return this.getFilesWithStatus($a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING);
            }
        },
        {
            key: "getAddedFiles",
            value: function getAddedFiles() {
                return this.getFilesWithStatus($a601ff30f483e917$export$2e2bcd8739ae039.ADDED);
            }
        },
        {
            // Files that are either queued or uploading
            key: "getActiveFiles",
            value: function getActiveFiles() {
                return this.files.filter(function(file) {
                    return file.status === $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING || file.status === $a601ff30f483e917$export$2e2bcd8739ae039.QUEUED;
                }).map(function(file) {
                    return file;
                });
            }
        },
        {
            // The function that gets called when Dropzone is initialized. You
            // can (and should) setup event listeners inside this function.
            key: "init",
            value: function init() {
                var _this12 = this, _this1 = this, _this2 = this, _this3 = this, _this4 = this, _this5 = this, _this6 = this, _this7 = this, _this8 = this, _this9 = this, _this10 = this;
                // In case it isn't set already
                if (this.element.tagName === "form") this.element.setAttribute("enctype", "multipart/form-data");
                if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) this.element.appendChild($a601ff30f483e917$export$2e2bcd8739ae039.createElement("<div class=\"dz-default dz-message\"><button class=\"dz-button\" type=\"button\">".concat(this.options.dictDefaultMessage, "</button></div>")));
                if (this.clickableElements.length) {
                    var _this = this;
                    var setupHiddenFileInput = function() {
                        var _this11 = _this;
                        if (_this.hiddenFileInput) _this.hiddenFileInput.parentNode.removeChild(_this.hiddenFileInput);
                        _this.hiddenFileInput = document.createElement("input");
                        _this.hiddenFileInput.setAttribute("type", "file");
                        if (_this.options.maxFiles === null || _this.options.maxFiles > 1) _this.hiddenFileInput.setAttribute("multiple", "multiple");
                        _this.hiddenFileInput.className = "dz-hidden-input";
                        if (_this.options.acceptedFiles !== null) _this.hiddenFileInput.setAttribute("accept", _this.options.acceptedFiles);
                        if (_this.options.capture !== null) _this.hiddenFileInput.setAttribute("capture", _this.options.capture);
                        // Making sure that no one can "tab" into this field.
                        _this.hiddenFileInput.setAttribute("tabindex", "-1");
                        // Not setting `display="none"` because some browsers don't accept clicks
                        // on elements that aren't displayed.
                        _this.hiddenFileInput.style.visibility = "hidden";
                        _this.hiddenFileInput.style.position = "absolute";
                        _this.hiddenFileInput.style.top = "0";
                        _this.hiddenFileInput.style.left = "0";
                        _this.hiddenFileInput.style.height = "0";
                        _this.hiddenFileInput.style.width = "0";
                        $a601ff30f483e917$export$2e2bcd8739ae039.getElement(_this.options.hiddenInputContainer, "hiddenInputContainer").appendChild(_this.hiddenFileInput);
                        _this.hiddenFileInput.addEventListener("change", function() {
                            var _hiddenFileInput = _this11.hiddenFileInput, files = _hiddenFileInput.files;
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            if (files.length) try {
                                for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var file = _step.value;
                                    _this11.addFile(file);
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                            _this11.emit("addedfiles", files);
                            setupHiddenFileInput();
                        });
                    };
                    setupHiddenFileInput();
                }
                this.URL = window.URL !== null ? window.URL : window.webkitURL;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // Setup all event listeners on the Dropzone object itself.
                    // They're not in @setupEventListeners() because they shouldn't be removed
                    // again when the dropzone gets disabled.
                    for(var _iterator = this.events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var eventName = _step.value;
                        this.on(eventName, this.options[eventName]);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                this.on("uploadprogress", function() {
                    return _this12.updateTotalUploadProgress();
                });
                this.on("removedfile", function() {
                    return _this1.updateTotalUploadProgress();
                });
                this.on("canceled", function(file) {
                    return _this2.emit("complete", file);
                });
                // Emit a `queuecomplete` event if all files finished uploading.
                this.on("complete", function(file) {
                    var _this11 = _this3;
                    if (_this3.getAddedFiles().length === 0 && _this3.getUploadingFiles().length === 0 && _this3.getQueuedFiles().length === 0) // This needs to be deferred so that `queuecomplete` really triggers after `complete`
                    return setTimeout(function() {
                        return _this11.emit("queuecomplete");
                    }, 0);
                });
                var containsFiles = function containsFiles(e) {
                    if (e.dataTransfer.types) // Because e.dataTransfer.types is an Object in
                    // IE, we need to iterate like this instead of
                    // using e.dataTransfer.types.some()
                    for(var i = 0; i < e.dataTransfer.types.length; i++){
                        if (e.dataTransfer.types[i] === "Files") return true;
                    }
                    return false;
                };
                var noPropagation = function noPropagation(e) {
                    // If there are no files, we don't want to stop
                    // propagation so we don't interfere with other
                    // drag and drop behaviour.
                    if (!containsFiles(e)) return;
                    e.stopPropagation();
                    if (e.preventDefault) return e.preventDefault();
                    else return e.returnValue = false;
                };
                // Create the listeners
                this.listeners = [
                    {
                        element: this.element,
                        events: {
                            dragstart: function(e) {
                                return _this4.emit("dragstart", e);
                            },
                            dragenter: function(e) {
                                noPropagation(e);
                                return _this5.emit("dragenter", e);
                            },
                            dragover: function(e) {
                                // Makes it possible to drag files from chrome's download bar
                                // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar
                                // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)
                                var efct;
                                try {
                                    efct = e.dataTransfer.effectAllowed;
                                } catch (error) {
                                }
                                e.dataTransfer.dropEffect = "move" === efct || "linkMove" === efct ? "move" : "copy";
                                noPropagation(e);
                                return _this6.emit("dragover", e);
                            },
                            dragleave: function(e) {
                                return _this7.emit("dragleave", e);
                            },
                            drop: function(e) {
                                noPropagation(e);
                                return _this8.drop(e);
                            },
                            dragend: function(e) {
                                return _this9.emit("dragend", e);
                            }
                        }
                    }, 
                ];
                this.clickableElements.forEach(function(clickableElement) {
                    var _this11 = _this10;
                    return _this10.listeners.push({
                        element: clickableElement,
                        events: {
                            click: function(evt) {
                                // Only the actual dropzone or the message element should trigger file selection
                                if (clickableElement !== _this11.element || evt.target === _this11.element || $a601ff30f483e917$export$2e2bcd8739ae039.elementInside(evt.target, _this11.element.querySelector(".dz-message"))) _this11.hiddenFileInput.click(); // Forward the click
                                return true;
                            }
                        }
                    });
                });
                this.enable();
                return this.options.init.call(this);
            }
        },
        {
            // Not fully tested yet
            key: "destroy",
            value: function destroy() {
                this.disable();
                this.removeAllFiles(true);
                if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {
                    this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
                    this.hiddenFileInput = null;
                }
                delete this.element.dropzone;
                return $a601ff30f483e917$export$2e2bcd8739ae039.instances.splice($a601ff30f483e917$export$2e2bcd8739ae039.instances.indexOf(this), 1);
            }
        },
        {
            key: "updateTotalUploadProgress",
            value: function updateTotalUploadProgress() {
                var totalUploadProgress;
                var totalBytesSent = 0;
                var totalBytes = 0;
                var activeFiles = this.getActiveFiles();
                if (activeFiles.length) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = this.getActiveFiles()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var file = _step.value;
                            totalBytesSent += file.upload.bytesSent;
                            totalBytes += file.upload.total;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    totalUploadProgress = 100 * totalBytesSent / totalBytes;
                } else totalUploadProgress = 100;
                return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
            }
        },
        {
            // @options.paramName can be a function taking one parameter rather than a string.
            // A parameter name for a file is obtained simply by calling this with an index number.
            key: "_getParamName",
            value: function _getParamName(n) {
                if (typeof this.options.paramName === "function") return this.options.paramName(n);
                else return "".concat(this.options.paramName).concat(this.options.uploadMultiple ? "[".concat(n, "]") : "");
            }
        },
        {
            // If @options.renameFile is a function,
            // the function will be used to rename the file.name before appending it to the formData
            key: "_renameFile",
            value: function _renameFile(file) {
                if (typeof this.options.renameFile !== "function") return file.name;
                return this.options.renameFile(file);
            }
        },
        {
            // Returns a form that can be used as fallback if the browser does not support DragnDrop
            //
            // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.
            // This code has to pass in IE7 :(
            key: "getFallbackForm",
            value: function getFallbackForm() {
                var existingFallback, form;
                if (existingFallback = this.getExistingFallback()) return existingFallback;
                var fieldsString = '<div class="dz-fallback">';
                if (this.options.dictFallbackText) fieldsString += "<p>".concat(this.options.dictFallbackText, "</p>");
                fieldsString += "<input type=\"file\" name=\"".concat(this._getParamName(0), "\" ").concat(this.options.uploadMultiple ? 'multiple="multiple"' : undefined, " /><input type=\"submit\" value=\"Upload!\"></div>");
                var fields = $a601ff30f483e917$export$2e2bcd8739ae039.createElement(fieldsString);
                if (this.element.tagName !== "FORM") {
                    form = $a601ff30f483e917$export$2e2bcd8739ae039.createElement("<form action=\"".concat(this.options.url, "\" enctype=\"multipart/form-data\" method=\"").concat(this.options.method, "\"></form>"));
                    form.appendChild(fields);
                } else {
                    // Make sure that the enctype and method attributes are set properly
                    this.element.setAttribute("enctype", "multipart/form-data");
                    this.element.setAttribute("method", this.options.method);
                }
                return form != null ? form : fields;
            }
        },
        {
            // Returns the fallback elements if they exist already
            //
            // This code has to pass in IE7 :(
            key: "getExistingFallback",
            value: function getExistingFallback() {
                var getFallback = function getFallback(elements) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var el = _step.value;
                            if (/(^| )fallback($| )/.test(el.className)) return el;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                };
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = [
                        "div",
                        "form"
                    ][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var tagName = _step.value;
                        var fallback;
                        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) return fallback;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            // Activates all listeners stored in @listeners
            key: "setupEventListeners",
            value: function setupEventListeners() {
                return this.listeners.map(function(elementListeners) {
                    return (function() {
                        var result = [];
                        for(var event in elementListeners.events){
                            var listener = elementListeners.events[event];
                            result.push(elementListeners.element.addEventListener(event, listener, false));
                        }
                        return result;
                    })();
                });
            }
        },
        {
            // Deactivates all listeners stored in @listeners
            key: "removeEventListeners",
            value: function removeEventListeners() {
                return this.listeners.map(function(elementListeners) {
                    return (function() {
                        var result = [];
                        for(var event in elementListeners.events){
                            var listener = elementListeners.events[event];
                            result.push(elementListeners.element.removeEventListener(event, listener, false));
                        }
                        return result;
                    })();
                });
            }
        },
        {
            // Removes all event listeners and cancels all files in the queue or being processed.
            key: "disable",
            value: function disable() {
                var _this = this;
                this.clickableElements.forEach(function(element) {
                    return element.classList.remove("dz-clickable");
                });
                this.removeEventListeners();
                this.disabled = true;
                return this.files.map(function(file) {
                    return _this.cancelUpload(file);
                });
            }
        },
        {
            key: "enable",
            value: function enable() {
                delete this.disabled;
                this.clickableElements.forEach(function(element) {
                    return element.classList.add("dz-clickable");
                });
                return this.setupEventListeners();
            }
        },
        {
            // Returns a nicely formatted filesize
            key: "filesize",
            value: function filesize(size) {
                var selectedSize = 0;
                var selectedUnit = "b";
                if (size > 0) {
                    var units = [
                        "tb",
                        "gb",
                        "mb",
                        "kb",
                        "b"
                    ];
                    for(var i = 0; i < units.length; i++){
                        var unit = units[i];
                        var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
                        if (size >= cutoff) {
                            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
                            selectedUnit = unit;
                            break;
                        }
                    }
                    selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits
                }
                return "<strong>".concat(selectedSize, "</strong> ").concat(this.options.dictFileSizeUnits[selectedUnit]);
            }
        },
        {
            // Adds or removes the `dz-max-files-reached` class from the form.
            key: "_updateMaxFilesReachedClass",
            value: function _updateMaxFilesReachedClass() {
                if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
                    if (this.getAcceptedFiles().length === this.options.maxFiles) this.emit("maxfilesreached", this.files);
                    return this.element.classList.add("dz-max-files-reached");
                } else return this.element.classList.remove("dz-max-files-reached");
            }
        },
        {
            key: "drop",
            value: function drop(e) {
                if (!e.dataTransfer) return;
                this.emit("drop", e);
                // Convert the FileList to an Array
                // This is necessary for IE11
                var files = [];
                for(var i = 0; i < e.dataTransfer.files.length; i++)files[i] = e.dataTransfer.files[i];
                // Even if it's a folder, files.length will contain the folders.
                if (files.length) {
                    var _dataTransfer = e.dataTransfer, items = _dataTransfer.items;
                    if (items && items.length && items[0].webkitGetAsEntry != null) // The browser supports dropping of folders, so handle items instead of files
                    this._addFilesFromItems(items);
                    else this.handleFiles(files);
                }
                this.emit("addedfiles", files);
            }
        },
        {
            key: "paste",
            value: function paste(e) {
                if ($a601ff30f483e917$var$__guard__(e != null ? e.clipboardData : undefined, function(x) {
                    return x.items;
                }) == null) return;
                this.emit("paste", e);
                var _clipboardData = e.clipboardData, items = _clipboardData.items;
                if (items.length) return this._addFilesFromItems(items);
            }
        },
        {
            key: "handleFiles",
            value: function handleFiles(files) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        this.addFile(file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            // When a folder is dropped (or files are pasted), items must be handled
            // instead of files.
            key: "_addFilesFromItems",
            value: function _addFilesFromItems(items) {
                var _this = this;
                return (function() {
                    var result = [];
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var item = _step.value;
                            var entry;
                            if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {
                                if (entry.isFile) result.push(_this.addFile(item.getAsFile()));
                                else if (entry.isDirectory) // Append all files from that directory to files
                                result.push(_this._addFilesFromDirectory(entry, entry.name));
                                else result.push(undefined);
                            } else if (item.getAsFile != null) {
                                if (item.kind == null || item.kind === "file") result.push(_this.addFile(item.getAsFile()));
                                else result.push(undefined);
                            } else result.push(undefined);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return result;
                })();
            }
        },
        {
            // Goes through the directory, and adds each file it finds recursively
            key: "_addFilesFromDirectory",
            value: function _addFilesFromDirectory(directory, path) {
                var _this = this;
                var dirReader = directory.createReader();
                var errorHandler = function(error) {
                    return $a601ff30f483e917$var$__guardMethod__(console, "log", function(o) {
                        return o.log(error);
                    });
                };
                var readEntries = function() {
                    var _this1 = _this;
                    return dirReader.readEntries(function(entries) {
                        if (entries.length > 0) {
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                for(var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var entry = _step.value;
                                    var _this2 = _this1;
                                    if (entry.isFile) entry.file(function(file) {
                                        if (_this2.options.ignoreHiddenFiles && file.name.substring(0, 1) === ".") return;
                                        file.fullPath = "".concat(path, "/").concat(file.name);
                                        return _this2.addFile(file);
                                    });
                                    else if (entry.isDirectory) _this1._addFilesFromDirectory(entry, "".concat(path, "/").concat(entry.name));
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                            // Recursively call readEntries() again, since browser only handle
                            // the first 100 entries.
                            // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries
                            readEntries();
                        }
                        return null;
                    }, errorHandler);
                };
                return readEntries();
            }
        },
        {
            // If `done()` is called without argument the file is accepted
            // If you call it with an error message, the file is rejected
            // (This allows for asynchronous validation)
            //
            // This function checks the filesize, and if the file.type passes the
            // `acceptedFiles` check.
            key: "accept",
            value: function accept(file, done) {
                if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1048576) done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
                else if (!$a601ff30f483e917$export$2e2bcd8739ae039.isValidFile(file, this.options.acceptedFiles)) done(this.options.dictInvalidFileType);
                else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
                    done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
                    this.emit("maxfilesexceeded", file);
                } else this.options.accept.call(this, file, done);
            }
        },
        {
            key: "addFile",
            value: function addFile(file) {
                var _this = this;
                file.upload = {
                    uuid: $a601ff30f483e917$export$2e2bcd8739ae039.uuidv4(),
                    progress: 0,
                    // Setting the total upload size to file.size for the beginning
                    // It's actual different than the size to be transmitted.
                    total: file.size,
                    bytesSent: 0,
                    filename: this._renameFile(file)
                };
                this.files.push(file);
                file.status = $a601ff30f483e917$export$2e2bcd8739ae039.ADDED;
                this.emit("addedfile", file);
                this._enqueueThumbnail(file);
                this.accept(file, function(error) {
                    if (error) {
                        file.accepted = false;
                        _this._errorProcessing([
                            file
                        ], error); // Will set the file.status
                    } else {
                        file.accepted = true;
                        if (_this.options.autoQueue) _this.enqueueFile(file);
                         // Will set .accepted = true
                    }
                    _this._updateMaxFilesReachedClass();
                });
            }
        },
        {
            // Wrapper for enqueueFile
            key: "enqueueFiles",
            value: function enqueueFiles(files) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        this.enqueueFile(file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return null;
            }
        },
        {
            key: "enqueueFile",
            value: function enqueueFile(file) {
                if (file.status === $a601ff30f483e917$export$2e2bcd8739ae039.ADDED && file.accepted === true) {
                    var _this = this;
                    file.status = $a601ff30f483e917$export$2e2bcd8739ae039.QUEUED;
                    if (this.options.autoProcessQueue) return setTimeout(function() {
                        return _this.processQueue();
                    }, 0); // Deferring the call
                } else throw new Error("This file can't be queued because it has already been processed or was rejected.");
            }
        },
        {
            key: "_enqueueThumbnail",
            value: function _enqueueThumbnail(file) {
                if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1048576) {
                    var _this = this;
                    this._thumbnailQueue.push(file);
                    return setTimeout(function() {
                        return _this._processThumbnailQueue();
                    }, 0); // Deferring the call
                }
            }
        },
        {
            key: "_processThumbnailQueue",
            value: function _processThumbnailQueue() {
                var _this = this;
                if (this._processingThumbnail || this._thumbnailQueue.length === 0) return;
                this._processingThumbnail = true;
                var file = this._thumbnailQueue.shift();
                return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function(dataUrl) {
                    _this.emit("thumbnail", file, dataUrl);
                    _this._processingThumbnail = false;
                    return _this._processThumbnailQueue();
                });
            }
        },
        {
            // Can be called by the user to remove a file
            key: "removeFile",
            value: function removeFile(file) {
                if (file.status === $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING) this.cancelUpload(file);
                this.files = $a601ff30f483e917$var$without(this.files, file);
                this.emit("removedfile", file);
                if (this.files.length === 0) return this.emit("reset");
            }
        },
        {
            // Removes all files that aren't currently processed from the list
            key: "removeAllFiles",
            value: function removeAllFiles(cancelIfNecessary) {
                // Create a copy of files since removeFile() changes the @files array.
                if (cancelIfNecessary == null) cancelIfNecessary = false;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.files.slice()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        if (file.status !== $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING || cancelIfNecessary) this.removeFile(file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return null;
            }
        },
        {
            // Resizes an image before it gets sent to the server. This function is the default behavior of
            // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with
            // the resized blob.
            key: "resizeImage",
            value: function resizeImage(file, width, height, resizeMethod, callback) {
                var _this = this;
                return this.createThumbnail(file, width, height, resizeMethod, true, function(dataUrl, canvas) {
                    if (canvas == null) // The image has not been resized
                    return callback(file);
                    else {
                        var _options = _this.options, resizeMimeType = _options.resizeMimeType;
                        if (resizeMimeType == null) resizeMimeType = file.type;
                        var resizedDataURL = canvas.toDataURL(resizeMimeType, _this.options.resizeQuality);
                        if (resizeMimeType === "image/jpeg" || resizeMimeType === "image/jpg") // Now add the original EXIF information
                        resizedDataURL = $a601ff30f483e917$var$ExifRestore.restore(file.dataURL, resizedDataURL);
                        return callback($a601ff30f483e917$export$2e2bcd8739ae039.dataURItoBlob(resizedDataURL));
                    }
                });
            }
        },
        {
            key: "createThumbnail",
            value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {
                var _this = this;
                var fileReader = new FileReader();
                fileReader.onload = function() {
                    file.dataURL = fileReader.result;
                    // Don't bother creating a thumbnail for SVG images since they're vector
                    if (file.type === "image/svg+xml") {
                        if (callback != null) callback(fileReader.result);
                        return;
                    }
                    _this.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);
                };
                fileReader.readAsDataURL(file);
            }
        },
        {
            // `mockFile` needs to have these attributes:
            //
            //     { name: 'name', size: 12345, imageUrl: '' }
            //
            // `callback` will be invoked when the image has been downloaded and displayed.
            // `crossOrigin` will be added to the `img` tag when accessing the file.
            key: "displayExistingFile",
            value: function displayExistingFile(mockFile, imageUrl, callback, crossOrigin, param) {
                var resizeThumbnail = param === void 0 ? true : param;
                this.emit("addedfile", mockFile);
                this.emit("complete", mockFile);
                if (!resizeThumbnail) {
                    this.emit("thumbnail", mockFile, imageUrl);
                    if (callback) callback();
                } else {
                    var _this = this;
                    var onDone = function(thumbnail) {
                        _this.emit("thumbnail", mockFile, thumbnail);
                        if (callback) callback();
                    };
                    mockFile.dataURL = imageUrl;
                    this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, onDone, crossOrigin);
                }
            }
        },
        {
            key: "createThumbnailFromUrl",
            value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {
                var _this = this;
                // Not using `new Image` here because of a bug in latest Chrome versions.
                // See https://github.com/enyo/dropzone/pull/226
                var img = document.createElement("img");
                if (crossOrigin) img.crossOrigin = crossOrigin;
                // fixOrientation is not needed anymore with browsers handling imageOrientation
                fixOrientation = getComputedStyle(document.body)["imageOrientation"] == "from-image" ? false : fixOrientation;
                img.onload = function() {
                    var _this1 = _this;
                    var loadExif = function(callback) {
                        return callback(1);
                    };
                    if (typeof EXIF !== "undefined" && EXIF !== null && fixOrientation) loadExif = function(callback) {
                        return EXIF.getData(img, function() {
                            return callback(EXIF.getTag(this, "Orientation"));
                        });
                    };
                    return loadExif(function(orientation) {
                        file.width = img.width;
                        file.height = img.height;
                        var resizeInfo = _this1.options.resize.call(_this1, file, width, height, resizeMethod);
                        var canvas = document.createElement("canvas");
                        var ctx = canvas.getContext("2d");
                        canvas.width = resizeInfo.trgWidth;
                        canvas.height = resizeInfo.trgHeight;
                        if (orientation > 4) {
                            canvas.width = resizeInfo.trgHeight;
                            canvas.height = resizeInfo.trgWidth;
                        }
                        switch(orientation){
                            case 2:
                                // horizontal flip
                                ctx.translate(canvas.width, 0);
                                ctx.scale(-1, 1);
                                break;
                            case 3:
                                // 180° rotate left
                                ctx.translate(canvas.width, canvas.height);
                                ctx.rotate(Math.PI);
                                break;
                            case 4:
                                // vertical flip
                                ctx.translate(0, canvas.height);
                                ctx.scale(1, -1);
                                break;
                            case 5:
                                // vertical flip + 90 rotate right
                                ctx.rotate(0.5 * Math.PI);
                                ctx.scale(1, -1);
                                break;
                            case 6:
                                // 90° rotate right
                                ctx.rotate(0.5 * Math.PI);
                                ctx.translate(0, -canvas.width);
                                break;
                            case 7:
                                // horizontal flip + 90 rotate right
                                ctx.rotate(0.5 * Math.PI);
                                ctx.translate(canvas.height, -canvas.width);
                                ctx.scale(-1, 1);
                                break;
                            case 8:
                                // 90° rotate left
                                ctx.rotate(-0.5 * Math.PI);
                                ctx.translate(-canvas.height, 0);
                                break;
                        }
                        // This is a bugfix for iOS' scaling bug.
                        $a601ff30f483e917$var$drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
                        var thumbnail = canvas.toDataURL("image/png");
                        if (callback != null) return callback(thumbnail, canvas);
                    });
                };
                if (callback != null) img.onerror = callback;
                return img.src = file.dataURL;
            }
        },
        {
            // Goes through the queue and processes files if there aren't too many already.
            key: "processQueue",
            value: function processQueue() {
                var _options = this.options, parallelUploads = _options.parallelUploads;
                var processingLength = this.getUploadingFiles().length;
                var i = processingLength;
                // There are already at least as many files uploading than should be
                if (processingLength >= parallelUploads) return;
                var queuedFiles = this.getQueuedFiles();
                if (!(queuedFiles.length > 0)) return;
                if (this.options.uploadMultiple) // The files should be uploaded in one request
                return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
                else while(i < parallelUploads){
                    if (!queuedFiles.length) return;
                     // Nothing left to process
                    this.processFile(queuedFiles.shift());
                    i++;
                }
            }
        },
        {
            // Wrapper for `processFiles`
            key: "processFile",
            value: function processFile(file) {
                return this.processFiles([
                    file
                ]);
            }
        },
        {
            // Loads the file, then calls finishedLoading()
            key: "processFiles",
            value: function processFiles(files) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        file.processing = true; // Backwards compatibility
                        file.status = $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING;
                        this.emit("processing", file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.options.uploadMultiple) this.emit("processingmultiple", files);
                return this.uploadFiles(files);
            }
        },
        {
            key: "_getFilesWithXhr",
            value: function _getFilesWithXhr(xhr) {
                var files;
                return files = this.files.filter(function(file) {
                    return file.xhr === xhr;
                }).map(function(file) {
                    return file;
                });
            }
        },
        {
            // Cancels the file upload and sets the status to CANCELED
            // **if** the file is actually being uploaded.
            // If it's still in the queue, the file is being removed from it and the status
            // set to CANCELED.
            key: "cancelUpload",
            value: function cancelUpload(file) {
                if (file.status === $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING) {
                    var groupedFiles = this._getFilesWithXhr(file.xhr);
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(var _iterator = groupedFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var groupedFile = _step.value;
                            groupedFile.status = $a601ff30f483e917$export$2e2bcd8739ae039.CANCELED;
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (typeof file.xhr !== "undefined") file.xhr.abort();
                    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        for(var _iterator1 = groupedFiles[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                            var groupedFile = _step1.value;
                            this.emit("canceled", groupedFile);
                        }
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                    if (this.options.uploadMultiple) this.emit("canceledmultiple", groupedFiles);
                } else if (file.status === $a601ff30f483e917$export$2e2bcd8739ae039.ADDED || file.status === $a601ff30f483e917$export$2e2bcd8739ae039.QUEUED) {
                    file.status = $a601ff30f483e917$export$2e2bcd8739ae039.CANCELED;
                    this.emit("canceled", file);
                    if (this.options.uploadMultiple) this.emit("canceledmultiple", [
                        file
                    ]);
                }
                if (this.options.autoProcessQueue) return this.processQueue();
            }
        },
        {
            key: "resolveOption",
            value: function resolveOption(option) {
                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    args[_key - 1] = arguments[_key];
                }
                if (typeof option === "function") return option.apply(this, args);
                return option;
            }
        },
        {
            key: "uploadFile",
            value: function uploadFile(file) {
                return this.uploadFiles([
                    file
                ]);
            }
        },
        {
            key: "uploadFiles",
            value: function uploadFiles(files) {
                var _this = this;
                this._transformFiles(files, function(transformedFiles) {
                    if (_this.options.chunking) {
                        // Chunking is not allowed to be used with `uploadMultiple` so we know
                        // that there is only __one__file.
                        var transformedFile = transformedFiles[0];
                        files[0].upload.chunked = _this.options.chunking && (_this.options.forceChunking || transformedFile.size > _this.options.chunkSize);
                        files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / _this.options.chunkSize);
                    }
                    if (files[0].upload.chunked) {
                        var _this1 = _this, _this4 = _this;
                        // This file should be sent in chunks!
                        // If the chunking option is set, we **know** that there can only be **one** file, since
                        // uploadMultiple is not allowed with this option.
                        var file = files[0];
                        var transformedFile = transformedFiles[0];
                        var startedChunkCount = 0;
                        file.upload.chunks = [];
                        var handleNextChunk = function() {
                            var chunkIndex = 0;
                            // Find the next item in file.upload.chunks that is not defined yet.
                            while(file.upload.chunks[chunkIndex] !== undefined)chunkIndex++;
                            // This means, that all chunks have already been started.
                            if (chunkIndex >= file.upload.totalChunkCount) return;
                            startedChunkCount++;
                            var start = chunkIndex * _this1.options.chunkSize;
                            var end = Math.min(start + _this1.options.chunkSize, transformedFile.size);
                            var dataBlock = {
                                name: _this1._getParamName(0),
                                data: transformedFile.webkitSlice ? transformedFile.webkitSlice(start, end) : transformedFile.slice(start, end),
                                filename: file.upload.filename,
                                chunkIndex: chunkIndex
                            };
                            file.upload.chunks[chunkIndex] = {
                                file: file,
                                index: chunkIndex,
                                dataBlock: dataBlock,
                                status: $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING,
                                progress: 0,
                                retries: 0
                            };
                            _this1._uploadData(files, [
                                dataBlock
                            ]);
                        };
                        file.upload.finishedChunkUpload = function(chunk, response) {
                            var _this5 = _this4;
                            var allFinished = true;
                            chunk.status = $a601ff30f483e917$export$2e2bcd8739ae039.SUCCESS;
                            // Clear the data from the chunk
                            chunk.dataBlock = null;
                            chunk.response = chunk.xhr.responseText;
                            chunk.responseHeaders = chunk.xhr.getAllResponseHeaders();
                            // Leaving this reference to xhr will cause memory leaks.
                            chunk.xhr = null;
                            for(var i = 0; i < file.upload.totalChunkCount; i++){
                                if (file.upload.chunks[i] === undefined) return handleNextChunk();
                                if (file.upload.chunks[i].status !== $a601ff30f483e917$export$2e2bcd8739ae039.SUCCESS) allFinished = false;
                            }
                            if (allFinished) _this4.options.chunksUploaded(file, function() {
                                _this5._finished(files, response, null);
                            });
                        };
                        if (_this.options.parallelChunkUploads) for(var i = 0; i < file.upload.totalChunkCount; i++)handleNextChunk();
                        else handleNextChunk();
                    } else {
                        var dataBlocks = [];
                        for(var i = 0; i < files.length; i++)dataBlocks[i] = {
                            name: _this._getParamName(i),
                            data: transformedFiles[i],
                            filename: files[i].upload.filename
                        };
                        _this._uploadData(files, dataBlocks);
                    }
                });
            }
        },
        {
            /// Returns the right chunk for given file and xhr
            key: "_getChunk",
            value: function _getChunk(file, xhr) {
                for(var i = 0; i < file.upload.totalChunkCount; i++){
                    if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) return file.upload.chunks[i];
                }
            }
        },
        {
            // This function actually uploads the file(s) to the server.
            //
            //  If dataBlocks contains the actual data to upload (meaning, that this could
            // either be transformed files, or individual chunks for chunked upload) then
            // they will be used for the actual data to upload.
            key: "_uploadData",
            value: function _uploadData(files, dataBlocks) {
                var _this = this, _this7 = this, _this8 = this, _this9 = this;
                var xhr = new XMLHttpRequest();
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    // Put the xhr object in the file objects to be able to reference it later.
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        file.xhr = xhr;
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (files[0].upload.chunked) // Put the xhr object in the right chunk object, so it can be associated
                // later, and found with _getChunk.
                files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;
                var method = this.resolveOption(this.options.method, files, dataBlocks);
                var url = this.resolveOption(this.options.url, files, dataBlocks);
                xhr.open(method, url, true);
                // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8
                var timeout = this.resolveOption(this.options.timeout, files);
                if (timeout) xhr.timeout = this.resolveOption(this.options.timeout, files);
                // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179
                xhr.withCredentials = !!this.options.withCredentials;
                xhr.onload = function(e) {
                    _this._finishedUploading(files, xhr, e);
                };
                xhr.ontimeout = function() {
                    _this7._handleUploadError(files, xhr, "Request timedout after ".concat(_this7.options.timeout / 1000, " seconds"));
                };
                xhr.onerror = function() {
                    _this8._handleUploadError(files, xhr);
                };
                // Some browsers do not have the .upload property
                var progressObj = xhr.upload != null ? xhr.upload : xhr;
                progressObj.onprogress = function(e) {
                    return _this9._updateFilesUploadProgress(files, xhr, e);
                };
                var headers = this.options.defaultHeaders ? {
                    Accept: "application/json",
                    "Cache-Control": "no-cache",
                    "X-Requested-With": "XMLHttpRequest"
                } : {
                };
                if (this.options.binaryBody) headers["Content-Type"] = files[0].type;
                if (this.options.headers) $parcel$interopDefault($6mU8w$justextend)(headers, this.options.headers);
                for(var headerName in headers){
                    var headerValue = headers[headerName];
                    if (headerValue) xhr.setRequestHeader(headerName, headerValue);
                }
                if (this.options.binaryBody) {
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        // Since the file is going to be sent as binary body, it doesn't make
                        // any sense to generate `FormData` for it.
                        for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var file = _step.value;
                            this.emit("sending", file, xhr);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (this.options.uploadMultiple) this.emit("sendingmultiple", files, xhr);
                    this.submitRequest(xhr, null, files);
                } else {
                    var formData = new FormData();
                    // Adding all @options parameters
                    if (this.options.params) {
                        var additionalParams = this.options.params;
                        if (typeof additionalParams === "function") additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);
                        for(var key in additionalParams){
                            var value = additionalParams[key];
                            if (Array.isArray(value)) // The additional parameter contains an array,
                            // so lets iterate over it to attach each value
                            // individually.
                            for(var i = 0; i < value.length; i++)formData.append(key, value[i]);
                            else formData.append(key, value);
                        }
                    }
                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        // Let the user add additional data if necessary
                        for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            var file = _step.value;
                            this.emit("sending", file, xhr, formData);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    if (this.options.uploadMultiple) this.emit("sendingmultiple", files, xhr, formData);
                    this._addFormElementData(formData);
                    // Finally add the files
                    // Has to be last because some servers (eg: S3) expect the file to be the last parameter
                    for(var i = 0; i < dataBlocks.length; i++){
                        var dataBlock = dataBlocks[i];
                        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);
                    }
                    this.submitRequest(xhr, formData, files);
                }
            }
        },
        {
            // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.
            key: "_transformFiles",
            value: function _transformFiles(files, done) {
                var _this = this, _loop = function(i) {
                    _this.options.transformFile.call(_this, files[i], function(transformedFile) {
                        transformedFiles[i] = transformedFile;
                        if (++doneCounter === files.length) done(transformedFiles);
                    });
                };
                var transformedFiles = [];
                // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.
                var doneCounter = 0;
                for(var i = 0; i < files.length; i++)_loop(i);
            }
        },
        {
            // Takes care of adding other input elements of the form to the AJAX request
            key: "_addFormElementData",
            value: function _addFormElementData(formData) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                // Take care of other input elements
                if (this.element.tagName === "FORM") try {
                    for(var _iterator = this.element.querySelectorAll("input, textarea, select, button")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var input = _step.value;
                        var inputName = input.getAttribute("name");
                        var inputType = input.getAttribute("type");
                        if (inputType) inputType = inputType.toLowerCase();
                        // If the input doesn't have a name, we can't use it.
                        if (typeof inputName === "undefined" || inputName === null) continue;
                        if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            try {
                                // Possibly multiple values
                                for(var _iterator = input.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                                    var option = _step.value;
                                    if (option.selected) formData.append(inputName, option.value);
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally{
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        } else if (!inputType || inputType !== "checkbox" && inputType !== "radio" || input.checked) formData.append(inputName, input.value);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            // Invoked when there is new progress information about given files.
            // If e is not provided, it is assumed that the upload is finished.
            key: "_updateFilesUploadProgress",
            value: function _updateFilesUploadProgress(files, xhr, e) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                if (!files[0].upload.chunked) try {
                    // Handle file uploads without chunking
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        if (file.upload.total && file.upload.bytesSent && file.upload.bytesSent == file.upload.total) continue;
                        if (e) {
                            file.upload.progress = 100 * e.loaded / e.total;
                            file.upload.total = e.total;
                            file.upload.bytesSent = e.loaded;
                        } else {
                            // No event, so we're at 100%
                            file.upload.progress = 100;
                            file.upload.bytesSent = file.upload.total;
                        }
                        this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                else {
                    // Handle chunked file uploads
                    // Chunked upload is not compatible with uploading multiple files in one
                    // request, so we know there's only one file.
                    var file = files[0];
                    // Since this is a chunked upload, we need to update the appropriate chunk
                    // progress.
                    var chunk = this._getChunk(file, xhr);
                    if (e) {
                        chunk.progress = 100 * e.loaded / e.total;
                        chunk.total = e.total;
                        chunk.bytesSent = e.loaded;
                    } else {
                        // No event, so we're at 100%
                        chunk.progress = 100;
                        chunk.bytesSent = chunk.total;
                    }
                    // Now tally the *file* upload progress from its individual chunks
                    file.upload.progress = 0;
                    file.upload.total = 0;
                    file.upload.bytesSent = 0;
                    for(var i = 0; i < file.upload.totalChunkCount; i++)if (file.upload.chunks[i] && typeof file.upload.chunks[i].progress !== "undefined") {
                        file.upload.progress += file.upload.chunks[i].progress;
                        file.upload.total += file.upload.chunks[i].total;
                        file.upload.bytesSent += file.upload.chunks[i].bytesSent;
                    }
                    // Since the process is a percentage, we need to divide by the amount of
                    // chunks we've used.
                    file.upload.progress = file.upload.progress / file.upload.totalChunkCount;
                    this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
                }
            }
        },
        {
            key: "_finishedUploading",
            value: function _finishedUploading(files, xhr, e) {
                var response;
                if (files[0].status === $a601ff30f483e917$export$2e2bcd8739ae039.CANCELED) return;
                if (xhr.readyState !== 4) return;
                if (xhr.responseType !== "arraybuffer" && xhr.responseType !== "blob") {
                    response = xhr.responseText;
                    if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) try {
                        response = JSON.parse(response);
                    } catch (error) {
                        e = error;
                        response = "Invalid JSON response from server.";
                    }
                }
                this._updateFilesUploadProgress(files, xhr);
                if (!(200 <= xhr.status && xhr.status < 300)) this._handleUploadError(files, xhr, response);
                else if (files[0].upload.chunked) files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr), response);
                else this._finished(files, response, e);
            }
        },
        {
            key: "_handleUploadError",
            value: function _handleUploadError(files, xhr, response) {
                if (files[0].status === $a601ff30f483e917$export$2e2bcd8739ae039.CANCELED) return;
                if (files[0].upload.chunked && this.options.retryChunks) {
                    var chunk = this._getChunk(files[0], xhr);
                    if ((chunk.retries++) < this.options.retryChunksLimit) {
                        this._uploadData(files, [
                            chunk.dataBlock
                        ]);
                        return;
                    } else console.warn("Retried this chunk too often. Giving up.");
                }
                this._errorProcessing(files, response || this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr);
            }
        },
        {
            key: "submitRequest",
            value: function submitRequest(xhr, formData, files) {
                if (xhr.readyState != 1) {
                    console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.");
                    return;
                }
                if (this.options.binaryBody) {
                    if (files[0].upload.chunked) {
                        var chunk = this._getChunk(files[0], xhr);
                        xhr.send(chunk.dataBlock.data);
                    } else xhr.send(files[0]);
                } else xhr.send(formData);
            }
        },
        {
            // Called internally when processing is finished.
            // Individual callbacks have to be called in the appropriate sections.
            key: "_finished",
            value: function _finished(files, responseText, e) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        file.status = $a601ff30f483e917$export$2e2bcd8739ae039.SUCCESS;
                        this.emit("success", file, responseText, e);
                        this.emit("complete", file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.options.uploadMultiple) {
                    this.emit("successmultiple", files, responseText, e);
                    this.emit("completemultiple", files);
                }
                if (this.options.autoProcessQueue) return this.processQueue();
            }
        },
        {
            // Called internally when processing is finished.
            // Individual callbacks have to be called in the appropriate sections.
            key: "_errorProcessing",
            value: function _errorProcessing(files, message, xhr) {
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var file = _step.value;
                        file.status = $a601ff30f483e917$export$2e2bcd8739ae039.ERROR;
                        this.emit("error", file, message, xhr);
                        this.emit("complete", file);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                if (this.options.uploadMultiple) {
                    this.emit("errormultiple", files, message, xhr);
                    this.emit("completemultiple", files);
                }
                if (this.options.autoProcessQueue) return this.processQueue();
            }
        }
    ], [
        {
            key: "initClass",
            value: function initClass() {
                // Exposing the emitter class, mainly for tests
                this.prototype.Emitter = $b1d17cfb1d15c36a$export$2e2bcd8739ae039;
                /*
     This is a list of all available events you can register on a dropzone object.

     You can register an event handler like this:

     dropzone.on("dragEnter", function() { });

     */ this.prototype.events = [
                    "drop",
                    "dragstart",
                    "dragend",
                    "dragenter",
                    "dragover",
                    "dragleave",
                    "addedfile",
                    "addedfiles",
                    "removedfile",
                    "thumbnail",
                    "error",
                    "errormultiple",
                    "processing",
                    "processingmultiple",
                    "uploadprogress",
                    "totaluploadprogress",
                    "sending",
                    "sendingmultiple",
                    "success",
                    "successmultiple",
                    "canceled",
                    "canceledmultiple",
                    "complete",
                    "completemultiple",
                    "reset",
                    "maxfilesexceeded",
                    "maxfilesreached",
                    "queuecomplete", 
                ];
                this.prototype._thumbnailQueue = [];
                this.prototype._processingThumbnail = false;
            }
        },
        {
            key: "uuidv4",
            value: function uuidv4() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                    var r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
                    return v.toString(16);
                });
            }
        }
    ]);
    return $a601ff30f483e917$export$2e2bcd8739ae039;
}($b1d17cfb1d15c36a$export$2e2bcd8739ae039);
$a601ff30f483e917$export$2e2bcd8739ae039.initClass();
// This is a map of options for your different dropzones. Add configurations
// to this object for your different dropzone elemens.
//
// Example:
//
//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };
//
// And in html:
//
//     <form action="/upload" id="my-dropzone-element-id" class="dropzone"></form>
$a601ff30f483e917$export$2e2bcd8739ae039.options = {
};
// Returns the options for an element or undefined if none available.
$a601ff30f483e917$export$2e2bcd8739ae039.optionsForElement = function(element) {
    // Get the `Dropzone.options.elementId` for this element if it exists
    if (element.getAttribute("id")) return $a601ff30f483e917$export$2e2bcd8739ae039.options[$a601ff30f483e917$var$camelize(element.getAttribute("id"))];
    else return undefined;
};
// Holds a list of all dropzone instances
$a601ff30f483e917$export$2e2bcd8739ae039.instances = [];
// Returns the dropzone for given element if any
$a601ff30f483e917$export$2e2bcd8739ae039.forElement = function(element) {
    if (typeof element === "string") element = document.querySelector(element);
    if ((element != null ? element.dropzone : undefined) == null) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
    return element.dropzone;
};
// Looks for all .dropzone elements and creates a dropzone for them
$a601ff30f483e917$export$2e2bcd8739ae039.discover = function() {
    var dropzones;
    if (document.querySelectorAll) dropzones = document.querySelectorAll(".dropzone");
    else {
        dropzones = [];
        // IE :(
        var checkElements = function(elements) {
            return (function() {
                var result = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var el = _step.value;
                        if (/(^| )dropzone($| )/.test(el.className)) result.push(dropzones.push(el));
                        else result.push(undefined);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            })();
        };
        checkElements(document.getElementsByTagName("div"));
        checkElements(document.getElementsByTagName("form"));
    }
    return (function() {
        var result = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = dropzones[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var dropzone = _step.value;
                // Create a dropzone unless auto discover has been disabled for specific element
                if ($a601ff30f483e917$export$2e2bcd8739ae039.optionsForElement(dropzone) !== false) result.push(new $a601ff30f483e917$export$2e2bcd8739ae039(dropzone));
                else result.push(undefined);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return result;
    })();
};
// Some browsers support drag and drog functionality, but not correctly.
//
// So I created a blocklist of userAgents. Yes, yes. Browser sniffing, I know.
// But what to do when browsers *theoretically* support an API, but crash
// when using it.
//
// This is a list of regular expressions tested against navigator.userAgent
//
// ** It should only be used on browser that *do* support the API, but
// incorrectly **
$a601ff30f483e917$export$2e2bcd8739ae039.blockedBrowsers = [
    // The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.
    /opera.*(Macintosh|Windows Phone).*version\/12/i, 
];
// Checks if the browser is supported
$a601ff30f483e917$export$2e2bcd8739ae039.isBrowserSupported = function() {
    var capableBrowser = true;
    if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
        if (!("classList" in document.createElement("a"))) capableBrowser = false;
        else {
            if ($a601ff30f483e917$export$2e2bcd8739ae039.blacklistedBrowsers !== undefined) // Since this has been renamed, this makes sure we don't break older
            // configuration.
            $a601ff30f483e917$export$2e2bcd8739ae039.blockedBrowsers = $a601ff30f483e917$export$2e2bcd8739ae039.blacklistedBrowsers;
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                // The browser supports the API, but may be blocked.
                for(var _iterator = $a601ff30f483e917$export$2e2bcd8739ae039.blockedBrowsers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    var regex = _step.value;
                    if (regex.test(navigator.userAgent)) {
                        capableBrowser = false;
                        continue;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    } else capableBrowser = false;
    return capableBrowser;
};
$a601ff30f483e917$export$2e2bcd8739ae039.dataURItoBlob = function(dataURI) {
    // convert base64 to raw binary data held in a string
    // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
    var byteString = atob(dataURI.split(",")[1]);
    // separate out the mime component
    var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
    // write the bytes of the string to an ArrayBuffer
    var ab = new ArrayBuffer(byteString.length);
    var ia = new Uint8Array(ab);
    for(var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--)ia[i] = byteString.charCodeAt(i);
    // write the ArrayBuffer to a blob
    return new Blob([
        ab
    ], {
        type: mimeString
    });
};
// Returns an array without the rejected item
var $a601ff30f483e917$var$without = function(list, rejectedItem) {
    return list.filter(function(item) {
        return item !== rejectedItem;
    }).map(function(item) {
        return item;
    });
};
// abc-def_ghi -> abcDefGhi
var $a601ff30f483e917$var$camelize = function(str) {
    return str.replace(/[\-_](\w)/g, function(match) {
        return match.charAt(1).toUpperCase();
    });
};
// Creates an element from string
$a601ff30f483e917$export$2e2bcd8739ae039.createElement = function(string) {
    var div = document.createElement("div");
    div.innerHTML = string;
    return div.childNodes[0];
};
// Tests if given element is inside (or simply is) the container
$a601ff30f483e917$export$2e2bcd8739ae039.elementInside = function(element, container) {
    if (element === container) return true;
     // Coffeescript doesn't support do/while loops
    while(element = element.parentNode){
        if (element === container) return true;
    }
    return false;
};
$a601ff30f483e917$export$2e2bcd8739ae039.getElement = function(el, name) {
    var element;
    if (typeof el === "string") element = document.querySelector(el);
    else if (el.nodeType != null) element = el;
    if (element == null) throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector or a plain HTML element."));
    return element;
};
$a601ff30f483e917$export$2e2bcd8739ae039.getElements = function(els, name) {
    var el, elements;
    if (els instanceof Array) {
        elements = [];
        try {
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
                for(var _iterator = els[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                    el = _step.value;
                    elements.push(this.getElement(el, name));
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        } catch (e) {
            elements = null;
        }
    } else if (typeof els === "string") {
        elements = [];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = document.querySelectorAll(els)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                el = _step.value;
                elements.push(el);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    } else if (els.nodeType != null) elements = [
        els
    ];
    if (elements == null || !elements.length) throw new Error("Invalid `".concat(name, "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."));
    return elements;
};
// Asks the user the question and calls accepted or rejected accordingly
//
// The default implementation just uses `window.confirm` and then calls the
// appropriate callback.
$a601ff30f483e917$export$2e2bcd8739ae039.confirm = function(question, accepted, rejected) {
    if (window.confirm(question)) return accepted();
    else if (rejected != null) return rejected();
};
// Validates the mime type like this:
//
// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept
$a601ff30f483e917$export$2e2bcd8739ae039.isValidFile = function(file, acceptedFiles) {
    if (!acceptedFiles) return true;
     // If there are no accepted mime types, it's OK
    acceptedFiles = acceptedFiles.split(",");
    var mimeType = file.type;
    var baseMimeType = mimeType.replace(/\/.*$/, "");
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = acceptedFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var validType = _step.value;
            validType = validType.trim();
            if (validType.charAt(0) === ".") {
                if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) return true;
            } else if (/\/\*$/.test(validType)) {
                // This is something like a image/* mime type
                if (baseMimeType === validType.replace(/\/.*$/, "")) return true;
            } else {
                if (mimeType === validType) return true;
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return false;
};
// Augment jQuery
if (typeof jQuery !== "undefined" && jQuery !== null) jQuery.fn.dropzone = function(options) {
    return this.each(function() {
        return new $a601ff30f483e917$export$2e2bcd8739ae039(this, options);
    });
};
// Dropzone file status codes
$a601ff30f483e917$export$2e2bcd8739ae039.ADDED = "added";
$a601ff30f483e917$export$2e2bcd8739ae039.QUEUED = "queued";
// For backwards compatibility. Now, if a file is accepted, it's either queued
// or uploading.
$a601ff30f483e917$export$2e2bcd8739ae039.ACCEPTED = $a601ff30f483e917$export$2e2bcd8739ae039.QUEUED;
$a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING = "uploading";
$a601ff30f483e917$export$2e2bcd8739ae039.PROCESSING = $a601ff30f483e917$export$2e2bcd8739ae039.UPLOADING; // alias
$a601ff30f483e917$export$2e2bcd8739ae039.CANCELED = "canceled";
$a601ff30f483e917$export$2e2bcd8739ae039.ERROR = "error";
$a601ff30f483e917$export$2e2bcd8739ae039.SUCCESS = "success";
/*

 Bugfix for iOS 6 and 7
 Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
 based on the work of https://github.com/stomita/ios-imagefile-megapixel

 */ // Detecting vertical squash in loaded image.
// Fixes a bug which squash image vertically while drawing into canvas for some images.
// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel
var $a601ff30f483e917$var$detectVerticalSquash = function $a601ff30f483e917$var$detectVerticalSquash(img) {
    var iw = img.naturalWidth;
    var ih = img.naturalHeight;
    var canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = ih;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    var ref = ctx.getImageData(1, 0, 1, ih), data = ref.data;
    // search image edge pixel position in case it is squashed vertically.
    var sy = 0;
    var ey = ih;
    var py = ih;
    while(py > sy){
        var alpha = data[(py - 1) * 4 + 3];
        if (alpha === 0) ey = py;
        else sy = py;
        py = ey + sy >> 1;
    }
    var ratio = py / ih;
    if (ratio === 0) return 1;
    else return ratio;
};
// A replacement for context.drawImage
// (args are for source and destination).
var $a601ff30f483e917$var$drawImageIOSFix = function $a601ff30f483e917$var$drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
    var vertSquashRatio = $a601ff30f483e917$var$detectVerticalSquash(img);
    return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
};
var $a601ff30f483e917$var$ExifRestore = // Based on MinifyJpeg
// Source: http://www.perry.cz/files/ExifRestorer.js
// http://elicon.blog57.fc2.com/blog-entry-206.html
/*#__PURE__*/ function() {
    "use strict";
    function $a601ff30f483e917$var$ExifRestore() {
        $6mU8w$swchelpers.classCallCheck(this, $a601ff30f483e917$var$ExifRestore);
    }
    $6mU8w$swchelpers.createClass($a601ff30f483e917$var$ExifRestore, null, [
        {
            key: "initClass",
            value: function initClass() {
                this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            }
        },
        {
            key: "encode64",
            value: function encode64(input) {
                var output = "";
                var chr1 = undefined;
                var chr2 = undefined;
                var chr3 = "";
                var enc1 = undefined;
                var enc2 = undefined;
                var enc3 = undefined;
                var enc4 = "";
                var i = 0;
                while(true){
                    chr1 = input[i++];
                    chr2 = input[i++];
                    chr3 = input[i++];
                    enc1 = chr1 >> 2;
                    enc2 = (chr1 & 3) << 4 | chr2 >> 4;
                    enc3 = (chr2 & 15) << 2 | chr3 >> 6;
                    enc4 = chr3 & 63;
                    if (isNaN(chr2)) enc3 = enc4 = 64;
                    else if (isNaN(chr3)) enc4 = 64;
                    output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";
                    if (!(i < input.length)) break;
                }
                return output;
            }
        },
        {
            key: "restore",
            value: function restore(origFileBase64, resizedFileBase64) {
                if (!origFileBase64.match("data:image/jpeg;base64,")) return resizedFileBase64;
                var rawImage = this.decode64(origFileBase64.replace("data:image/jpeg;base64,", ""));
                var segments = this.slice2Segments(rawImage);
                var image = this.exifManipulation(resizedFileBase64, segments);
                return "data:image/jpeg;base64,".concat(this.encode64(image));
            }
        },
        {
            key: "exifManipulation",
            value: function exifManipulation(resizedFileBase64, segments) {
                var exifArray = this.getExifArray(segments);
                var newImageArray = this.insertExif(resizedFileBase64, exifArray);
                var aBuffer = new Uint8Array(newImageArray);
                return aBuffer;
            }
        },
        {
            key: "getExifArray",
            value: function getExifArray(segments) {
                var seg = undefined;
                var x = 0;
                while(x < segments.length){
                    seg = segments[x];
                    if (seg[0] === 255 & seg[1] === 225) return seg;
                    x++;
                }
                return [];
            }
        },
        {
            key: "insertExif",
            value: function insertExif(resizedFileBase64, exifArray) {
                var imageData = resizedFileBase64.replace("data:image/jpeg;base64,", "");
                var buf = this.decode64(imageData);
                var separatePoint = buf.indexOf(255, 3);
                var mae = buf.slice(0, separatePoint);
                var ato = buf.slice(separatePoint);
                var array = mae;
                array = array.concat(exifArray);
                array = array.concat(ato);
                return array;
            }
        },
        {
            key: "slice2Segments",
            value: function slice2Segments(rawImageArray) {
                var head = 0;
                var segments = [];
                while(true){
                    var length;
                    if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) break;
                    if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) head += 2;
                    else {
                        length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];
                        var endPoint = head + length + 2;
                        var seg = rawImageArray.slice(head, endPoint);
                        segments.push(seg);
                        head = endPoint;
                    }
                    if (head > rawImageArray.length) break;
                }
                return segments;
            }
        },
        {
            key: "decode64",
            value: function decode64(input) {
                var output = "";
                var chr1 = undefined;
                var chr2 = undefined;
                var chr3 = "";
                var enc1 = undefined;
                var enc2 = undefined;
                var enc3 = undefined;
                var enc4 = "";
                var i = 0;
                var buf = [];
                // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
                var base64test = /[^A-Za-z0-9\+\/\=]/g;
                if (base64test.exec(input)) console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                while(true){
                    enc1 = this.KEY_STR.indexOf(input.charAt(i++));
                    enc2 = this.KEY_STR.indexOf(input.charAt(i++));
                    enc3 = this.KEY_STR.indexOf(input.charAt(i++));
                    enc4 = this.KEY_STR.indexOf(input.charAt(i++));
                    chr1 = enc1 << 2 | enc2 >> 4;
                    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                    chr3 = (enc3 & 3) << 6 | enc4;
                    buf.push(chr1);
                    if (enc3 !== 64) buf.push(chr2);
                    if (enc4 !== 64) buf.push(chr3);
                    chr1 = chr2 = chr3 = "";
                    enc1 = enc2 = enc3 = enc4 = "";
                    if (!(i < input.length)) break;
                }
                return buf;
            }
        }
    ]);
    return $a601ff30f483e917$var$ExifRestore;
}();
$a601ff30f483e917$var$ExifRestore.initClass();
/*
 * contentloaded.js
 *
 * Author: Diego Perini (diego.perini at gmail.com)
 * Summary: cross-browser wrapper for DOMContentLoaded
 * Updated: 20101020
 * License: MIT
 * Version: 1.2
 *
 * URL:
 * http://javascript.nwbox.com/ContentLoaded/
 * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE
 */ // @win window reference
// @fn function reference
var $a601ff30f483e917$var$contentLoaded = function $a601ff30f483e917$var$contentLoaded(win, fn) {
    var done = false;
    var top = true;
    var doc = win.document;
    var root = doc.documentElement;
    var add = doc.addEventListener ? "addEventListener" : "attachEvent";
    var rem = doc.addEventListener ? "removeEventListener" : "detachEvent";
    var pre = doc.addEventListener ? "" : "on";
    var init = function(e) {
        if (e.type === "readystatechange" && doc.readyState !== "complete") return;
        (e.type === "load" ? win : doc)[rem](pre + e.type, init, false);
        if (!done && (done = true)) return fn.call(win, e.type || e);
    };
    var poll = function() {
        try {
            root.doScroll("left");
        } catch (e) {
            setTimeout(poll, 50);
            return;
        }
        return init("poll");
    };
    if (doc.readyState !== "complete") {
        if (doc.createEventObject && root.doScroll) {
            try {
                top = !win.frameElement;
            } catch (error) {
            }
            if (top) poll();
        }
        doc[add](pre + "DOMContentLoaded", init, false);
        doc[add](pre + "readystatechange", init, false);
        return win[add](pre + "load", init, false);
    }
};
function $a601ff30f483e917$var$__guard__(value, transform) {
    return typeof value !== "undefined" && value !== null ? transform(value) : undefined;
}
function $a601ff30f483e917$var$__guardMethod__(obj, methodName, transform) {
    if (typeof obj !== "undefined" && obj !== null && typeof obj[methodName] === "function") return transform(obj, methodName);
    else return undefined;
}




},{"@swc/helpers":67,"just-extend":69}],69:[function(require,module,exports){
module.exports = extend;

/*
  var obj = {a: 3, b: 5};
  extend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}
  obj; // {a: 4, b: 5, c: 8}

  var obj = {a: 3, b: 5};
  extend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}
  obj; // {a: 3, b: 5}

  var arr = [1, 2, 3];
  var obj = {a: 3, b: 5};
  extend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}
  arr.push(4);
  obj; // {a: 3, b: 5, c: [1, 2, 3, 4]}

  var arr = [1, 2, 3];
  var obj = {a: 3, b: 5};
  extend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}
  arr.push(4);
  obj; // {a: 3, b: 5, c: [1, 2, 3]}

  extend({a: 4, b: 5}); // {a: 4, b: 5}
  extend({a: 4, b: 5}, 3); {a: 4, b: 5}
  extend({a: 4, b: 5}, true); {a: 4, b: 5}
  extend('hello', {a: 4, b: 5}); // throws
  extend(3, {a: 4, b: 5}); // throws
*/

function extend(/* [deep], obj1, obj2, [objn] */) {
  var args = [].slice.call(arguments);
  var deep = false;
  if (typeof args[0] == 'boolean') {
    deep = args.shift();
  }
  var result = args[0];
  if (isUnextendable(result)) {
    throw new Error('extendee must be an object');
  }
  var extenders = args.slice(1);
  var len = extenders.length;
  for (var i = 0; i < len; i++) {
    var extender = extenders[i];
    for (var key in extender) {
      if (Object.prototype.hasOwnProperty.call(extender, key)) {
        var value = extender[key];
        if (deep && isCloneable(value)) {
          var base = Array.isArray(value) ? [] : {};
          result[key] = extend(
            true,
            Object.prototype.hasOwnProperty.call(result, key) && !isUnextendable(result[key])
              ? result[key]
              : base,
            value
          );
        } else {
          result[key] = value;
        }
      }
    }
  }
  return result;
}

function isCloneable(obj) {
  return Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';
}

function isUnextendable(val) {
  return !val || (typeof val != 'object' && typeof val != 'function');
}

},{}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _unActive = _interopRequireDefault(require("./un-active"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default() {
  var about = document.querySelector('.about');

  if (about) {
    var aboutButtons = about.querySelectorAll('.about__button');
    var aboutContents = about.querySelectorAll('.about__content');
    aboutButtons.forEach(function (aboutButton, i) {
      aboutButton.addEventListener('click', function () {
        (0, _unActive.default)(aboutButtons, 'active');
        aboutButton.classList.add('active');

        if (aboutContents[i]) {
          (0, _unActive.default)(aboutContents, 'active');
          aboutContents[i].classList.add('active');
        }
      });
    });
  }
};

exports.default = _default;

},{"./un-active":78}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = function _default() {
  var calendarEvent = document.querySelector('.filters__datepicker');
  var chooseDateField = document.querySelector('.filters__choose-date');
  var customDays = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];
  var customMonth = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];

  if (calendarEvent) {
    var dateChoise = datepicker(calendarEvent, {
      formatter: function formatter(input, date, instance) {
        input.value = 'c ' + date.toLocaleDateString();
      },
      onSelect: function onSelect(instance, date) {
        //chooseDateField.textContent = `${date.getDate()} ${customMonth[date.getMonth()]} ${date.getFullYear()}`;
        chooseDateField.textContent = "".concat(date.getDate(), " ").concat(customMonth[date.getMonth()], " ").concat(date.getFullYear());
        chooseDateField.setAttribute("data-date", date.getDate());
        chooseDateField.setAttribute("data-month", date.getMonth() + 1); //bug-fix

        chooseDateField.setAttribute("data-year", date.getFullYear());
        eventsRefreshFilter();
      },
      disabledDates: [new Date(2021, 10, 5), new Date(2021, 10, 8), new Date(2021, 11, 10), new Date(2021, 10, 11), new Date(2021, 10, 19)],
      alwaysShow: true,
      showAllDates: true,
      startDay: 1,
      customDays: customDays,
      customMonths: customMonth,
      overlayButton: 'Выбрать',
      overlayPlaceholder: 'Введите год',
      dateSelected: new Date(),
      id: 1
    });
  }
};

exports.default = _default;

},{}],72:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initDropZone = void 0;

var _dropzone = require("dropzone");

var dzDeleteIcon = '<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" version="1.1" viewBox="0 0 32 32"><g transform="scale(2)"><circle style="fill:#f44336" cx="8" cy="8" r="7"/><rect style="fill:#ffffff" width="2" height="10" x="-.98" y="-16.29" transform="rotate(135)"/><rect style="fill:#ffffff" width="2" height="10" x="-12.29" y="-5.01" transform="rotate(-135)"/></g></svg>';

var initDropZone = function initDropZone() {
  var dropZoneElements = document.querySelectorAll('[data-dz]');
  var myStopReload = false;
  dropZoneElements.forEach(function (item) {
    var isDoc = item.hasAttribute('data-dz-text');
    var addButton = item.querySelector('[data-dz-add]');
    var dropzone = new _dropzone.Dropzone(item, {
      url: item.getAttribute('data-upload-link'),
      method: 'post',
      headers: {
        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      clickable: addButton,
      addRemoveLinks: true,
      dictRemoveFile: dzDeleteIcon,
      dictCancelUpload: '',
      maxFilesize: isDoc ? 25 : 5,
      //acceptedFiles: isDoc ? '.pdf, .doc, docx' : '.jpg, .png, jpeg',
      dictFileTooBig: 'Вы пытаетесь загрузить слушком большой файл ({{filesize}}Mb). Максимальный размер: {{maxFilesize}}Mb.',
      init: function init() {
        this.on('addedfile', function (file) {
          addButton.style.display = 'none';
        });
        this.on('removedfile', function (file) {
          addButton.style.display = 'flex';
        });
        this.on("queuecomplete", function (file) {
          if (!myStopReload) {
            location.reload();
          } else {
            myStopReload = false;
          }
        });
        this.on('error', function (file, error) {
          addButton.style.display = 'flex';

          if (typeof dzCustomDisplayError === "function") {
            dzCustomDisplayError(file, error);
            $('.dz-error').hide();
            myStopReload = true;
          } //console.log(error.message);
          //window.alert(errorMessage);

        });
      }
    });
  });
};

exports.initDropZone = initDropZone;

},{"dropzone":68}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _unActive = _interopRequireDefault(require("./un-active"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default() {
  var falagInputFields = [];
  var formInputs = document.querySelectorAll('.form__field input');
  formInputs.forEach(function (formInput, i) {
    if (formInput.value.length > 0) {
      formInput.closest('.form__field').classList.add('filled');
    }

    formInput.addEventListener('input', function () {
      if (formInput.validity.valid) {
        formInput.closest('.form__field').classList.remove('invalid');
        formInput.closest('.form__field').classList.add('valid');
      }

      if (!falagInputFields[i]) {
        formInput.addEventListener('change', function () {
          if (formInput.validity.valid) {
            formInput.closest('.form__field').classList.remove('invalid');
            formInput.closest('.form__field').classList.add('valid');
          } else if (!formInput.validity.valid && formInput.value.length > 0) {
            formInput.closest('.form__field').classList.add('invalid');
            formInput.closest('.form__field').classList.remove('valid');
          } else {
            formInput.closest('.form__field').classList.remove('invalid');
            formInput.closest('.form__field').classList.remove('valid');
            formInput.closest('.form__field').classList.remove('filled');
          }
        });
        formInput.addEventListener('blur', function () {
          if (formInput.validity.valid) {
            formInput.closest('.form__field').classList.remove('invalid');
            formInput.closest('.form__field').classList.add('valid');
          } else if (!formInput.validity.valid && formInput.value.length > 0) {
            formInput.closest('.form__field').classList.add('invalid');
            formInput.closest('.form__field').classList.remove('valid');
          } else {
            formInput.closest('.form__field').classList.remove('invalid');
            formInput.closest('.form__field').classList.remove('valid');
            formInput.closest('.form__field').classList.remove('filled');
          }
        });
        formInput.addEventListener('focus', function () {
          formInput.closest('.form__field').classList.remove('invalid');
        });
        falagInputFields[i] = true;
      }
    });
  });
  var passwordToggles = document.querySelectorAll('.form__show-password');
  passwordToggles.forEach(function (passwordToggle) {
    var passwordInput = passwordToggle.closest('.form__field').querySelector('input[type="password"');

    if (passwordInput) {
      passwordToggle.addEventListener('click', function () {
        if (passwordToggle.classList.contains('active')) {
          passwordToggle.classList.remove('active');
          passwordInput.type = 'password';
        } else {
          passwordToggle.classList.add('active');
          passwordInput.type = 'text';
        }
      });
    }
  });
  var formSelects = document.querySelectorAll('.form__field--select');
  var formSelectOrganisationRows = document.querySelectorAll('.form__row--organisation');

  var organisationFieldToggle = function organisationFieldToggle(value) {
    if (value === 3) {
      formSelectOrganisationRows.forEach(function (formSelectOrganisationRow) {
        var inputField = formSelectOrganisationRow.querySelector('input');
        inputField.value = '';
        inputField.required = true;
        formSelectOrganisationRow.classList.add('show');
      });
    } else {
      formSelectOrganisationRows.forEach(function (formSelectOrganisationRow) {
        var inputField = formSelectOrganisationRow.querySelector('input');
        inputField.value = '';
        inputField.required = false;
        formSelectOrganisationRow.classList.remove('show');
      });
    }
  };

  formSelects.forEach(function (formSelect) {
    var formSelectInputText = formSelect.querySelector('input[type="text"]');
    var formSelectInputId = formSelect.querySelector('input[type="hidden"]');

    var setValueInputs = function setValueInputs(text, value) {
      if (formSelectInputText && formSelectInputId) {
        formSelectInputText.closest('.form__field').classList.add('valid');
        formSelectInputText.value = text;
        formSelectInputId.value = value;
      }
    };

    var setActiveItem = function setActiveItem(element, elements) {
      (0, _unActive.default)(elements, 'active');
      element.classList.add('active');
      setValueInputs(element.textContent, element.dataset.value);
      formSelectInputText.closest('.form__field').classList.add('selected');
      organisationFieldToggle(parseInt(formSelectInputId.value, 10));
    };

    var formSelectList = formSelect.querySelector('.form__select');
    var formSelectListItems = formSelectList === null || formSelectList === void 0 ? void 0 : formSelectList.querySelectorAll('li');

    if (formSelectInputId.value) {
      var formSelectListItem = [].filter.call(formSelectListItems, function (it) {
        return it.dataset.value === formSelectInputId.value;
      })[0];
      setActiveItem(formSelectListItem, formSelectListItems);
    }

    formSelectListItems.forEach(function (formSelectListItem) {
      formSelectListItem.addEventListener('click', function () {
        setActiveItem(formSelectListItem, formSelectListItems);
      });
    });
    formSelect.addEventListener('click', function () {
      formSelect.classList.toggle('active');
      formSelectList === null || formSelectList === void 0 ? void 0 : formSelectList.classList.toggle('active');
    });
  });
};

exports.default = _default;

},{"./un-active":78}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initAccordions = exports.accordions = void 0;

var _accordions = require("./vendor/accordions");

var accordions;
exports.accordions = accordions;

var initAccordions = function initAccordions() {
  exports.accordions = accordions = new _accordions.Accordions(); // Используйте в разработке экспортируемую переменную accordions, window сделан для бэкэнда

  window.accordions = accordions;
};

exports.initAccordions = initAccordions;

},{"./vendor/accordions":80}],75:[function(require,module,exports){
"use strict";

var _datePicker = _interopRequireDefault(require("./date-picker"));

var _user = _interopRequireDefault(require("./user"));

var _about = _interopRequireDefault(require("./about"));

var _range = _interopRequireDefault(require("./range"));

var _form = _interopRequireDefault(require("./form"));

var _dropzone = require("./dropzone");

var _initAccordions = require("./init-accordions");

var _sandwich = require("./sandwich");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import user from './user';
// import faq from './faq';
document.addEventListener('DOMContentLoaded', function () {
  // user();
  // about();
  (0, _datePicker.default)();
  (0, _user.default)(); // faq();

  (0, _range.default)();
  (0, _form.default)();
  (0, _dropzone.initDropZone)();
  (0, _initAccordions.initAccordions)();
  (0, _sandwich.initSandwichMenu)();
});

},{"./about":70,"./date-picker":71,"./dropzone":72,"./form":73,"./init-accordions":74,"./range":76,"./sandwich":77,"./user":79}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = function _default() {
  var ranges = document.querySelectorAll('.range');

  if (ranges.length > 0) {
    ranges.forEach(function (range) {
      var rangeInput = range.querySelector('.range__input');
      var rangeProgress = range.querySelector('.range__progress');
      var rangeOutput = range.querySelector('.range__output input');

      var niceThousand = function niceThousand(string) {
        var newString = Number.isNaN(string) ? '' : string;
        return newString.toString().split('').reverse().map(function (_char, i) {
          return _char + (i % 3 ? '' : ' ');
        }).reverse().join('').trim();
      };

      if (rangeInput && rangeProgress && rangeOutput) {
        var z1 = parseInt(rangeInput.min, 10);
        var z2 = parseInt(rangeInput.max, 10);
        var x = 100 / (z2 - z1);
        var y = -z1 * 100 / (z2 - z1);

        var drawProgress = function drawProgress(value) {
          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'range';
          var valueInner = value;

          if (type === 'range') {
            rangeOutput.value = valueInner;
            rangeOutput.closest('.range__output').classList.remove('error');
            rangeOutput.value = niceThousand(valueInner);
          } else {
            valueInner = parseInt(valueInner.replace(/\s/g, ''), 10);

            if (z2 >= valueInner && z1 <= valueInner) {
              rangeInput.value = valueInner;
              rangeOutput.closest('.range__output').classList.remove('error');
              rangeOutput.value = niceThousand(valueInner);
            } else {
              rangeOutput.closest('.range__output').classList.add('error');
              rangeOutput.value = niceThousand(valueInner);
              return;
            }
          }

          if (valueInner > z1) {
            rangeProgress.style.width = "".concat(valueInner * x + y, "%");
          } else {
            rangeProgress.style.width = '0%';
          }
        };

        drawProgress(rangeInput.value, 'range');
        rangeInput.addEventListener('input', function () {
          drawProgress(rangeInput.value, 'range');
        });
        rangeOutput.addEventListener('input', function () {
          drawProgress(rangeOutput.value, 'text');
        });
        document.addEventListener('keypress', function (evt) {
          return /[0-9\s]/.test(String.fromCharCode(evt.key));
        });
      }
    });
  }
};

exports.default = _default;

},{}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initSandwichMenu = void 0;

var _scrollLock = require("./vendor/scroll-lock");

var breakpointMd = window.matchMedia('(min-width:1024px)');
var headerLogo = document.querySelector('[data-header-logo]');
var sandwich = document.querySelector('[data-sandwich]');
var nav = document.querySelector('[data-main-nav]');
var scrollLock = new _scrollLock.ScrollLock();

var openMenu = function openMenu() {
  scrollLock.disableScrolling();
  sandwich.classList.add('is-active');
  sandwich.ariaPressed = 'true';
  nav.classList.add('is-active');
  headerLogo.classList.add('is-menu'); // navItem.forEach((item, index) => {
  //   item.style.transitionDelay = `${0.3 + index * 0.2}s`;
  // });
};

var closeMenu = function closeMenu() {
  scrollLock.enableScrolling();
  sandwich.classList.remove('is-active');
  sandwich.ariaPressed = 'false';
  nav.classList.remove('is-active');
  headerLogo.classList.remove('is-menu'); // navItem.forEach((item) => {
  //   item.style.transitionDelay = '';
  // });
};

var breakpointChecker = function breakpointChecker() {
  if (breakpointMd.matches) {
    if (nav.classList.contains('is-active')) {
      closeMenu();
    }
  }

  breakpointMd.addListener(breakpointChecker);
};

var initSandwichMenu = function initSandwichMenu() {
  if (sandwich) {
    sandwich.addEventListener('click', function () {
      if (sandwich.ariaPressed === 'true') {
        closeMenu();
      } else {
        openMenu();
      }
    });
    breakpointChecker();
  }
};

exports.initSandwichMenu = initSandwichMenu;

},{"./vendor/scroll-lock":82}],78:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = function _default(elements, activeClass, removeParentActive) {
  elements.forEach(function (element) {
    if (element.classList.contains(activeClass)) {
      element.classList.remove(activeClass);

      if (removeParentActive) {
        element.parentNode.classList.remove(activeClass);
      }
    }
  });
};

exports.default = _default;

},{}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// export default () => {
//   const user = document.querySelector('.page-header__user');
//
//   if (user) {
//     const userToggle = user.querySelector('.user__toggle');
//     const userList = user.querySelector('.user__list');
//
//     const onUserToggleMouseEnter = () => {
//       userToggle.classList.add('active');
//       userList.classList.add('active');
//
//       user.addEventListener('mouseleave', onUserMouseLeave);
//       userToggle.removeEventListener('mouseenter', onUserToggleMouseEnter);
//     };
//
//     const onUserMouseLeave = () => {
//       userToggle.classList.remove('active');
//       userList.classList.remove('active');
//
//       userToggle.addEventListener('mouseenter', onUserToggleMouseEnter);
//       user.removeEventListener('mouseleave', onUserMouseLeave);
//     };
//
//     userToggle.addEventListener('mouseenter', onUserToggleMouseEnter);
//     user.addEventListener('mouseleave', onUserMouseLeave);
//   }
// };
var _default = function _default() {
  var currentTarget;

  var userButtonClickHandler = function userButtonClickHandler(e) {
    var menuItem = e.target.nextElementSibling;

    if (menuItem && menuItem.matches('._js-user-list.active')) {
      menuItem.previousElementSibling.classList.remove('active');
      menuItem.classList.remove('active');
      return;
    }

    if (currentTarget) {
      if (!e.target.closest('._js-user-list')) {
        currentTarget.previousElementSibling.classList.remove('active');
        currentTarget.classList.remove('active');
      }
    }

    if (menuItem && menuItem.matches('._js-user-list')) {
      menuItem.previousElementSibling.classList.add('active');
      menuItem.classList.add('active');
      currentTarget = menuItem;
    }
  };

  document.body.addEventListener('click', userButtonClickHandler);
};

exports.default = _default;

},{}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordions = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Accordions = /*#__PURE__*/function () {
  function Accordions() {
    _classCallCheck(this, Accordions);

    this._openHeight = 0;
    this._windowWidth = window.innerWidth;
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._windowResizeHandler = this._windowResizeHandler.bind(this);

    this._init();
  }

  _createClass(Accordions, [{
    key: "_init",
    value: function _init() {
      this.fullUpdate();
      document.addEventListener('click', this._documentClickHandler);
      window.addEventListener('resize', this._windowResizeHandler);
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-accordion="button"]')) {
        return;
      }

      evt.preventDefault();
      var element = target.closest('[data-accordion="element"]');

      if (element.classList.contains('is-active')) {
        this.closeAccordion(element);
        return;
      }

      this.openAccordion(element);
    }
  }, {
    key: "_windowResizeHandler",
    value: function _windowResizeHandler() {
      if (this._windowWidth === window.innerWidth) {
        return;
      }

      this._windowWidth = window.innerWidth;
      this.updateAccordionsHeight();
    }
  }, {
    key: "closeAllAccordion",
    value: function closeAllAccordion(parent) {
      var _this = this;

      var elements = parent.querySelectorAll('[data-accordion="element"]');
      elements.forEach(function (element) {
        var currentParent = element.closest('[data-accordion="parent"]');

        if (currentParent === parent) {
          _this.closeAccordion(element);
        }
      });
    }
  }, {
    key: "updateAccordionsHeight",
    value: function updateAccordionsHeight() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (element) {
        var content = element.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
        return;
      }

      var openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      openElements.forEach(function (openElement) {
        var content = openElement.querySelector('[data-accordion="content"]');
        content.style.transition = 'none';
        content.style.maxHeight = "".concat(content.scrollHeight, "px");
        setTimeout(function () {
          content.style.transition = null;
        });
      });
    }
  }, {
    key: "fullUpdate",
    value: function fullUpdate() {
      var _this2 = this;

      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var openElements;

      if (parent) {
        openElements = parent.querySelectorAll('[data-accordion="element"].is-active');
      } else {
        openElements = document.querySelectorAll('[data-accordion="element"].is-active');
      }

      openElements.forEach(function (openElement) {
        var innerParent = openElement.querySelector('[data-accordion="parent"]');

        if (innerParent) {
          return;
        }

        _this2.openAccordion(openElement, transition);
      });
    }
  }, {
    key: "openAccordion",
    value: function openAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var parentElement = element.closest('[data-accordion="parent"]');
      var contentElement = element.querySelector('[data-accordion="content"]');
      this._openHeight += contentElement.scrollHeight;

      if (parentElement.hasAttribute('data-single')) {
        this.closeAllAccordion(parentElement);
      }

      element.classList.add('is-active');

      if (transition) {
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = "".concat(this._openHeight, "px");
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }

      if (parentElement.closest('[data-accordion="element"]')) {
        this.openAccordion(parentElement.closest('[data-accordion="element"]'), transition);
        return;
      }

      this._openHeight = 0;
    }
  }, {
    key: "closeAccordion",
    value: function closeAccordion(element) {
      var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var contentElement = element.querySelector('[data-accordion="content"]');

      if (!contentElement) {
        return;
      }

      element.classList.remove('is-active');

      if (transition) {
        contentElement.style.maxHeight = '0';
      } else {
        contentElement.style.transition = 'none';
        contentElement.style.maxHeight = '0';
        setTimeout(function () {
          contentElement.style.transition = null;
        });
      }
    }
  }]);

  return Accordions;
}();

exports.Accordions = Accordions;

},{}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iosChecker = void 0;

var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

exports.iosChecker = iosChecker;

},{}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollLock = void 0;

var _iosChecker = require("./iosChecker");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);

    this._iosChecker = _iosChecker.iosChecker;
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }

  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;

      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();

      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");

        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }

      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;

      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });

      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);

  return ScrollLock;
}();

exports.ScrollLock = ScrollLock;
window.scrollLock = new ScrollLock();

},{"./iosChecker":81}]},{},[75])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fYXBwbHlfZGVjb3JhdGVkX2Rlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fYXJyYXlfd2l0aF9ob2xlcy5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19hcnJheV93aXRob3V0X2hvbGVzLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2Fzc2VydF90aGlzX2luaXRpYWxpemVkLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2FzeW5jX2dlbmVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19hc3luY19nZW5lcmF0b3JfZGVsZWdhdGUuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fYXN5bmNfaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fYXN5bmNfdG9fZ2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2F3YWl0X2FzeW5jX2dlbmVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19hd2FpdF92YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19jbGFzc19jYWxsX2NoZWNrLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX25hbWVfdGR6X2Vycm9yLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX3ByaXZhdGVfZmllbGRfZ2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX3ByaXZhdGVfZmllbGRfbG9vc2VfYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19jbGFzc19wcml2YXRlX2ZpZWxkX3NldC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19jbGFzc19wcml2YXRlX21ldGhvZF9nZXQuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fY2xhc3NfcHJpdmF0ZV9tZXRob2Rfc2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX3N0YXRpY19wcml2YXRlX2ZpZWxkX3NwZWNfZ2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NsYXNzX3N0YXRpY19wcml2YXRlX2ZpZWxkX3NwZWNfc2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2NvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19jcmVhdGVfY2xhc3MuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fY3JlYXRlX3N1cGVyLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2RlY29yYXRlLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2RlZmF1bHRzLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2RlZmluZV9lbnVtZXJhYmxlX3Byb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fZGVmaW5lX3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2V4dGVuZHMuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fZ2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2dldF9wcm90b3R5cGVfb2YuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faW5oZXJpdHMuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faW5oZXJpdHNfbG9vc2UuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faW5pdGlhbGl6ZXJfZGVmaW5lX3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luaXRpYWxpemVyX3dhcm5pbmdfaGVscGVyLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2luc3RhbmNlb2YuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX2lzX25hdGl2ZV9mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19pc19uYXRpdmVfcmVmbGVjdF9jb25zdHJ1Y3QuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faXRlcmFibGVfdG9fYXJyYXkuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faXRlcmFibGVfdG9fYXJyYXlfbGltaXQuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9faXRlcmFibGVfdG9fYXJyYXlfbGltaXRfbG9vc2UuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fanN4LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX25ld19hcnJvd19jaGVjay5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19ub25faXRlcmFibGVfcmVzdC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19ub25faXRlcmFibGVfc3ByZWFkLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX29iamVjdF9zcHJlYWQuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3Bvc3NpYmxlX2NvbnN0cnVjdG9yX3JldHVybi5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19yZWFkX29ubHlfZXJyb3IuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fc2V0LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3NldF9wcm90b3R5cGVfb2YuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fc2tpcF9maXJzdF9nZW5lcmF0b3JfbmV4dC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19zbGljZWRfdG9fYXJyYXkuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fc2xpY2VkX3RvX2FycmF5X2xvb3NlLmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3N1cGVyX3Byb3BfYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbC5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbF9sb29zZS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190aHJvdy5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190b19hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190b19jb25zdW1hYmxlX2FycmF5LmpzIiwibm9kZV9tb2R1bGVzL0Bzd2MvaGVscGVycy9saWIvX3RvX3ByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL190b19wcm9wZXJ0eV9rZXkuanMiLCJub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2xpYi9fdHlwZV9vZi5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL193cmFwX2FzeW5jX2dlbmVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL193cmFwX25hdGl2ZV9zdXBlci5qcyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Ryb3B6b25lL2Rpc3QvZHJvcHpvbmUuanMiLCJub2RlX21vZHVsZXMvanVzdC1leHRlbmQvaW5kZXguanMiLCJzb3VyY2UvanMvYWJvdXQuanMiLCJzb3VyY2UvanMvZGF0ZS1waWNrZXIuanMiLCJzb3VyY2UvanMvZHJvcHpvbmUuanMiLCJzb3VyY2UvanMvZm9ybS5qcyIsInNvdXJjZS9qcy9pbml0LWFjY29yZGlvbnMuanMiLCJzb3VyY2UvanMvbWFpbi5qcyIsInNvdXJjZS9qcy9yYW5nZS5qcyIsInNvdXJjZS9qcy9zYW5kd2ljaC5qcyIsInNvdXJjZS9qcy91bi1hY3RpdmUuanMiLCJzb3VyY2UvanMvdXNlci5qcyIsInNvdXJjZS9qcy92ZW5kb3IvYWNjb3JkaW9ucy5qcyIsInNvdXJjZS9qcy92ZW5kb3IvaW9zQ2hlY2tlci5qcyIsInNvdXJjZS9qcy92ZW5kb3Ivc2Nyb2xsLWxvY2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1VkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNS9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDeEVBOzs7O2VBRWUsb0JBQU07QUFDbkIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZDs7QUFFQSxNQUFJLEtBQUosRUFBVztBQUNULFFBQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxnQkFBTixDQUF1QixnQkFBdkIsQ0FBckI7QUFDQSxRQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsaUJBQXZCLENBQXRCO0FBRUEsSUFBQSxZQUFZLENBQUMsT0FBYixDQUFxQixVQUFDLFdBQUQsRUFBYyxDQUFkLEVBQW9CO0FBQ3ZDLE1BQUEsV0FBVyxDQUFDLGdCQUFaLENBQTZCLE9BQTdCLEVBQXNDLFlBQU07QUFDMUMsK0JBQVMsWUFBVCxFQUF1QixRQUF2QjtBQUNBLFFBQUEsV0FBVyxDQUFDLFNBQVosQ0FBc0IsR0FBdEIsQ0FBMEIsUUFBMUI7O0FBRUEsWUFBSSxhQUFhLENBQUMsQ0FBRCxDQUFqQixFQUFzQjtBQUNwQixpQ0FBUyxhQUFULEVBQXdCLFFBQXhCO0FBQ0EsVUFBQSxhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCLFNBQWpCLENBQTJCLEdBQTNCLENBQStCLFFBQS9CO0FBQ0Q7QUFDRixPQVJEO0FBU0QsS0FWRDtBQVdEO0FBQ0YsQzs7Ozs7Ozs7Ozs7O2VDckJjLG9CQUFNO0FBQ25CLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLHNCQUF2QixDQUF0QjtBQUNBLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLHVCQUF2QixDQUF4QjtBQUNBLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLElBQXJDLENBQW5CO0FBQ0EsTUFBTSxXQUFXLEdBQUcsQ0FDbEIsUUFEa0IsRUFFbEIsU0FGa0IsRUFHbEIsTUFIa0IsRUFJbEIsUUFKa0IsRUFLbEIsS0FMa0IsRUFNbEIsTUFOa0IsRUFPbEIsTUFQa0IsRUFRbEIsUUFSa0IsRUFTbEIsVUFUa0IsRUFVbEIsU0FWa0IsRUFXbEIsUUFYa0IsRUFZbEIsU0Faa0IsQ0FBcEI7O0FBZUEsTUFBSSxhQUFKLEVBQW1CO0FBQ2pCLFFBQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxhQUFELEVBQWdCO0FBQzNDLE1BQUEsU0FBUyxFQUFFLG1CQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsUUFBZCxFQUEyQjtBQUNwQyxRQUFBLEtBQUssQ0FBQyxLQUFOLEdBQWMsT0FBTyxJQUFJLENBQUMsa0JBQUwsRUFBckI7QUFDRCxPQUgwQztBQUkzQyxNQUFBLFFBQVEsRUFBRSxrQkFBQyxRQUFELEVBQVcsSUFBWCxFQUFvQjtBQUM1QjtBQUNOLFFBQUEsZUFBZSxDQUFDLFdBQWhCLEdBQThCLEdBQUcsTUFBSCxDQUFVLElBQUksQ0FBQyxPQUFMLEVBQVYsRUFBMEIsR0FBMUIsRUFBK0IsTUFBL0IsQ0FBc0MsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFMLEVBQUQsQ0FBakQsRUFBb0UsR0FBcEUsRUFBeUUsTUFBekUsQ0FBZ0YsSUFBSSxDQUFDLFdBQUwsRUFBaEYsQ0FBOUI7QUFDUSxRQUFBLGVBQWUsQ0FBQyxZQUFoQixDQUE2QixXQUE3QixFQUEwQyxJQUFJLENBQUMsT0FBTCxFQUExQztBQUNBLFFBQUEsZUFBZSxDQUFDLFlBQWhCLENBQTZCLFlBQTdCLEVBQTJDLElBQUksQ0FBQyxRQUFMLEtBQWdCLENBQTNELEVBSjBCLENBSW9DOztBQUM5RCxRQUFBLGVBQWUsQ0FBQyxZQUFoQixDQUE2QixXQUE3QixFQUEwQyxJQUFJLENBQUMsV0FBTCxFQUExQztBQUNBLFFBQUEsbUJBQW1CO0FBQ3RCLE9BWDBDO0FBWTNDLE1BQUEsYUFBYSxFQUFFLENBQ2IsSUFBSSxJQUFKLENBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUIsQ0FBbkIsQ0FEYSxFQUViLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxFQUFmLEVBQW1CLENBQW5CLENBRmEsRUFHYixJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsRUFBZixFQUFtQixFQUFuQixDQUhhLEVBSWIsSUFBSSxJQUFKLENBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUIsRUFBbkIsQ0FKYSxFQUtiLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxFQUFmLEVBQW1CLEVBQW5CLENBTGEsQ0FaNEI7QUFtQjNDLE1BQUEsVUFBVSxFQUFFLElBbkIrQjtBQW9CM0MsTUFBQSxZQUFZLEVBQUUsSUFwQjZCO0FBcUIzQyxNQUFBLFFBQVEsRUFBRSxDQXJCaUM7QUFzQjNDLE1BQUEsVUFBVSxFQUFFLFVBdEIrQjtBQXVCM0MsTUFBQSxZQUFZLEVBQUUsV0F2QjZCO0FBd0IzQyxNQUFBLGFBQWEsRUFBRSxTQXhCNEI7QUF5QjNDLE1BQUEsa0JBQWtCLEVBQUUsYUF6QnVCO0FBMEIzQyxNQUFBLFlBQVksRUFBRSxJQUFJLElBQUosRUExQjZCO0FBMkIzQyxNQUFBLEVBQUUsRUFBRTtBQTNCdUMsS0FBaEIsQ0FBN0I7QUE2QkQ7QUFDRixDOzs7Ozs7Ozs7Ozs7QUNsREQ7O0FBRUEsSUFBTSxZQUFZLEdBQUcscVhBQXJCOztBQUVBLElBQU0sWUFBWSxHQUFHLFNBQWYsWUFBZSxHQUFNO0FBQ3pCLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGdCQUFULENBQTBCLFdBQTFCLENBQXpCO0FBQ0EsTUFBSSxZQUFZLEdBQUcsS0FBbkI7QUFDQSxFQUFBLGdCQUFnQixDQUFDLE9BQWpCLENBQXlCLFVBQUMsSUFBRCxFQUFVO0FBQ2pDLFFBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFMLENBQWtCLGNBQWxCLENBQWQ7QUFDQSxRQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBTCxDQUFtQixlQUFuQixDQUFsQjtBQUNBLFFBQU0sUUFBUSxHQUFHLElBQUksa0JBQUosQ0FBYSxJQUFiLEVBQW1CO0FBQ2xDLE1BQUEsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFMLENBQWtCLGtCQUFsQixDQUQ2QjtBQUVsQyxNQUFBLE1BQU0sRUFBRSxNQUYwQjtBQUdsQyxNQUFBLE9BQU8sRUFBRTtBQUNQLHdCQUFnQixRQUFRLENBQUMsYUFBVCxDQUF1Qix5QkFBdkIsRUFBa0QsWUFBbEQsQ0FBK0QsU0FBL0Q7QUFEVCxPQUh5QjtBQU1sQyxNQUFBLFNBQVMsRUFBRSxTQU51QjtBQU9sQyxNQUFBLGNBQWMsRUFBRSxJQVBrQjtBQVFsQyxNQUFBLGNBQWMsRUFBRSxZQVJrQjtBQVNsQyxNQUFBLGdCQUFnQixFQUFFLEVBVGdCO0FBVWxDLE1BQUEsV0FBVyxFQUFFLEtBQUssR0FBRyxFQUFILEdBQVEsQ0FWUTtBQVdsQztBQUNBLE1BQUEsY0FBYyxFQUFFLHVHQVprQjtBQWFsQyxNQUFBLElBQUksRUFBRSxTQUFTLElBQVQsR0FBZ0I7QUFDcEIsYUFBSyxFQUFMLENBQVEsV0FBUixFQUFxQixVQUFVLElBQVYsRUFBZ0I7QUFDbkMsVUFBQSxTQUFTLENBQUMsS0FBVixDQUFnQixPQUFoQixHQUEwQixNQUExQjtBQUNELFNBRkQ7QUFHQSxhQUFLLEVBQUwsQ0FBUSxhQUFSLEVBQXVCLFVBQVUsSUFBVixFQUFnQjtBQUNyQyxVQUFBLFNBQVMsQ0FBQyxLQUFWLENBQWdCLE9BQWhCLEdBQTBCLE1BQTFCO0FBQ0QsU0FGRDtBQUdBLGFBQUssRUFBTCxDQUFRLGVBQVIsRUFBeUIsVUFBVSxJQUFWLEVBQWdCO0FBQ3JDLGNBQUksQ0FBQyxZQUFMLEVBQW1CO0FBQ2YsWUFBQSxRQUFRLENBQUMsTUFBVDtBQUNILFdBRkQsTUFFTztBQUNILFlBQUEsWUFBWSxHQUFHLEtBQWY7QUFDSDtBQUVKLFNBUEQ7QUFTRSxhQUFLLEVBQUwsQ0FBUSxPQUFSLEVBQWlCLFVBQVMsSUFBVCxFQUFlLEtBQWYsRUFBc0I7QUFDbkMsVUFBQSxTQUFTLENBQUMsS0FBVixDQUFnQixPQUFoQixHQUEwQixNQUExQjs7QUFDQSxjQUFJLE9BQU8sb0JBQVAsS0FBZ0MsVUFBcEMsRUFBZ0Q7QUFDNUMsWUFBQSxvQkFBb0IsQ0FBQyxJQUFELEVBQU8sS0FBUCxDQUFwQjtBQUNBLFlBQUEsQ0FBQyxDQUFDLFdBQUQsQ0FBRCxDQUFlLElBQWY7QUFDQSxZQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0gsV0FOa0MsQ0FRbkM7QUFDQTs7QUFDSCxTQVZEO0FBWUg7QUF6Q2lDLEtBQW5CLENBQWpCO0FBMkNELEdBOUNEO0FBK0NELENBbEREOzs7Ozs7Ozs7Ozs7QUNKQTs7OztlQUVlLG9CQUFNO0FBQ25CLE1BQU0sZ0JBQWdCLEdBQUcsRUFBekI7QUFDQSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsb0JBQTFCLENBQW5CO0FBRUEsRUFBQSxVQUFVLENBQUMsT0FBWCxDQUFtQixVQUFDLFNBQUQsRUFBWSxDQUFaLEVBQWtCO0FBQ25DLFFBQUksU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsTUFBaEIsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsTUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxHQUE1QyxDQUFnRCxRQUFoRDtBQUNEOztBQUVELElBQUEsU0FBUyxDQUFDLGdCQUFWLENBQTJCLE9BQTNCLEVBQW9DLFlBQU07QUFDeEMsVUFBSSxTQUFTLENBQUMsUUFBVixDQUFtQixLQUF2QixFQUE4QjtBQUM1QixRQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELFNBQW5EO0FBQ0EsUUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxHQUE1QyxDQUFnRCxPQUFoRDtBQUNEOztBQUVELFVBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFELENBQXJCLEVBQTBCO0FBQ3hCLFFBQUEsU0FBUyxDQUFDLGdCQUFWLENBQTJCLFFBQTNCLEVBQXFDLFlBQU07QUFDekMsY0FBSSxTQUFTLENBQUMsUUFBVixDQUFtQixLQUF2QixFQUE4QjtBQUM1QixZQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELFNBQW5EO0FBQ0EsWUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxHQUE1QyxDQUFnRCxPQUFoRDtBQUNELFdBSEQsTUFHTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVYsQ0FBbUIsS0FBcEIsSUFBNkIsU0FBUyxDQUFDLEtBQVYsQ0FBZ0IsTUFBaEIsR0FBeUIsQ0FBMUQsRUFBNkQ7QUFDbEUsWUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxHQUE1QyxDQUFnRCxTQUFoRDtBQUNBLFlBQUEsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsY0FBbEIsRUFBa0MsU0FBbEMsQ0FBNEMsTUFBNUMsQ0FBbUQsT0FBbkQ7QUFDRCxXQUhNLE1BR0E7QUFDTCxZQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELFNBQW5EO0FBQ0EsWUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxNQUE1QyxDQUFtRCxPQUFuRDtBQUNBLFlBQUEsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsY0FBbEIsRUFBa0MsU0FBbEMsQ0FBNEMsTUFBNUMsQ0FBbUQsUUFBbkQ7QUFDRDtBQUNGLFNBWkQ7QUFjQSxRQUFBLFNBQVMsQ0FBQyxnQkFBVixDQUEyQixNQUEzQixFQUFtQyxZQUFNO0FBQ3ZDLGNBQUksU0FBUyxDQUFDLFFBQVYsQ0FBbUIsS0FBdkIsRUFBOEI7QUFDNUIsWUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxNQUE1QyxDQUFtRCxTQUFuRDtBQUNBLFlBQUEsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsY0FBbEIsRUFBa0MsU0FBbEMsQ0FBNEMsR0FBNUMsQ0FBZ0QsT0FBaEQ7QUFDRCxXQUhELE1BR08sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFWLENBQW1CLEtBQXBCLElBQTZCLFNBQVMsQ0FBQyxLQUFWLENBQWdCLE1BQWhCLEdBQXlCLENBQTFELEVBQTZEO0FBQ2xFLFlBQUEsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsY0FBbEIsRUFBa0MsU0FBbEMsQ0FBNEMsR0FBNUMsQ0FBZ0QsU0FBaEQ7QUFDQSxZQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELE9BQW5EO0FBQ0QsV0FITSxNQUdBO0FBQ0wsWUFBQSxTQUFTLENBQUMsT0FBVixDQUFrQixjQUFsQixFQUFrQyxTQUFsQyxDQUE0QyxNQUE1QyxDQUFtRCxTQUFuRDtBQUNBLFlBQUEsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsY0FBbEIsRUFBa0MsU0FBbEMsQ0FBNEMsTUFBNUMsQ0FBbUQsT0FBbkQ7QUFDQSxZQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELFFBQW5EO0FBQ0Q7QUFDRixTQVpEO0FBY0EsUUFBQSxTQUFTLENBQUMsZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBb0MsWUFBTTtBQUN4QyxVQUFBLFNBQVMsQ0FBQyxPQUFWLENBQWtCLGNBQWxCLEVBQWtDLFNBQWxDLENBQTRDLE1BQTVDLENBQW1ELFNBQW5EO0FBQ0QsU0FGRDtBQUlBLFFBQUEsZ0JBQWdCLENBQUMsQ0FBRCxDQUFoQixHQUFzQixJQUF0QjtBQUNEO0FBQ0YsS0F6Q0Q7QUEwQ0QsR0EvQ0Q7QUFpREEsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLGdCQUFULENBQTBCLHNCQUExQixDQUF4QjtBQUVBLEVBQUEsZUFBZSxDQUFDLE9BQWhCLENBQXdCLFVBQUMsY0FBRCxFQUFvQjtBQUMxQyxRQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsT0FBZixDQUF1QixjQUF2QixFQUF1QyxhQUF2QyxDQUFxRCx1QkFBckQsQ0FBdEI7O0FBRUEsUUFBSSxhQUFKLEVBQW1CO0FBQ2pCLE1BQUEsY0FBYyxDQUFDLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLFlBQU07QUFDN0MsWUFBSSxjQUFjLENBQUMsU0FBZixDQUF5QixRQUF6QixDQUFrQyxRQUFsQyxDQUFKLEVBQWlEO0FBQy9DLFVBQUEsY0FBYyxDQUFDLFNBQWYsQ0FBeUIsTUFBekIsQ0FBZ0MsUUFBaEM7QUFFQSxVQUFBLGFBQWEsQ0FBQyxJQUFkLEdBQXFCLFVBQXJCO0FBQ0QsU0FKRCxNQUlPO0FBQ0wsVUFBQSxjQUFjLENBQUMsU0FBZixDQUF5QixHQUF6QixDQUE2QixRQUE3QjtBQUVBLFVBQUEsYUFBYSxDQUFDLElBQWQsR0FBcUIsTUFBckI7QUFDRDtBQUNGLE9BVkQ7QUFXRDtBQUNGLEdBaEJEO0FBa0JBLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixzQkFBMUIsQ0FBcEI7QUFFQSxNQUFNLDBCQUEwQixHQUFHLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQiwwQkFBMUIsQ0FBbkM7O0FBRUEsTUFBTSx1QkFBdUIsR0FBRyxTQUExQix1QkFBMEIsQ0FBQyxLQUFELEVBQVc7QUFDekMsUUFBSSxLQUFLLEtBQUssQ0FBZCxFQUFpQjtBQUNmLE1BQUEsMEJBQTBCLENBQUMsT0FBM0IsQ0FBbUMsVUFBQyx5QkFBRCxFQUErQjtBQUNoRSxZQUFNLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxhQUExQixDQUF3QyxPQUF4QyxDQUFuQjtBQUNBLFFBQUEsVUFBVSxDQUFDLEtBQVgsR0FBbUIsRUFBbkI7QUFDQSxRQUFBLFVBQVUsQ0FBQyxRQUFYLEdBQXNCLElBQXRCO0FBRUEsUUFBQSx5QkFBeUIsQ0FBQyxTQUExQixDQUFvQyxHQUFwQyxDQUF3QyxNQUF4QztBQUNELE9BTkQ7QUFPRCxLQVJELE1BUU87QUFDTCxNQUFBLDBCQUEwQixDQUFDLE9BQTNCLENBQW1DLFVBQUMseUJBQUQsRUFBK0I7QUFDaEUsWUFBTSxVQUFVLEdBQUcseUJBQXlCLENBQUMsYUFBMUIsQ0FBd0MsT0FBeEMsQ0FBbkI7QUFDQSxRQUFBLFVBQVUsQ0FBQyxLQUFYLEdBQW1CLEVBQW5CO0FBQ0EsUUFBQSxVQUFVLENBQUMsUUFBWCxHQUFzQixLQUF0QjtBQUVBLFFBQUEseUJBQXlCLENBQUMsU0FBMUIsQ0FBb0MsTUFBcEMsQ0FBMkMsTUFBM0M7QUFDRCxPQU5EO0FBT0Q7QUFDRixHQWxCRDs7QUFvQkEsRUFBQSxXQUFXLENBQUMsT0FBWixDQUFvQixVQUFDLFVBQUQsRUFBZ0I7QUFDbEMsUUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUMsYUFBWCxDQUF5QixvQkFBekIsQ0FBNUI7QUFDQSxRQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxhQUFYLENBQXlCLHNCQUF6QixDQUExQjs7QUFFQSxRQUFNLGNBQWMsR0FBRyxTQUFqQixjQUFpQixDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWlCO0FBQ3RDLFVBQUksbUJBQW1CLElBQUksaUJBQTNCLEVBQThDO0FBQzVDLFFBQUEsbUJBQW1CLENBQUMsT0FBcEIsQ0FBNEIsY0FBNUIsRUFBNEMsU0FBNUMsQ0FBc0QsR0FBdEQsQ0FBMEQsT0FBMUQ7QUFDQSxRQUFBLG1CQUFtQixDQUFDLEtBQXBCLEdBQTRCLElBQTVCO0FBQ0EsUUFBQSxpQkFBaUIsQ0FBQyxLQUFsQixHQUEwQixLQUExQjtBQUNEO0FBQ0YsS0FORDs7QUFRQSxRQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFnQixDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQXVCO0FBQzNDLDZCQUFTLFFBQVQsRUFBbUIsUUFBbkI7QUFFQSxNQUFBLE9BQU8sQ0FBQyxTQUFSLENBQWtCLEdBQWxCLENBQXNCLFFBQXRCO0FBRUEsTUFBQSxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVQsRUFBc0IsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsS0FBdEMsQ0FBZDtBQUVBLE1BQUEsbUJBQW1CLENBQUMsT0FBcEIsQ0FBNEIsY0FBNUIsRUFBNEMsU0FBNUMsQ0FBc0QsR0FBdEQsQ0FBMEQsVUFBMUQ7QUFFQSxNQUFBLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFuQixFQUEwQixFQUExQixDQUFULENBQXZCO0FBQ0QsS0FWRDs7QUFZQSxRQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsYUFBWCxDQUF5QixlQUF6QixDQUF2QjtBQUNBLFFBQU0sbUJBQW1CLEdBQUcsY0FBSCxhQUFHLGNBQUgsdUJBQUcsY0FBYyxDQUFFLGdCQUFoQixDQUFpQyxJQUFqQyxDQUE1Qjs7QUFFQSxRQUFJLGlCQUFpQixDQUFDLEtBQXRCLEVBQTZCO0FBQzNCLFVBQU0sa0JBQWtCLEdBQUcsR0FDeEIsTUFEd0IsQ0FFeEIsSUFGd0IsQ0FFbkIsbUJBRm1CLEVBRUUsVUFBQyxFQUFEO0FBQUEsZUFBUSxFQUFFLENBQUMsT0FBSCxDQUFXLEtBQVgsS0FBcUIsaUJBQWlCLENBQUMsS0FBL0M7QUFBQSxPQUZGLEVBRXdELENBRnhELENBQTNCO0FBSUEsTUFBQSxhQUFhLENBQUMsa0JBQUQsRUFBcUIsbUJBQXJCLENBQWI7QUFDRDs7QUFFRCxJQUFBLG1CQUFtQixDQUFDLE9BQXBCLENBQTRCLFVBQUMsa0JBQUQsRUFBd0I7QUFDbEQsTUFBQSxrQkFBa0IsQ0FBQyxnQkFBbkIsQ0FBb0MsT0FBcEMsRUFBNkMsWUFBTTtBQUNqRCxRQUFBLGFBQWEsQ0FBQyxrQkFBRCxFQUFxQixtQkFBckIsQ0FBYjtBQUNELE9BRkQ7QUFHRCxLQUpEO0FBTUEsSUFBQSxVQUFVLENBQUMsZ0JBQVgsQ0FBNEIsT0FBNUIsRUFBcUMsWUFBTTtBQUN6QyxNQUFBLFVBQVUsQ0FBQyxTQUFYLENBQXFCLE1BQXJCLENBQTRCLFFBQTVCO0FBRUEsTUFBQSxjQUFjLFNBQWQsSUFBQSxjQUFjLFdBQWQsWUFBQSxjQUFjLENBQUUsU0FBaEIsQ0FBMEIsTUFBMUIsQ0FBaUMsUUFBakM7QUFDRCxLQUpEO0FBS0QsR0E5Q0Q7QUErQ0QsQzs7Ozs7Ozs7Ozs7O0FDbEpEOztBQUVBLElBQUksVUFBSjs7O0FBRUEsSUFBTSxjQUFjLEdBQUcsU0FBakIsY0FBaUIsR0FBTTtBQUMzQix1QkFBQSxVQUFVLEdBQUcsSUFBSSxzQkFBSixFQUFiLENBRDJCLENBRTNCOztBQUNBLEVBQUEsTUFBTSxDQUFDLFVBQVAsR0FBb0IsVUFBcEI7QUFDRCxDQUpEOzs7Ozs7O0FDSkE7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFQQTtBQUVBO0FBT0EsUUFBUSxDQUFDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFNO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHVCQUprRCxDQUtsRDs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0QsQ0FYRDs7Ozs7Ozs7OztlQ1hlLG9CQUFNO0FBQ25CLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixRQUExQixDQUFmOztBQUVBLE1BQUksTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckIsSUFBQSxNQUFNLENBQUMsT0FBUCxDQUFlLFVBQUMsS0FBRCxFQUFXO0FBQ3hCLFVBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFOLENBQW9CLGVBQXBCLENBQW5CO0FBQ0EsVUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQU4sQ0FBb0Isa0JBQXBCLENBQXRCO0FBQ0EsVUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLGFBQU4sQ0FBb0Isc0JBQXBCLENBQXBCOztBQUVBLFVBQU0sWUFBWSxHQUFHLFNBQWYsWUFBZSxDQUFDLE1BQUQsRUFBWTtBQUMvQixZQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBUCxDQUFhLE1BQWIsSUFBdUIsRUFBdkIsR0FBNEIsTUFBOUM7QUFFQSxlQUFPLFNBQVMsQ0FBQyxRQUFWLEdBQ0osS0FESSxDQUNFLEVBREYsRUFFSixPQUZJLEdBR0osR0FISSxDQUdBLFVBQUMsS0FBRCxFQUFPLENBQVA7QUFBQSxpQkFBYSxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUosR0FBUSxFQUFSLEdBQWEsR0FBakIsQ0FBakI7QUFBQSxTQUhBLEVBSUosT0FKSSxHQUtKLElBTEksQ0FLQyxFQUxELEVBTUosSUFOSSxFQUFQO0FBT0QsT0FWRDs7QUFZQSxVQUFJLFVBQVUsSUFBSSxhQUFkLElBQStCLFdBQW5DLEVBQWdEO0FBQzlDLFlBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBWixFQUFpQixFQUFqQixDQUFuQjtBQUNBLFlBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBWixFQUFpQixFQUFqQixDQUFuQjtBQUNBLFlBQU0sQ0FBQyxHQUFHLE9BQU8sRUFBRSxHQUFHLEVBQVosQ0FBVjtBQUNBLFlBQU0sQ0FBQyxHQUFJLENBQUMsRUFBRCxHQUFNLEdBQVAsSUFBZSxFQUFFLEdBQUcsRUFBcEIsQ0FBVjs7QUFFQSxZQUFNLFlBQVksR0FBRyxTQUFmLFlBQWUsQ0FBQyxLQUFELEVBQTJCO0FBQUEsY0FBbkIsSUFBbUIsdUVBQVosT0FBWTtBQUM5QyxjQUFJLFVBQVUsR0FBRyxLQUFqQjs7QUFDQSxjQUFJLElBQUksS0FBSyxPQUFiLEVBQXNCO0FBQ3BCLFlBQUEsV0FBVyxDQUFDLEtBQVosR0FBb0IsVUFBcEI7QUFFQSxZQUFBLFdBQVcsQ0FBQyxPQUFaLENBQW9CLGdCQUFwQixFQUFzQyxTQUF0QyxDQUFnRCxNQUFoRCxDQUF1RCxPQUF2RDtBQUVBLFlBQUEsV0FBVyxDQUFDLEtBQVosR0FBb0IsWUFBWSxDQUFDLFVBQUQsQ0FBaEM7QUFDRCxXQU5ELE1BTU87QUFDTCxZQUFBLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsRUFBMUIsQ0FBRCxFQUFnQyxFQUFoQyxDQUFyQjs7QUFFQSxnQkFBSSxFQUFFLElBQUksVUFBTixJQUFvQixFQUFFLElBQUksVUFBOUIsRUFBMEM7QUFDeEMsY0FBQSxVQUFVLENBQUMsS0FBWCxHQUFtQixVQUFuQjtBQUVBLGNBQUEsV0FBVyxDQUFDLE9BQVosQ0FBb0IsZ0JBQXBCLEVBQXNDLFNBQXRDLENBQWdELE1BQWhELENBQXVELE9BQXZEO0FBRUEsY0FBQSxXQUFXLENBQUMsS0FBWixHQUFvQixZQUFZLENBQUMsVUFBRCxDQUFoQztBQUNELGFBTkQsTUFNTztBQUNMLGNBQUEsV0FBVyxDQUFDLE9BQVosQ0FBb0IsZ0JBQXBCLEVBQXNDLFNBQXRDLENBQWdELEdBQWhELENBQW9ELE9BQXBEO0FBRUEsY0FBQSxXQUFXLENBQUMsS0FBWixHQUFvQixZQUFZLENBQUMsVUFBRCxDQUFoQztBQUVBO0FBQ0Q7QUFDRjs7QUFFRCxjQUFJLFVBQVUsR0FBRyxFQUFqQixFQUFxQjtBQUNuQixZQUFBLGFBQWEsQ0FBQyxLQUFkLENBQW9CLEtBQXBCLGFBQWdDLFVBQVUsR0FBRyxDQUFkLEdBQW1CLENBQWxEO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsWUFBQSxhQUFhLENBQUMsS0FBZCxDQUFvQixLQUFwQixHQUE0QixJQUE1QjtBQUNEO0FBQ0YsU0EvQkQ7O0FBaUNBLFFBQUEsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFaLEVBQW1CLE9BQW5CLENBQVo7QUFFQSxRQUFBLFVBQVUsQ0FBQyxnQkFBWCxDQUE0QixPQUE1QixFQUFxQyxZQUFNO0FBQ3pDLFVBQUEsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFaLEVBQW1CLE9BQW5CLENBQVo7QUFDRCxTQUZEO0FBSUEsUUFBQSxXQUFXLENBQUMsZ0JBQVosQ0FBNkIsT0FBN0IsRUFBc0MsWUFBTTtBQUMxQyxVQUFBLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBYixFQUFvQixNQUFwQixDQUFaO0FBQ0QsU0FGRDtBQUlBLFFBQUEsUUFBUSxDQUFDLGdCQUFULENBQTBCLFVBQTFCLEVBQXNDLFVBQUMsR0FBRDtBQUFBLGlCQUFVLFVBQVUsSUFBVixDQUFlLE1BQU0sQ0FBQyxZQUFQLENBQW9CLEdBQUcsQ0FBQyxHQUF4QixDQUFmLENBQVY7QUFBQSxTQUF0QztBQUNEO0FBQ0YsS0FwRUQ7QUFxRUQ7QUFDRixDOzs7Ozs7Ozs7Ozs7QUMxRUQ7O0FBRUEsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFVBQVAsQ0FBa0Isb0JBQWxCLENBQXJCO0FBQ0EsSUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsb0JBQXZCLENBQW5CO0FBQ0EsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQWpCO0FBQ0EsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQVo7QUFDQSxJQUFNLFVBQVUsR0FBRyxJQUFJLHNCQUFKLEVBQW5COztBQUVBLElBQU0sUUFBUSxHQUFHLFNBQVgsUUFBVyxHQUFNO0FBQ3JCLEVBQUEsVUFBVSxDQUFDLGdCQUFYO0FBQ0EsRUFBQSxRQUFRLENBQUMsU0FBVCxDQUFtQixHQUFuQixDQUF1QixXQUF2QjtBQUNBLEVBQUEsUUFBUSxDQUFDLFdBQVQsR0FBdUIsTUFBdkI7QUFDQSxFQUFBLEdBQUcsQ0FBQyxTQUFKLENBQWMsR0FBZCxDQUFrQixXQUFsQjtBQUNBLEVBQUEsVUFBVSxDQUFDLFNBQVgsQ0FBcUIsR0FBckIsQ0FBeUIsU0FBekIsRUFMcUIsQ0FNckI7QUFDQTtBQUNBO0FBQ0QsQ0FURDs7QUFXQSxJQUFNLFNBQVMsR0FBRyxTQUFaLFNBQVksR0FBTTtBQUN0QixFQUFBLFVBQVUsQ0FBQyxlQUFYO0FBQ0EsRUFBQSxRQUFRLENBQUMsU0FBVCxDQUFtQixNQUFuQixDQUEwQixXQUExQjtBQUNBLEVBQUEsUUFBUSxDQUFDLFdBQVQsR0FBdUIsT0FBdkI7QUFDQSxFQUFBLEdBQUcsQ0FBQyxTQUFKLENBQWMsTUFBZCxDQUFxQixXQUFyQjtBQUNBLEVBQUEsVUFBVSxDQUFDLFNBQVgsQ0FBcUIsTUFBckIsQ0FBNEIsU0FBNUIsRUFMc0IsQ0FNdEI7QUFDQTtBQUNBO0FBQ0QsQ0FURDs7QUFXQSxJQUFNLGlCQUFpQixHQUFHLFNBQXBCLGlCQUFvQixHQUFNO0FBQzlCLE1BQUksWUFBWSxDQUFDLE9BQWpCLEVBQTBCO0FBQ3hCLFFBQUksR0FBRyxDQUFDLFNBQUosQ0FBYyxRQUFkLENBQXVCLFdBQXZCLENBQUosRUFBeUM7QUFDdkMsTUFBQSxTQUFTO0FBQ1Y7QUFDRjs7QUFDRCxFQUFBLFlBQVksQ0FBQyxXQUFiLENBQXlCLGlCQUF6QjtBQUNELENBUEQ7O0FBU0EsSUFBTSxnQkFBZ0IsR0FBRyxTQUFuQixnQkFBbUIsR0FBTTtBQUM3QixNQUFJLFFBQUosRUFBYztBQUNaLElBQUEsUUFBUSxDQUFDLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQU07QUFDdkMsVUFBSSxRQUFRLENBQUMsV0FBVCxLQUF5QixNQUE3QixFQUFxQztBQUNuQyxRQUFBLFNBQVM7QUFDVixPQUZELE1BRU87QUFDTCxRQUFBLFFBQVE7QUFDVDtBQUNGLEtBTkQ7QUFPQSxJQUFBLGlCQUFpQjtBQUNsQjtBQUNGLENBWEQ7Ozs7Ozs7Ozs7OztlQ3ZDZSxrQkFBQyxRQUFELEVBQVcsV0FBWCxFQUF3QixrQkFBeEIsRUFBK0M7QUFDNUQsRUFBQSxRQUFRLENBQUMsT0FBVCxDQUFpQixVQUFDLE9BQUQsRUFBYTtBQUM1QixRQUFJLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFFBQWxCLENBQTJCLFdBQTNCLENBQUosRUFBNkM7QUFDM0MsTUFBQSxPQUFPLENBQUMsU0FBUixDQUFrQixNQUFsQixDQUF5QixXQUF6Qjs7QUFFQSxVQUFJLGtCQUFKLEVBQXdCO0FBQ3RCLFFBQUEsT0FBTyxDQUFDLFVBQVIsQ0FBbUIsU0FBbkIsQ0FBNkIsTUFBN0IsQ0FBb0MsV0FBcEM7QUFDRDtBQUNGO0FBQ0YsR0FSRDtBQVNELEM7Ozs7Ozs7Ozs7OztBQ1ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtlQUVlLG9CQUFNO0FBQ25CLE1BQUksYUFBSjs7QUFDQSxNQUFNLHNCQUFzQixHQUFHLFNBQXpCLHNCQUF5QixDQUFDLENBQUQsRUFBTztBQUNwQyxRQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBRixDQUFTLGtCQUExQjs7QUFDQSxRQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBVCxDQUFpQix1QkFBakIsQ0FBaEIsRUFBMkQ7QUFDekQsTUFBQSxRQUFRLENBQUMsc0JBQVQsQ0FBZ0MsU0FBaEMsQ0FBMEMsTUFBMUMsQ0FBaUQsUUFBakQ7QUFDQSxNQUFBLFFBQVEsQ0FBQyxTQUFULENBQW1CLE1BQW5CLENBQTBCLFFBQTFCO0FBQ0E7QUFDRDs7QUFDRCxRQUFJLGFBQUosRUFBbUI7QUFDakIsVUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFGLENBQVMsT0FBVCxDQUFpQixnQkFBakIsQ0FBTCxFQUF5QztBQUN2QyxRQUFBLGFBQWEsQ0FBQyxzQkFBZCxDQUFxQyxTQUFyQyxDQUErQyxNQUEvQyxDQUFzRCxRQUF0RDtBQUNBLFFBQUEsYUFBYSxDQUFDLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsUUFBL0I7QUFDRDtBQUNGOztBQUNELFFBQUksUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFULENBQWlCLGdCQUFqQixDQUFoQixFQUFvRDtBQUNsRCxNQUFBLFFBQVEsQ0FBQyxzQkFBVCxDQUFnQyxTQUFoQyxDQUEwQyxHQUExQyxDQUE4QyxRQUE5QztBQUNBLE1BQUEsUUFBUSxDQUFDLFNBQVQsQ0FBbUIsR0FBbkIsQ0FBdUIsUUFBdkI7QUFDQSxNQUFBLGFBQWEsR0FBRyxRQUFoQjtBQUNEO0FBQ0YsR0FsQkQ7O0FBbUJBLEVBQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxzQkFBeEM7QUFDRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUNsRFksVTtBQUNYLHdCQUFjO0FBQUE7O0FBQ1osU0FBSyxXQUFMLEdBQW1CLENBQW5CO0FBQ0EsU0FBSyxZQUFMLEdBQW9CLE1BQU0sQ0FBQyxVQUEzQjtBQUNBLFNBQUsscUJBQUwsR0FBNkIsS0FBSyxxQkFBTCxDQUEyQixJQUEzQixDQUFnQyxJQUFoQyxDQUE3QjtBQUNBLFNBQUssb0JBQUwsR0FBNEIsS0FBSyxvQkFBTCxDQUEwQixJQUExQixDQUErQixJQUEvQixDQUE1Qjs7QUFDQSxTQUFLLEtBQUw7QUFDRDs7OztXQUVELGlCQUFRO0FBQ04sV0FBSyxVQUFMO0FBQ0EsTUFBQSxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsS0FBSyxxQkFBeEM7QUFDQSxNQUFBLE1BQU0sQ0FBQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxLQUFLLG9CQUF2QztBQUNEOzs7V0FFRCwrQkFBc0IsR0FBdEIsRUFBMkI7QUFDekIsVUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQW5COztBQUNBLFVBQUksQ0FBQyxNQUFNLENBQUMsT0FBUCxDQUFlLDJCQUFmLENBQUwsRUFBa0Q7QUFDaEQ7QUFDRDs7QUFFRCxNQUFBLEdBQUcsQ0FBQyxjQUFKO0FBQ0EsVUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSw0QkFBZixDQUFoQjs7QUFDQSxVQUFJLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFFBQWxCLENBQTJCLFdBQTNCLENBQUosRUFBNkM7QUFDM0MsYUFBSyxjQUFMLENBQW9CLE9BQXBCO0FBQ0E7QUFDRDs7QUFDRCxXQUFLLGFBQUwsQ0FBbUIsT0FBbkI7QUFDRDs7O1dBRUQsZ0NBQXVCO0FBQ3JCLFVBQUksS0FBSyxZQUFMLEtBQXNCLE1BQU0sQ0FBQyxVQUFqQyxFQUE2QztBQUMzQztBQUNEOztBQUNELFdBQUssWUFBTCxHQUFvQixNQUFNLENBQUMsVUFBM0I7QUFDQSxXQUFLLHNCQUFMO0FBQ0Q7OztXQUVELDJCQUFrQixNQUFsQixFQUEwQjtBQUFBOztBQUN4QixVQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsNEJBQXhCLENBQWpCO0FBQ0EsTUFBQSxRQUFRLENBQUMsT0FBVCxDQUFpQixVQUFDLE9BQUQsRUFBYTtBQUM1QixZQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsT0FBUixDQUFnQiwyQkFBaEIsQ0FBdEI7O0FBQ0EsWUFBSSxhQUFhLEtBQUssTUFBdEIsRUFBOEI7QUFDNUIsVUFBQSxLQUFJLENBQUMsY0FBTCxDQUFvQixPQUFwQjtBQUNEO0FBQ0YsT0FMRDtBQU1EOzs7V0FFRCxrQ0FBdUM7QUFBQSxVQUFoQixPQUFnQix1RUFBTixJQUFNOztBQUNyQyxVQUFJLE9BQUosRUFBYTtBQUNYLFlBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFSLENBQXNCLDRCQUF0QixDQUFoQjtBQUNBLFFBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBYyxVQUFkLEdBQTJCLE1BQTNCO0FBQ0EsUUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLFNBQWQsYUFBNkIsT0FBTyxDQUFDLFlBQXJDO0FBQ0EsUUFBQSxVQUFVLENBQUMsWUFBTTtBQUNmLFVBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBYyxVQUFkLEdBQTJCLElBQTNCO0FBQ0QsU0FGUyxDQUFWO0FBR0E7QUFDRDs7QUFDRCxVQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsc0NBQTFCLENBQXJCO0FBQ0EsTUFBQSxZQUFZLENBQUMsT0FBYixDQUFxQixVQUFDLFdBQUQsRUFBaUI7QUFDcEMsWUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLGFBQVosQ0FBMEIsNEJBQTFCLENBQWhCO0FBQ0EsUUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLFVBQWQsR0FBMkIsTUFBM0I7QUFDQSxRQUFBLE9BQU8sQ0FBQyxLQUFSLENBQWMsU0FBZCxhQUE2QixPQUFPLENBQUMsWUFBckM7QUFDQSxRQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2YsVUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLFVBQWQsR0FBMkIsSUFBM0I7QUFDRCxTQUZTLENBQVY7QUFHRCxPQVBEO0FBUUQ7OztXQUVELHNCQUE4QztBQUFBOztBQUFBLFVBQW5DLE1BQW1DLHVFQUExQixJQUEwQjtBQUFBLFVBQXBCLFVBQW9CLHVFQUFQLEtBQU87QUFDNUMsVUFBSSxZQUFKOztBQUNBLFVBQUksTUFBSixFQUFZO0FBQ1YsUUFBQSxZQUFZLEdBQUcsTUFBTSxDQUFDLGdCQUFQLENBQXdCLHNDQUF4QixDQUFmO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsUUFBQSxZQUFZLEdBQUcsUUFBUSxDQUFDLGdCQUFULENBQTBCLHNDQUExQixDQUFmO0FBQ0Q7O0FBQ0QsTUFBQSxZQUFZLENBQUMsT0FBYixDQUFxQixVQUFDLFdBQUQsRUFBaUI7QUFDcEMsWUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLGFBQVosQ0FBMEIsMkJBQTFCLENBQXBCOztBQUNBLFlBQUksV0FBSixFQUFpQjtBQUNmO0FBQ0Q7O0FBQ0QsUUFBQSxNQUFJLENBQUMsYUFBTCxDQUFtQixXQUFuQixFQUFnQyxVQUFoQztBQUNELE9BTkQ7QUFPRDs7O1dBRUQsdUJBQWMsT0FBZCxFQUEwQztBQUFBLFVBQW5CLFVBQW1CLHVFQUFOLElBQU07QUFDeEMsVUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsMkJBQWhCLENBQXRCO0FBQ0EsVUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGFBQVIsQ0FBc0IsNEJBQXRCLENBQXZCO0FBQ0EsV0FBSyxXQUFMLElBQW9CLGNBQWMsQ0FBQyxZQUFuQzs7QUFFQSxVQUFJLGFBQWEsQ0FBQyxZQUFkLENBQTJCLGFBQTNCLENBQUosRUFBK0M7QUFDN0MsYUFBSyxpQkFBTCxDQUF1QixhQUF2QjtBQUNEOztBQUVELE1BQUEsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsR0FBbEIsQ0FBc0IsV0FBdEI7O0FBQ0EsVUFBSSxVQUFKLEVBQWdCO0FBQ2QsUUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixTQUFyQixhQUFvQyxLQUFLLFdBQXpDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsUUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixHQUFrQyxNQUFsQztBQUNBLFFBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsU0FBckIsYUFBb0MsS0FBSyxXQUF6QztBQUNBLFFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZixVQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLFVBQXJCLEdBQWtDLElBQWxDO0FBQ0QsU0FGUyxDQUFWO0FBR0Q7O0FBRUQsVUFBSSxhQUFhLENBQUMsT0FBZCxDQUFzQiw0QkFBdEIsQ0FBSixFQUF5RDtBQUN2RCxhQUFLLGFBQUwsQ0FBbUIsYUFBYSxDQUFDLE9BQWQsQ0FBc0IsNEJBQXRCLENBQW5CLEVBQXdFLFVBQXhFO0FBQ0E7QUFDRDs7QUFFRCxXQUFLLFdBQUwsR0FBbUIsQ0FBbkI7QUFDRDs7O1dBRUQsd0JBQWUsT0FBZixFQUEyQztBQUFBLFVBQW5CLFVBQW1CLHVFQUFOLElBQU07QUFDekMsVUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGFBQVIsQ0FBc0IsNEJBQXRCLENBQXZCOztBQUNBLFVBQUksQ0FBQyxjQUFMLEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0QsTUFBQSxPQUFPLENBQUMsU0FBUixDQUFrQixNQUFsQixDQUF5QixXQUF6Qjs7QUFDQSxVQUFJLFVBQUosRUFBZ0I7QUFDZCxRQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLFNBQXJCLEdBQWlDLEdBQWpDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsUUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixHQUFrQyxNQUFsQztBQUNBLFFBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsU0FBckIsR0FBaUMsR0FBakM7QUFDQSxRQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2YsVUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixHQUFrQyxJQUFsQztBQUNELFNBRlMsQ0FBVjtBQUdEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoSUksSUFBTSxVQUFVLEdBQUcsU0FBYixVQUFhO0FBQUEsU0FBTSxDQUM5QixnQkFEOEIsRUFFOUIsa0JBRjhCLEVBRzlCLGdCQUg4QixFQUk5QixNQUo4QixFQUs5QixRQUw4QixFQU05QixNQU44QixFQU85QixRQVA4QixDQU9yQixTQUFTLENBQUMsUUFQVyxFQVE1QjtBQVI0QixLQVN4QixTQUFTLENBQUMsU0FBVixDQUFvQixRQUFwQixDQUE2QixLQUE3QixLQUF1QyxnQkFBZ0IsUUFUckM7QUFBQSxDQUFuQjs7Ozs7Ozs7Ozs7O0FDQVA7Ozs7Ozs7O0lBRWEsVTtBQUNYLHdCQUFjO0FBQUE7O0FBQ1osU0FBSyxXQUFMLEdBQW1CLHNCQUFuQjtBQUNBLFNBQUssVUFBTCxHQUFrQixLQUFLLFdBQUwsS0FBcUIsaUJBQXJCLEdBQXlDLGFBQTNEO0FBQ0EsU0FBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBSyxtQkFBTCxHQUEyQixRQUFRLENBQUMsZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQTNCO0FBQ0Q7Ozs7V0FFRCw4QkFBcUI7QUFDbkIsYUFBTyxNQUFNLENBQUMsVUFBUCxHQUFvQixRQUFRLENBQUMsZUFBVCxDQUF5QixXQUFwRDtBQUNEOzs7V0FFRCw2QkFBb0I7QUFDbEIsYUFDRSxJQUFJLENBQUMsV0FBTCxJQUNDLFFBQVEsQ0FBQyxlQUFULElBQTRCLFFBQVEsQ0FBQyxlQUFULENBQXlCLFNBRHRELElBRUMsUUFBUSxDQUFDLElBQVQsSUFBaUIsUUFBUSxDQUFDLElBQVQsQ0FBYyxTQUhsQztBQUtEOzs7V0FFRCw0QkFBbUI7QUFBQTs7QUFDakIsV0FBSyxVQUFMLEdBQWtCLFFBQVEsQ0FBQyxJQUFULENBQWMsT0FBZCxDQUFzQixNQUF0QixHQUErQixRQUFRLENBQUMsSUFBVCxDQUFjLE9BQWQsQ0FBc0IsTUFBdEIsR0FBK0IsUUFBUSxDQUFDLElBQVQsQ0FBYyxPQUFkLENBQXNCLE1BQXJELEdBQThELEtBQUssaUJBQUwsRUFBL0c7O0FBQ0EsVUFBSSxLQUFLLGtCQUFMLEVBQUosRUFBK0I7QUFDN0IsUUFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLEtBQWQsQ0FBb0IsWUFBcEIsYUFBc0MsS0FBSyxrQkFBTCxFQUF0Qzs7QUFDQSxhQUFLLG1CQUFMLENBQXlCLE9BQXpCLENBQWlDLFVBQUMsS0FBRCxFQUFXO0FBQzFDLFVBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxZQUFaLGFBQThCLEtBQUksQ0FBQyxrQkFBTCxFQUE5QjtBQUNELFNBRkQ7QUFHRDs7QUFDRCxNQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsS0FBZCxDQUFvQixHQUFwQixjQUE4QixLQUFLLFVBQW5DO0FBQ0EsTUFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsS0FBSyxVQUFqQztBQUNEOzs7V0FFRCwyQkFBa0I7QUFDaEIsTUFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLFNBQWQsQ0FBd0IsTUFBeEIsQ0FBK0IsS0FBSyxVQUFwQztBQUNBLE1BQUEsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsQ0FBaEIsRUFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBVCxDQUFjLE9BQWQsQ0FBc0IsTUFBMUM7QUFDQSxNQUFBLFFBQVEsQ0FBQyxJQUFULENBQWMsS0FBZCxDQUFvQixZQUFwQixHQUFtQyxJQUFuQztBQUNBLE1BQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxLQUFkLENBQW9CLEdBQXBCLEdBQTBCLElBQTFCOztBQUNBLFdBQUssbUJBQUwsQ0FBeUIsT0FBekIsQ0FBaUMsVUFBQyxLQUFELEVBQVc7QUFDMUMsUUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLFlBQVosR0FBMkIsSUFBM0I7QUFDRCxPQUZEOztBQUdBLE1BQUEsUUFBUSxDQUFDLElBQVQsQ0FBYyxlQUFkLENBQThCLGFBQTlCO0FBQ0EsV0FBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0Q7Ozs7Ozs7QUFHSCxNQUFNLENBQUMsVUFBUCxHQUFvQixJQUFJLFVBQUosRUFBcEIiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yO1xuZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGRlc2MgPSB7XG4gICAgfTtcbiAgICBPYmplY3RbJ2tlJyArICd5cyddKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGRlc2Nba2V5XSA9IGRlc2NyaXB0b3Jba2V5XTtcbiAgICB9KTtcbiAgICBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTtcbiAgICBkZXNjLmNvbmZpZ3VyYWJsZSA9ICEhZGVzYy5jb25maWd1cmFibGU7XG4gICAgaWYgKCd2YWx1ZScgaW4gZGVzYyB8fCBkZXNjLmluaXRpYWxpemVyKSB7XG4gICAgICAgIGRlc2Mud3JpdGFibGUgPSB0cnVlO1xuICAgIH1cbiAgICBkZXNjID0gZGVjb3JhdG9ycy5zbGljZSgpLnJldmVyc2UoKS5yZWR1Y2UoZnVuY3Rpb24oZGVzYzEsIGRlY29yYXRvcikge1xuICAgICAgICByZXR1cm4gZGVjb3JhdG9yID8gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHksIGRlc2MxKSB8fCBkZXNjMSA6IGRlc2MxO1xuICAgIH0sIGRlc2MpO1xuICAgIGlmIChjb250ZXh0ICYmIGRlc2MuaW5pdGlhbGl6ZXIgIT09IHZvaWQgMCkge1xuICAgICAgICBkZXNjLnZhbHVlID0gZGVzYy5pbml0aWFsaXplciA/IGRlc2MuaW5pdGlhbGl6ZXIuY2FsbChjb250ZXh0KSA6IHZvaWQgMDtcbiAgICAgICAgZGVzYy5pbml0aWFsaXplciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRlc2MuaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCkge1xuICAgICAgICBPYmplY3RbJ2RlZmluZScgKyAnUHJvcGVydHknXSh0YXJnZXQsIHByb3BlcnR5LCBkZXNjKTtcbiAgICAgICAgZGVzYyA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkZXNjO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXJyYXlXaXRoSG9sZXM7XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2FycmF5V2l0aG91dEhvbGVzO1xuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnIyO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDtcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICAgIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gQXN5bmNHZW5lcmF0b3I7XG52YXIgX2F3YWl0VmFsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19hd2FpdF92YWx1ZVwiKSk7XG5mdW5jdGlvbiBfaW5zdGFuY2VvZihsZWZ0LCByaWdodCkge1xuICAgIGlmIChyaWdodCAhPSBudWxsICYmIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXSkge1xuICAgICAgICByZXR1cm4gcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXShsZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGVmdCBpbnN0YW5jZW9mIHJpZ2h0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIEFzeW5jR2VuZXJhdG9yKGdlbikge1xuICAgIHZhciBzZW5kID0gZnVuY3Rpb24gc2VuZChrZXksIGFyZykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdDogcmVqZWN0LFxuICAgICAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoYmFjaykge1xuICAgICAgICAgICAgICAgIGJhY2sgPSBiYWNrLm5leHQgPSByZXF1ZXN0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcm9udCA9IGJhY2sgPSByZXF1ZXN0O1xuICAgICAgICAgICAgICAgIHJlc3VtZShrZXksIGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIHNldHRsZSA9IGZ1bmN0aW9uIHNldHRsZSh0eXBlLCB2YWx1ZSkge1xuICAgICAgICBzd2l0Y2godHlwZSl7XG4gICAgICAgICAgICBjYXNlIFwicmV0dXJuXCI6XG4gICAgICAgICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRocm93XCI6XG4gICAgICAgICAgICAgICAgZnJvbnQucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZnJvbnQucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmcm9udCA9IGZyb250Lm5leHQ7XG4gICAgICAgIGlmIChmcm9udCkge1xuICAgICAgICAgICAgcmVzdW1lKGZyb250LmtleSwgZnJvbnQuYXJnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhY2sgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgZnJvbnQsIGJhY2s7XG4gICAgZnVuY3Rpb24gcmVzdW1lKGtleSwgYXJnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2VuW2tleV0oYXJnKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgIHZhciB3cmFwcGVkQXdhaXQgPSBfaW5zdGFuY2VvZih2YWx1ZSwgX2F3YWl0VmFsdWUuZGVmYXVsdCk7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUod3JhcHBlZEF3YWl0ID8gdmFsdWUud3JhcHBlZCA6IHZhbHVlKS50aGVuKGZ1bmN0aW9uKGFyZzEpIHtcbiAgICAgICAgICAgICAgICBpZiAod3JhcHBlZEF3YWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VtZShcIm5leHRcIiwgYXJnMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0dGxlKHJlc3VsdC5kb25lID8gXCJyZXR1cm5cIiA6IFwibm9ybWFsXCIsIGFyZzEpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzdW1lKFwidGhyb3dcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faW52b2tlID0gc2VuZDtcbiAgICBpZiAodHlwZW9mIGdlbi5yZXR1cm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLnJldHVybiA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yKSB7XG4gICAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xufVxuQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwibmV4dFwiLCBhcmcpO1xufTtcbkFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS50aHJvdyA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xufTtcbkFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5faW52b2tlKFwicmV0dXJuXCIsIGFyZyk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXN5bmNHZW5lcmF0b3JEZWxlZ2F0ZTtcbmZ1bmN0aW9uIF9hc3luY0dlbmVyYXRvckRlbGVnYXRlKGlubmVyLCBhd2FpdFdyYXApIHtcbiAgICB2YXIgcHVtcCA9IGZ1bmN0aW9uIHB1bXAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgICAgdmFsdWUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgICByZXNvbHZlKGlubmVyW2tleV0odmFsdWUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBhd2FpdFdyYXAodmFsdWUpXG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgaXRlciA9IHtcbiAgICB9LCB3YWl0aW5nID0gZmFsc2U7XG4gICAgO1xuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgICAgICB3YWl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB1bXAoXCJuZXh0XCIsIHZhbHVlKTtcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgaW5uZXIudGhyb3cgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpdGVyLnRocm93ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh3YWl0aW5nKSB7XG4gICAgICAgICAgICAgICAgd2FpdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRocm93IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHB1bXAoXCJ0aHJvd1wiLCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5uZXIucmV0dXJuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaXRlci5yZXR1cm4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHB1bXAoXCJyZXR1cm5cIiwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2FzeW5jSXRlcmF0b3I7XG5mdW5jdGlvbiBfYXN5bmNJdGVyYXRvcihpdGVyYWJsZSkge1xuICAgIHZhciBtZXRob2Q7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgIT0gbnVsbCkgcmV0dXJuIG1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgICAgICBtZXRob2QgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgaWYgKG1ldGhvZCAhPSBudWxsKSByZXR1cm4gbWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgaXMgbm90IGFzeW5jIGl0ZXJhYmxlXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfYXN5bmNUb0dlbmVyYXRvcjtcbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgICB9XG59XG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9hd2FpdEFzeW5jR2VuZXJhdG9yO1xudmFyIF9hd2FpdFZhbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fYXdhaXRfdmFsdWVcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX2F3YWl0QXN5bmNHZW5lcmF0b3IodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IF9hd2FpdFZhbHVlLmRlZmF1bHQodmFsdWUpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfQXdhaXRWYWx1ZTtcbmZ1bmN0aW9uIF9Bd2FpdFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy53cmFwcGVkID0gdmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc0NhbGxDaGVjaztcbmZ1bmN0aW9uIF9pbnN0YW5jZW9mKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKHJpZ2h0ICE9IG51bGwgJiYgdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiByaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdKSB7XG4gICAgICAgIHJldHVybiByaWdodFtTeW1ib2wuaGFzSW5zdGFuY2VdKGxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsZWZ0IGluc3RhbmNlb2YgcmlnaHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghX2luc3RhbmNlb2YoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2NsYXNzTmFtZVREWkVycm9yO1xuZnVuY3Rpb24gX2NsYXNzTmFtZVREWkVycm9yKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDbGFzcyBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGNhbm5vdCBiZSByZWZlcmVuY2VkIGluIGNvbXB1dGVkIHByb3BlcnR5IGtleXMuXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfY2xhc3NQcml2YXRlRmllbGRHZXQ7XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKS52YWx1ZTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkQmFzZTtcbmZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZEJhc2UocmVjZWl2ZXIsIHByaXZhdGVLZXkpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWNlaXZlciwgcHJpdmF0ZUtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byB1c2UgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XG4gICAgfVxuICAgIHJldHVybiByZWNlaXZlcjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0O1xuZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xuICAgIH1cbiAgICB2YXIgZGVzY3JpcHRvciA9IHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcbiAgICBpZiAoIWRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcmVhZCBvbmx5IHByaXZhdGUgZmllbGRcIik7XG4gICAgfVxuICAgIGRlc2NyaXB0b3IudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc1ByaXZhdGVNZXRob2RHZXQ7XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kR2V0KHJlY2VpdmVyLCBwcml2YXRlU2V0LCBmbikge1xuICAgIGlmICghcHJpdmF0ZVNldC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZm47XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc1ByaXZhdGVNZXRob2RTZXQ7XG5mdW5jdGlvbiBfY2xhc3NQcml2YXRlTWV0aG9kU2V0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gcmVhc3NpZ24gcHJpdmF0ZSBtZXRob2RcIik7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQ7XG5mdW5jdGlvbiBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjR2V0KHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yLCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKHJlY2VpdmVyICE9PSBjbGFzc0NvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIHN0YXRpYyBhY2Nlc3Mgb2Ygd3JvbmcgcHJvdmVuYW5jZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IudmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQ7XG5mdW5jdGlvbiBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjU2V0KHJlY2VpdmVyLCBjbGFzc0NvbnN0cnVjdG9yLCBkZXNjcmlwdG9yLCB2YWx1ZSkge1xuICAgIGlmIChyZWNlaXZlciAhPT0gY2xhc3NDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBzdGF0aWMgYWNjZXNzIG9mIHdyb25nIHByb3ZlbmFuY2VcIik7XG4gICAgfVxuICAgIGlmICghZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCByZWFkIG9ubHkgcHJpdmF0ZSBmaWVsZFwiKTtcbiAgICB9XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2NvbnN0cnVjdDtcbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgICAgIGNvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIGNvbnN0cnVjdDEoUGFyZW50MSwgYXJnczEsIENsYXNzMSkge1xuICAgICAgICAgICAgdmFyIGEgPSBbXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzMSk7XG4gICAgICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudDEsIGEpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICBpZiAoQ2xhc3MxKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzMS5wcm90b3R5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICByZXR1cm4gY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9jcmVhdGVDbGFzcztcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfY3JlYXRlU3VwZXI7XG52YXIgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2lzX25hdGl2ZV9yZWZsZWN0X2NvbnN0cnVjdFwiKSk7XG52YXIgX2dldFByb3RvdHlwZU9mID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fZ2V0X3Byb3RvdHlwZV9vZlwiKSk7XG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19wb3NzaWJsZV9jb25zdHJ1Y3Rvcl9yZXR1cm5cIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHtcbiAgICB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9ICgwLCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KS5kZWZhdWx0KCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgICAgICB2YXIgU3VwZXIgPSAoMCwgX2dldFByb3RvdHlwZU9mKS5kZWZhdWx0KERlcml2ZWQpLCByZXN1bHQ7XG4gICAgICAgIGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgTmV3VGFyZ2V0ID0gKDAsIF9nZXRQcm90b3R5cGVPZikuZGVmYXVsdCh0aGlzKS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4pLmRlZmF1bHQodGhpcywgcmVzdWx0KTtcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVjb3JhdGU7XG52YXIgX3RvQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL190b19hcnJheVwiKSk7XG52YXIgX3RvUHJvcGVydHlLZXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL190b19wcm9wZXJ0eV9rZXlcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX2RlY29yYXRlKGRlY29yYXRvcnMsIGZhY3RvcnksIHN1cGVyQ2xhc3MpIHtcbiAgICB2YXIgciA9IGZhY3RvcnkoZnVuY3Rpb24gaW5pdGlhbGl6ZShPKSB7XG4gICAgICAgIF9pbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBkZWNvcmF0ZWQuZWxlbWVudHMpO1xuICAgIH0sIHN1cGVyQ2xhc3MpO1xuICAgIHZhciBkZWNvcmF0ZWQgPSBfZGVjb3JhdGVDbGFzcyhfY29hbGVzY2VDbGFzc0VsZW1lbnRzKHIuZC5tYXAoX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKSksIGRlY29yYXRvcnMpO1xuICAgIF9pbml0aWFsaXplQ2xhc3NFbGVtZW50cyhyLkYsIGRlY29yYXRlZC5lbGVtZW50cyk7XG4gICAgcmV0dXJuIF9ydW5DbGFzc0ZpbmlzaGVycyhyLkYsIGRlY29yYXRlZC5maW5pc2hlcnMpO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnREZXNjcmlwdG9yKGRlZikge1xuICAgIHZhciBrZXkgPSAoMCwgX3RvUHJvcGVydHlLZXkpLmRlZmF1bHQoZGVmLmtleSk7XG4gICAgdmFyIGRlc2NyaXB0b3I7XG4gICAgaWYgKGRlZi5raW5kID09PSBcIm1ldGhvZFwiKSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICB2YWx1ZTogZGVmLnZhbHVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVmLnZhbHVlLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgdmFsdWU6IF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IFwiXCIgOiBrZXksXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gXCJnZXRcIikge1xuICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZ2V0OiBkZWYudmFsdWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IFwic2V0XCIpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIHNldDogZGVmLnZhbHVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBcImZpZWxkXCIpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZWxlbWVudCA9IHtcbiAgICAgICAga2luZDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwiZmllbGRcIiA6IFwibWV0aG9kXCIsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBwbGFjZW1lbnQ6IGRlZi5zdGF0aWMgPyBcInN0YXRpY1wiIDogZGVmLmtpbmQgPT09IFwiZmllbGRcIiA/IFwib3duXCIgOiBcInByb3RvdHlwZVwiLFxuICAgICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yXG4gICAgfTtcbiAgICBpZiAoZGVmLmRlY29yYXRvcnMpIGVsZW1lbnQuZGVjb3JhdG9ycyA9IGRlZi5kZWNvcmF0b3JzO1xuICAgIGlmIChkZWYua2luZCA9PT0gXCJmaWVsZFwiKSBlbGVtZW50LmluaXRpYWxpemVyID0gZGVmLnZhbHVlO1xuICAgIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gX2NvYWxlc2NlR2V0dGVyU2V0dGVyKGVsZW1lbnQsIG90aGVyKSB7XG4gICAgaWYgKGVsZW1lbnQuZGVzY3JpcHRvci5nZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdGhlci5kZXNjcmlwdG9yLmdldCA9IGVsZW1lbnQuZGVzY3JpcHRvci5nZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3RoZXIuZGVzY3JpcHRvci5zZXQgPSBlbGVtZW50LmRlc2NyaXB0b3Iuc2V0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9jb2FsZXNjZUNsYXNzRWxlbWVudHMoZWxlbWVudHMpIHtcbiAgICB2YXIgbmV3RWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaXNTYW1lRWxlbWVudCA9IGZ1bmN0aW9uIGlzU2FtZUVsZW1lbnQxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlci5raW5kID09PSBcIm1ldGhvZFwiICYmIG90aGVyLmtleSA9PT0gZWxlbWVudC5rZXkgJiYgb3RoZXIucGxhY2VtZW50ID09PSBlbGVtZW50LnBsYWNlbWVudDtcbiAgICB9O1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICAgIHZhciBvdGhlcjtcbiAgICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJtZXRob2RcIiAmJiAob3RoZXIgPSBuZXdFbGVtZW50cy5maW5kKGlzU2FtZUVsZW1lbnQpKSkge1xuICAgICAgICAgICAgaWYgKF9pc0RhdGFEZXNjcmlwdG9yKGVsZW1lbnQuZGVzY3JpcHRvcikgfHwgX2lzRGF0YURlc2NyaXB0b3Iob3RoZXIuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkgfHwgX2hhc0RlY29yYXRvcnMob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIkR1cGxpY2F0ZWQgbWV0aG9kcyAoXCIgKyBlbGVtZW50LmtleSArIFwiKSBjYW4ndCBiZSBkZWNvcmF0ZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdGhlci5kZXNjcmlwdG9yID0gZWxlbWVudC5kZXNjcmlwdG9yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoX2hhc0RlY29yYXRvcnMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9oYXNEZWNvcmF0b3JzKG90aGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVjb3JhdG9ycyBjYW4ndCBiZSBwbGFjZWQgb24gZGlmZmVyZW50IGFjY2Vzc29ycyB3aXRoIGZvciBcIiArIFwidGhlIHNhbWUgcHJvcGVydHkgKFwiICsgZWxlbWVudC5rZXkgKyBcIikuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG90aGVyLmRlY29yYXRvcnMgPSBlbGVtZW50LmRlY29yYXRvcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9jb2FsZXNjZUdldHRlclNldHRlcihlbGVtZW50LCBvdGhlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdFbGVtZW50cztcbn1cbmZ1bmN0aW9uIF9oYXNEZWNvcmF0b3JzKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kZWNvcmF0b3JzICYmIGVsZW1lbnQuZGVjb3JhdG9ycy5sZW5ndGg7XG59XG5mdW5jdGlvbiBfaXNEYXRhRGVzY3JpcHRvcihkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MgIT09IHVuZGVmaW5lZCAmJiAhKGRlc2MudmFsdWUgPT09IHVuZGVmaW5lZCAmJiBkZXNjLndyaXRhYmxlID09PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gX2luaXRpYWxpemVDbGFzc0VsZW1lbnRzKEYsIGVsZW1lbnRzKSB7XG4gICAgdmFyIHByb3RvID0gRi5wcm90b3R5cGU7XG4gICAgW1xuICAgICAgICBcIm1ldGhvZFwiLFxuICAgICAgICBcImZpZWxkXCJcbiAgICBdLmZvckVhY2goZnVuY3Rpb24oa2luZCkge1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSBlbGVtZW50LnBsYWNlbWVudDtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmtpbmQgPT09IGtpbmQgJiYgKHBsYWNlbWVudCA9PT0gXCJzdGF0aWNcIiB8fCBwbGFjZW1lbnQgPT09IFwicHJvdG90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyID0gcGxhY2VtZW50ID09PSBcInN0YXRpY1wiID8gRiA6IHByb3RvO1xuICAgICAgICAgICAgICAgIF9kZWZpbmVDbGFzc0VsZW1lbnQocmVjZWl2ZXIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIF9pbml0aWFsaXplSW5zdGFuY2VFbGVtZW50cyhPLCBlbGVtZW50cykge1xuICAgIFtcbiAgICAgICAgXCJtZXRob2RcIixcbiAgICAgICAgXCJmaWVsZFwiXG4gICAgXS5mb3JFYWNoKGZ1bmN0aW9uKGtpbmQpIHtcbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5raW5kID09PSBraW5kICYmIGVsZW1lbnQucGxhY2VtZW50ID09PSBcIm93blwiKSB7XG4gICAgICAgICAgICAgICAgX2RlZmluZUNsYXNzRWxlbWVudChPLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfZGVmaW5lQ2xhc3NFbGVtZW50KHJlY2VpdmVyLCBlbGVtZW50KSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBlbGVtZW50LmRlc2NyaXB0b3I7XG4gICAgaWYgKGVsZW1lbnQua2luZCA9PT0gXCJmaWVsZFwiKSB7XG4gICAgICAgIHZhciBpbml0aWFsaXplciA9IGVsZW1lbnQuaW5pdGlhbGl6ZXI7XG4gICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGUsXG4gICAgICAgICAgICB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZGVzY3JpcHRvci5jb25maWd1cmFibGUsXG4gICAgICAgICAgICB2YWx1ZTogaW5pdGlhbGl6ZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXRpYWxpemVyLmNhbGwocmVjZWl2ZXIpXG4gICAgICAgIH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwgZWxlbWVudC5rZXksIGRlc2NyaXB0b3IpO1xufVxuZnVuY3Rpb24gX2RlY29yYXRlQ2xhc3MoZWxlbWVudHMsIGRlY29yYXRvcnMpIHtcbiAgICB2YXIgbmV3RWxlbWVudHMgPSBbXTtcbiAgICB2YXIgZmluaXNoZXJzID0gW107XG4gICAgdmFyIHBsYWNlbWVudHMgPSB7XG4gICAgICAgIHN0YXRpYzogW10sXG4gICAgICAgIHByb3RvdHlwZTogW10sXG4gICAgICAgIG93bjogW11cbiAgICB9O1xuICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBfYWRkRWxlbWVudFBsYWNlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICB9KTtcbiAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFfaGFzRGVjb3JhdG9ycyhlbGVtZW50KSkgcmV0dXJuIG5ld0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIHZhciBlbGVtZW50RmluaXNoZXJzRXh0cmFzID0gX2RlY29yYXRlRWxlbWVudChlbGVtZW50LCBwbGFjZW1lbnRzKTtcbiAgICAgICAgbmV3RWxlbWVudHMucHVzaChlbGVtZW50RmluaXNoZXJzRXh0cmFzLmVsZW1lbnQpO1xuICAgICAgICBuZXdFbGVtZW50cy5wdXNoLmFwcGx5KG5ld0VsZW1lbnRzLCBlbGVtZW50RmluaXNoZXJzRXh0cmFzLmV4dHJhcyk7XG4gICAgICAgIGZpbmlzaGVycy5wdXNoLmFwcGx5KGZpbmlzaGVycywgZWxlbWVudEZpbmlzaGVyc0V4dHJhcy5maW5pc2hlcnMpO1xuICAgIH0pO1xuICAgIGlmICghZGVjb3JhdG9ycykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZWxlbWVudHM6IG5ld0VsZW1lbnRzLFxuICAgICAgICAgICAgZmluaXNoZXJzOiBmaW5pc2hlcnNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IF9kZWNvcmF0ZUNvbnN0cnVjdG9yKG5ld0VsZW1lbnRzLCBkZWNvcmF0b3JzKTtcbiAgICBmaW5pc2hlcnMucHVzaC5hcHBseShmaW5pc2hlcnMsIHJlc3VsdC5maW5pc2hlcnMpO1xuICAgIHJlc3VsdC5maW5pc2hlcnMgPSBmaW5pc2hlcnM7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMsIHNpbGVudCkge1xuICAgIHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07XG4gICAgaWYgKCFzaWxlbnQgJiYga2V5cy5pbmRleE9mKGVsZW1lbnQua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkR1cGxpY2F0ZWQgZWxlbWVudCAoXCIgKyBlbGVtZW50LmtleSArIFwiKVwiKTtcbiAgICB9XG4gICAga2V5cy5wdXNoKGVsZW1lbnQua2V5KTtcbn1cbmZ1bmN0aW9uIF9kZWNvcmF0ZUVsZW1lbnQoZWxlbWVudCwgcGxhY2VtZW50cykge1xuICAgIHZhciBleHRyYXMgPSBbXTtcbiAgICB2YXIgZmluaXNoZXJzID0gW107XG4gICAgZm9yKHZhciBkZWNvcmF0b3JzID0gZWxlbWVudC5kZWNvcmF0b3JzLCBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgIHZhciBrZXlzID0gcGxhY2VtZW50c1tlbGVtZW50LnBsYWNlbWVudF07XG4gICAgICAgIGtleXMuc3BsaWNlKGtleXMuaW5kZXhPZihlbGVtZW50LmtleSksIDEpO1xuICAgICAgICB2YXIgZWxlbWVudE9iamVjdCA9IF9mcm9tRWxlbWVudERlc2NyaXB0b3IoZWxlbWVudCk7XG4gICAgICAgIHZhciBlbGVtZW50RmluaXNoZXJFeHRyYXMgPSBfdG9FbGVtZW50RmluaXNoZXJFeHRyYXMoKDAsIGRlY29yYXRvcnNbaV0pKGVsZW1lbnRPYmplY3QpIHx8IGVsZW1lbnRPYmplY3QpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudEZpbmlzaGVyRXh0cmFzLmVsZW1lbnQ7XG4gICAgICAgIF9hZGRFbGVtZW50UGxhY2VtZW50KGVsZW1lbnQsIHBsYWNlbWVudHMpO1xuICAgICAgICBpZiAoZWxlbWVudEZpbmlzaGVyRXh0cmFzLmZpbmlzaGVyKSB7XG4gICAgICAgICAgICBmaW5pc2hlcnMucHVzaChlbGVtZW50RmluaXNoZXJFeHRyYXMuZmluaXNoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdFeHRyYXMgPSBlbGVtZW50RmluaXNoZXJFeHRyYXMuZXh0cmFzO1xuICAgICAgICBpZiAobmV3RXh0cmFzKSB7XG4gICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgbmV3RXh0cmFzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBfYWRkRWxlbWVudFBsYWNlbWVudChuZXdFeHRyYXNbal0sIHBsYWNlbWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXh0cmFzLnB1c2guYXBwbHkoZXh0cmFzLCBuZXdFeHRyYXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGZpbmlzaGVyczogZmluaXNoZXJzLFxuICAgICAgICBleHRyYXM6IGV4dHJhc1xuICAgIH07XG59XG5mdW5jdGlvbiBfZGVjb3JhdGVDb25zdHJ1Y3RvcihlbGVtZW50cywgZGVjb3JhdG9ycykge1xuICAgIHZhciBmaW5pc2hlcnMgPSBbXTtcbiAgICBmb3IodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgdmFyIG9iaiA9IF9mcm9tQ2xhc3NEZXNjcmlwdG9yKGVsZW1lbnRzKTtcbiAgICAgICAgdmFyIGVsZW1lbnRzQW5kRmluaXNoZXIgPSBfdG9DbGFzc0Rlc2NyaXB0b3IoKDAsIGRlY29yYXRvcnNbaV0pKG9iaikgfHwgb2JqKTtcbiAgICAgICAgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZmluaXNoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmluaXNoZXJzLnB1c2goZWxlbWVudHNBbmRGaW5pc2hlci5maW5pc2hlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnRzQW5kRmluaXNoZXIuZWxlbWVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBlbGVtZW50c0FuZEZpbmlzaGVyLmVsZW1lbnRzO1xuICAgICAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGorKyl7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBrID0gaiArIDE7IGsgPCBlbGVtZW50cy5sZW5ndGg7IGsrKyl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50c1tqXS5rZXkgPT09IGVsZW1lbnRzW2tdLmtleSAmJiBlbGVtZW50c1tqXS5wbGFjZW1lbnQgPT09IGVsZW1lbnRzW2tdLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkR1cGxpY2F0ZWQgZWxlbWVudCAoXCIgKyBlbGVtZW50c1tqXS5rZXkgKyBcIilcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgICBmaW5pc2hlcnM6IGZpbmlzaGVyc1xuICAgIH07XG59XG5mdW5jdGlvbiBfZnJvbUVsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnQpIHtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgICBraW5kOiBlbGVtZW50LmtpbmQsXG4gICAgICAgIGtleTogZWxlbWVudC5rZXksXG4gICAgICAgIHBsYWNlbWVudDogZWxlbWVudC5wbGFjZW1lbnQsXG4gICAgICAgIGRlc2NyaXB0b3I6IGVsZW1lbnQuZGVzY3JpcHRvclxuICAgIH07XG4gICAgdmFyIGRlc2MgPSB7XG4gICAgICAgIHZhbHVlOiBcIkRlc2NyaXB0b3JcIixcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpO1xuICAgIGlmIChlbGVtZW50LmtpbmQgPT09IFwiZmllbGRcIikgb2JqLmluaXRpYWxpemVyID0gZWxlbWVudC5pbml0aWFsaXplcjtcbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX3RvRWxlbWVudERlc2NyaXB0b3JzKGVsZW1lbnRPYmplY3RzKSB7XG4gICAgaWYgKGVsZW1lbnRPYmplY3RzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICByZXR1cm4gKDAsIF90b0FycmF5KS5kZWZhdWx0KGVsZW1lbnRPYmplY3RzKS5tYXAoZnVuY3Rpb24oZWxlbWVudE9iamVjdCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IF90b0VsZW1lbnREZXNjcmlwdG9yKGVsZW1lbnRPYmplY3QpO1xuICAgICAgICBfZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImZpbmlzaGVyXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpO1xuICAgICAgICBfZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImV4dHJhc1wiLCBcIkFuIGVsZW1lbnQgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBfdG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KSB7XG4gICAgdmFyIGtpbmQgPSBTdHJpbmcoZWxlbWVudE9iamVjdC5raW5kKTtcbiAgICBpZiAoa2luZCAhPT0gXCJtZXRob2RcIiAmJiBraW5kICE9PSBcImZpZWxkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQW4gZWxlbWVudCBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIGVpdGhlciBcIm1ldGhvZFwiIG9yJyArICcgXCJmaWVsZFwiLCBidXQgYSBkZWNvcmF0b3IgY3JlYXRlZCBhbiBlbGVtZW50IGRlc2NyaXB0b3Igd2l0aCcgKyAnIC5raW5kIFwiJyArIGtpbmQgKyAnXCInKTtcbiAgICB9XG4gICAgdmFyIGtleSA9ICgwLCBfdG9Qcm9wZXJ0eUtleSkuZGVmYXVsdChlbGVtZW50T2JqZWN0LmtleSk7XG4gICAgdmFyIHBsYWNlbWVudCA9IFN0cmluZyhlbGVtZW50T2JqZWN0LnBsYWNlbWVudCk7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gXCJzdGF0aWNcIiAmJiBwbGFjZW1lbnQgIT09IFwicHJvdG90eXBlXCIgJiYgcGxhY2VtZW50ICE9PSBcIm93blwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FuIGVsZW1lbnQgZGVzY3JpcHRvclxcJ3MgLnBsYWNlbWVudCBwcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZiBcInN0YXRpY1wiLCcgKyAnIFwicHJvdG90eXBlXCIgb3IgXCJvd25cIiwgYnV0IGEgZGVjb3JhdG9yIGNyZWF0ZWQgYW4gZWxlbWVudCBkZXNjcmlwdG9yJyArICcgd2l0aCAucGxhY2VtZW50IFwiJyArIHBsYWNlbWVudCArICdcIicpO1xuICAgIH1cbiAgICB2YXIgZGVzY3JpcHRvciA9IGVsZW1lbnRPYmplY3QuZGVzY3JpcHRvcjtcbiAgICBfZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImVsZW1lbnRzXCIsIFwiQW4gZWxlbWVudCBkZXNjcmlwdG9yXCIpO1xuICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgIGRlc2NyaXB0b3I6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICB9LCBkZXNjcmlwdG9yKVxuICAgIH07XG4gICAgaWYgKGtpbmQgIT09IFwiZmllbGRcIikge1xuICAgICAgICBfZGlzYWxsb3dQcm9wZXJ0eShlbGVtZW50T2JqZWN0LCBcImluaXRpYWxpemVyXCIsIFwiQSBtZXRob2QgZGVzY3JpcHRvclwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfZGlzYWxsb3dQcm9wZXJ0eShkZXNjcmlwdG9yLCBcImdldFwiLCBcIlRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yIG9mIGEgZmllbGQgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgX2Rpc2FsbG93UHJvcGVydHkoZGVzY3JpcHRvciwgXCJzZXRcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7XG4gICAgICAgIF9kaXNhbGxvd1Byb3BlcnR5KGRlc2NyaXB0b3IsIFwidmFsdWVcIiwgXCJUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBvZiBhIGZpZWxkIGRlc2NyaXB0b3JcIik7XG4gICAgICAgIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPSBlbGVtZW50T2JqZWN0LmluaXRpYWxpemVyO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmZ1bmN0aW9uIF90b0VsZW1lbnRGaW5pc2hlckV4dHJhcyhlbGVtZW50T2JqZWN0KSB7XG4gICAgdmFyIGVsZW1lbnQgPSBfdG9FbGVtZW50RGVzY3JpcHRvcihlbGVtZW50T2JqZWN0KTtcbiAgICB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KGVsZW1lbnRPYmplY3QsIFwiZmluaXNoZXJcIik7XG4gICAgdmFyIGV4dHJhcyA9IF90b0VsZW1lbnREZXNjcmlwdG9ycyhlbGVtZW50T2JqZWN0LmV4dHJhcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZmluaXNoZXI6IGZpbmlzaGVyLFxuICAgICAgICBleHRyYXM6IGV4dHJhc1xuICAgIH07XG59XG5mdW5jdGlvbiBfZnJvbUNsYXNzRGVzY3JpcHRvcihlbGVtZW50cykge1xuICAgIHZhciBvYmogPSB7XG4gICAgICAgIGtpbmQ6IFwiY2xhc3NcIixcbiAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLm1hcChfZnJvbUVsZW1lbnREZXNjcmlwdG9yKVxuICAgIH07XG4gICAgdmFyIGRlc2MgPSB7XG4gICAgICAgIHZhbHVlOiBcIkRlc2NyaXB0b3JcIixcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBTeW1ib2wudG9TdHJpbmdUYWcsIGRlc2MpO1xuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfdG9DbGFzc0Rlc2NyaXB0b3Iob2JqKSB7XG4gICAgdmFyIGtpbmQgPSBTdHJpbmcob2JqLmtpbmQpO1xuICAgIGlmIChraW5kICE9PSBcImNsYXNzXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBjbGFzcyBkZXNjcmlwdG9yXFwncyAua2luZCBwcm9wZXJ0eSBtdXN0IGJlIFwiY2xhc3NcIiwgYnV0IGEgZGVjb3JhdG9yJyArICcgY3JlYXRlZCBhIGNsYXNzIGRlc2NyaXB0b3Igd2l0aCAua2luZCBcIicgKyBraW5kICsgJ1wiJyk7XG4gICAgfVxuICAgIF9kaXNhbGxvd1Byb3BlcnR5KG9iaiwgXCJrZXlcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgX2Rpc2FsbG93UHJvcGVydHkob2JqLCBcInBsYWNlbWVudFwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICBfZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiZGVzY3JpcHRvclwiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICBfZGlzYWxsb3dQcm9wZXJ0eShvYmosIFwiaW5pdGlhbGl6ZXJcIiwgXCJBIGNsYXNzIGRlc2NyaXB0b3JcIik7XG4gICAgX2Rpc2FsbG93UHJvcGVydHkob2JqLCBcImV4dHJhc1wiLCBcIkEgY2xhc3MgZGVzY3JpcHRvclwiKTtcbiAgICB2YXIgZmluaXNoZXIgPSBfb3B0aW9uYWxDYWxsYWJsZVByb3BlcnR5KG9iaiwgXCJmaW5pc2hlclwiKTtcbiAgICB2YXIgZWxlbWVudHMgPSBfdG9FbGVtZW50RGVzY3JpcHRvcnMob2JqLmVsZW1lbnRzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXG4gICAgICAgIGZpbmlzaGVyOiBmaW5pc2hlclxuICAgIH07XG59XG5mdW5jdGlvbiBfZGlzYWxsb3dQcm9wZXJ0eShvYmosIG5hbWUsIG9iamVjdFR5cGUpIHtcbiAgICBpZiAob2JqW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihvYmplY3RUeXBlICsgXCIgY2FuJ3QgaGF2ZSBhIC5cIiArIG5hbWUgKyBcIiBwcm9wZXJ0eS5cIik7XG4gICAgfVxufVxuZnVuY3Rpb24gX29wdGlvbmFsQ2FsbGFibGVQcm9wZXJ0eShvYmosIG5hbWUpIHtcbiAgICB2YXIgdmFsdWUgPSBvYmpbbmFtZV07XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkICdcIiArIG5hbWUgKyBcIicgdG8gYmUgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3J1bkNsYXNzRmluaXNoZXJzKGNvbnN0cnVjdG9yLCBmaW5pc2hlcnMpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZmluaXNoZXJzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIG5ld0NvbnN0cnVjdG9yID0gKDAsIGZpbmlzaGVyc1tpXSkoY29uc3RydWN0b3IpO1xuICAgICAgICBpZiAobmV3Q29uc3RydWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb25zdHJ1Y3RvciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpbmlzaGVycyBtdXN0IHJldHVybiBhIGNvbnN0cnVjdG9yLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gbmV3Q29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdHM7XG5mdW5jdGlvbiBfZGVmYXVsdHMob2JqLCBkZWZhdWx0cykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVmYXVsdHMpO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVmYXVsdHMsIGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25maWd1cmFibGUgJiYgb2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzO1xuZnVuY3Rpb24gX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaiwgZGVzY3MpIHtcbiAgICBmb3IodmFyIGtleSBpbiBkZXNjcyl7XG4gICAgICAgIHZhciBkZXNjID0gZGVzY3Nba2V5XTtcbiAgICAgICAgZGVzYy5jb25maWd1cmFibGUgPSBkZXNjLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIGRlc2Mud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICB2YXIgb2JqZWN0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZGVzY3MpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb2JqZWN0U3ltYm9scy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc3ltID0gb2JqZWN0U3ltYm9sc1tpXTtcbiAgICAgICAgICAgIHZhciBkZXNjID0gZGVzY3Nbc3ltXTtcbiAgICAgICAgICAgIGRlc2MuY29uZmlndXJhYmxlID0gZGVzYy5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzYykgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBzeW0sIGRlc2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZpbmVQcm9wZXJ0eTtcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZXh0ZW5kcztcbmZ1bmN0aW9uIGV4dGVuZHNfKCkge1xuICAgIGV4dGVuZHNfID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKXtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgcmV0dXJuIGV4dGVuZHNfLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICByZXR1cm4gZXh0ZW5kc18uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldDtcbnZhciBfc3VwZXJQcm9wQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3N1cGVyX3Byb3BfYmFzZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICAgICAgZ2V0ID0gUmVmbGVjdC5nZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0ID0gZnVuY3Rpb24gZ2V0MSh0YXJnZXQxLCBwcm9wZXJ0eTEsIHJlY2VpdmVyMSkge1xuICAgICAgICAgICAgdmFyIGJhc2UgPSAoMCwgX3N1cGVyUHJvcEJhc2UpLmRlZmF1bHQodGFyZ2V0MSwgcHJvcGVydHkxKTtcbiAgICAgICAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5MSk7XG4gICAgICAgICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcjEgfHwgdGFyZ2V0MSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGdldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcik7XG59XG5mdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2lldmVyKSB7XG4gICAgcmV0dXJuIGdldCh0YXJnZXQsIHByb3BlcnR5LCByZWNpZXZlcik7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRQcm90b3R5cGVPZjtcbmZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKG8pIHtcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mMShvMSkge1xuICAgICAgICByZXR1cm4gbzEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvMSk7XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBnZXRQcm90b3R5cGVPZihvKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2luaGVyaXRzO1xudmFyIF9zZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3NldF9wcm90b3R5cGVfb2ZcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSAoMCwgX3NldFByb3RvdHlwZU9mKS5kZWZhdWx0KHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2luaGVyaXRzTG9vc2U7XG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5O1xuZnVuY3Rpb24gX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkge1xuICAgIGlmICghZGVzY3JpcHRvcikgcmV0dXJuO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSxcbiAgICAgICAgd3JpdGFibGU6IGRlc2NyaXB0b3Iud3JpdGFibGUsXG4gICAgICAgIHZhbHVlOiBkZXNjcmlwdG9yLmluaXRpYWxpemVyID8gZGVzY3JpcHRvci5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwXG4gICAgfSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXI7XG5mdW5jdGlvbiBfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRpbmcgY2xhc3MgcHJvcGVydHkgZmFpbGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgJyArICdwcm9wb3NhbC1jbGFzcy1wcm9wZXJ0aWVzIGlzIGVuYWJsZWQgYW5kIHNldCB0byB1c2UgbG9vc2UgbW9kZS4gJyArICdUbyB1c2UgcHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpbiBzcGVjIG1vZGUgd2l0aCBkZWNvcmF0b3JzLCB3YWl0IGZvciAnICsgJ3RoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgZGVjb3JhdG9ycyBpbiBzdGFnZSAyLicpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfaW5zdGFuY2VvZjE7XG5mdW5jdGlvbiBfaW5zdGFuY2VvZihsZWZ0LCByaWdodCkge1xuICAgIGlmIChyaWdodCAhPSBudWxsICYmIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXSkge1xuICAgICAgICByZXR1cm4gcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXShsZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGVmdCBpbnN0YW5jZW9mIHJpZ2h0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9pbnN0YW5jZW9mMShsZWZ0LCByaWdodCkge1xuICAgIGlmIChyaWdodCAhPSBudWxsICYmIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXSkge1xuICAgICAgICByZXR1cm4gcmlnaHRbU3ltYm9sLmhhc0luc3RhbmNlXShsZWZ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2luc3RhbmNlb2YobGVmdCwgcmlnaHQpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHtcbiAgICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5ld09iaiA9IHtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9iaiAhPSBudWxsKSB7XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBvYmope1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9pc05hdGl2ZUZ1bmN0aW9uO1xuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0O1xuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfaXRlcmFibGVUb0FycmF5O1xuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gICAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2l0ZXJhYmxlVG9BcnJheUxpbWl0O1xuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgZm9yKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKXtcbiAgICAgICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2QgPSB0cnVlO1xuICAgICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9hcnI7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdExvb3NlO1xuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICBmb3IodmFyIF9pdGVyYXRvciA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZTspe1xuICAgICAgICBfYXJyLnB1c2goX3N0ZXAudmFsdWUpO1xuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBfYXJyO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfY3JlYXRlUmF3UmVhY3RFbGVtZW50O1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRTtcbmZ1bmN0aW9uIF9jcmVhdGVSYXdSZWFjdEVsZW1lbnQodHlwZSwgcHJvcHMsIGtleSwgY2hpbGRyZW4pIHtcbiAgICBpZiAoIVJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICBSRUFDVF9FTEVNRU5UX1RZUEUgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmZvciAmJiBTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSB8fCA2MDEwMztcbiAgICB9XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDM7XG4gICAgaWYgKCFwcm9wcyAmJiBjaGlsZHJlbkxlbmd0aCAhPT0gMCkge1xuICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiB2b2lkIDBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBmb3IodmFyIHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcyl7XG4gICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBkZWZhdWx0UHJvcHMgfHwge1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgY2hpbGRBcnJheSA9IG5ldyBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDNdO1xuICAgICAgICB9XG4gICAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAga2V5OiBrZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGtleSxcbiAgICAgICAgcmVmOiBudWxsLFxuICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgIF9vd25lcjogbnVsbFxuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9uZXdBcnJvd0NoZWNrO1xuZnVuY3Rpb24gX25ld0Fycm93Q2hlY2soaW5uZXJUaGlzLCBib3VuZFRoaXMpIHtcbiAgICBpZiAoaW5uZXJUaGlzICE9PSBib3VuZFRoaXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBpbnN0YW50aWF0ZSBhbiBhcnJvdyBmdW5jdGlvblwiKTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9ub25JdGVyYWJsZVJlc3Q7XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfbm9uSXRlcmFibGVTcHJlYWQ7XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfb2JqZWN0U3ByZWFkO1xudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2RlZmluZV9wcm9wZXJ0eVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzLCBfbG9vcCA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IF9hcmd1bWVudHNbaV0gIT0gbnVsbCA/IF9hcmd1bWVudHNbaV0gOiB7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbihzeW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAoMCwgX2RlZmluZVByb3BlcnR5KS5kZWZhdWx0KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylfbG9vcChpKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge1xuICAgIH07XG4gICAgdmFyIHRhcmdldCA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSkuZGVmYXVsdChzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgICB2YXIga2V5LCBpO1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICAgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge1xuICAgIH07XG4gICAgdmFyIHRhcmdldCA9IHtcbiAgICB9O1xuICAgIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICB2YXIga2V5LCBpO1xuICAgIGZvcihpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjtcbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fYXNzZXJ0X3RoaXNfaW5pdGlhbGl6ZWRcIikpO1xudmFyIF90eXBlT2YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL190eXBlX29mXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoY2FsbCAmJiAoKDAsIF90eXBlT2YpLmRlZmF1bHQoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICAgICAgcmV0dXJuIGNhbGw7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZCkuZGVmYXVsdChzZWxmKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWRPbmx5RXJyb3I7XG5mdW5jdGlvbiBfcmVhZE9ubHlFcnJvcihuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyByZWFkLW9ubHlcIik7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9zZXQ7XG52YXIgX2RlZmluZVByb3BlcnR5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fZGVmaW5lX3Byb3BlcnR5XCIpKTtcbnZhciBfc3VwZXJQcm9wQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3N1cGVyX3Byb3BfYmFzZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3Quc2V0KSB7XG4gICAgICAgIHNldCA9IFJlZmxlY3Quc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldCA9IGZ1bmN0aW9uIHNldDEodGFyZ2V0MSwgcHJvcGVydHkxLCB2YWx1ZTEsIHJlY2VpdmVyMSkge1xuICAgICAgICAgICAgdmFyIGJhc2UgPSAoMCwgX3N1cGVyUHJvcEJhc2UpLmRlZmF1bHQodGFyZ2V0MSwgcHJvcGVydHkxKTtcbiAgICAgICAgICAgIHZhciBkZXNjO1xuICAgICAgICAgICAgaWYgKGJhc2UpIHtcbiAgICAgICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eTEpO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgICAgICAgICAgICAgICBkZXNjLnNldC5jYWxsKHJlY2VpdmVyMSwgdmFsdWUxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVjZWl2ZXIxLCBwcm9wZXJ0eTEpO1xuICAgICAgICAgICAgaWYgKGRlc2MpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRlc2Mud3JpdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZXNjLnZhbHVlID0gdmFsdWUxO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlcjEsIHByb3BlcnR5MSwgZGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkpLmRlZmF1bHQocmVjZWl2ZXIxLCBwcm9wZXJ0eTEsIHZhbHVlMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHNldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xufVxuZnVuY3Rpb24gX3NldCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIsIGlzU3RyaWN0KSB7XG4gICAgdmFyIHMgPSBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHJlY2VpdmVyIHx8IHRhcmdldCk7XG4gICAgaWYgKCFzICYmIGlzU3RyaWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIHNldCBwcm9wZXJ0eScpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9zZXRQcm90b3R5cGVPZjtcbmZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBzZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZjEobzEsIHAxKSB7XG4gICAgICAgIG8xLl9fcHJvdG9fXyA9IHAxO1xuICAgICAgICByZXR1cm4gbzE7XG4gICAgfTtcbiAgICByZXR1cm4gc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIHJldHVybiBzZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3NraXBGaXJzdEdlbmVyYXRvck5leHQ7XG5mdW5jdGlvbiBfc2tpcEZpcnN0R2VuZXJhdG9yTmV4dChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGl0ID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgaXQubmV4dCgpO1xuICAgICAgICByZXR1cm4gaXQ7XG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3NsaWNlZFRvQXJyYXk7XG52YXIgX2FycmF5V2l0aEhvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fYXJyYXlfd2l0aF9ob2xlc1wiKSk7XG52YXIgX2l0ZXJhYmxlVG9BcnJheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2l0ZXJhYmxlX3RvX2FycmF5XCIpKTtcbnZhciBfbm9uSXRlcmFibGVSZXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fbm9uX2l0ZXJhYmxlX3Jlc3RcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gICAgcmV0dXJuICgwLCBfYXJyYXlXaXRoSG9sZXMpLmRlZmF1bHQoYXJyKSB8fCAoMCwgX2l0ZXJhYmxlVG9BcnJheSkuZGVmYXVsdChhcnIsIGkpIHx8ICgwLCBfbm9uSXRlcmFibGVSZXN0KS5kZWZhdWx0KCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9zbGljZWRUb0FycmF5TG9vc2U7XG52YXIgX2FycmF5V2l0aEhvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fYXJyYXlfd2l0aF9ob2xlc1wiKSk7XG52YXIgX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19pdGVyYWJsZV90b19hcnJheV9saW1pdF9sb29zZVwiKSk7XG52YXIgX25vbkl0ZXJhYmxlUmVzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX25vbl9pdGVyYWJsZV9yZXN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5TG9vc2UoYXJyLCBpKSB7XG4gICAgcmV0dXJuICgwLCBfYXJyYXlXaXRoSG9sZXMpLmRlZmF1bHQoYXJyKSB8fCAoMCwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UpLmRlZmF1bHQoYXJyLCBpKSB8fCAoMCwgX25vbkl0ZXJhYmxlUmVzdCkuZGVmYXVsdCgpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfc3VwZXJQcm9wQmFzZTtcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19nZXRfcHJvdG90eXBlX29mXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICB3aGlsZSghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKXtcbiAgICAgICAgb2JqZWN0ID0gKDAsIF9nZXRQcm90b3R5cGVPZikuZGVmYXVsdChvYmplY3QpO1xuICAgICAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDtcbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoc3RyaW5ncywgcmF3KSB7XG4gICAgaWYgKCFyYXcpIHtcbiAgICAgICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywge1xuICAgICAgICByYXc6IHtcbiAgICAgICAgICAgIHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdylcbiAgICAgICAgfVxuICAgIH0pKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlO1xuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKHN0cmluZ3MsIHJhdykge1xuICAgIGlmICghcmF3KSB7XG4gICAgICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gICAgfVxuICAgIHN0cmluZ3MucmF3ID0gcmF3O1xuICAgIHJldHVybiBzdHJpbmdzO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfdGhyb3c7XG5mdW5jdGlvbiBfdGhyb3coZSkge1xuICAgIHRocm93IGU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF90b0FycmF5O1xudmFyIF9hcnJheVdpdGhIb2xlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2FycmF5X3dpdGhfaG9sZXNcIikpO1xudmFyIF9pdGVyYWJsZVRvQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19pdGVyYWJsZV90b19hcnJheVwiKSk7XG52YXIgX25vbkl0ZXJhYmxlUmVzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX25vbl9pdGVyYWJsZV9yZXN0XCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF90b0FycmF5KGFycikge1xuICAgIHJldHVybiAoMCwgX2FycmF5V2l0aEhvbGVzKS5kZWZhdWx0KGFycikgfHwgKDAsIF9pdGVyYWJsZVRvQXJyYXkpLmRlZmF1bHQoYXJyKSB8fCAoMCwgX25vbkl0ZXJhYmxlUmVzdCkuZGVmYXVsdCgpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfdG9Db25zdW1hYmxlQXJyYXk7XG52YXIgX2FycmF5V2l0aG91dEhvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9fYXJyYXlfd2l0aG91dF9ob2xlc1wiKSk7XG52YXIgX2l0ZXJhYmxlVG9BcnJheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2l0ZXJhYmxlX3RvX2FycmF5XCIpKTtcbnZhciBfbm9uSXRlcmFibGVTcHJlYWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19ub25faXRlcmFibGVfc3ByZWFkXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgICByZXR1cm4gKDAsIF9hcnJheVdpdGhvdXRIb2xlcykuZGVmYXVsdChhcnIpIHx8ICgwLCBfaXRlcmFibGVUb0FycmF5KS5kZWZhdWx0KGFycikgfHwgKDAsIF9ub25JdGVyYWJsZVNwcmVhZCkuZGVmYXVsdCgpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfdG9QcmltaXRpdmU7XG52YXIgX3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3R5cGVfb2ZcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7XG4gICAgaWYgKCgwLCBfdHlwZU9mKS5kZWZhdWx0KGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICAgIHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpO1xuICAgICAgICBpZiAoKDAsIF90eXBlT2YpLmRlZmF1bHQocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX3RvUHJvcGVydHlLZXk7XG52YXIgX3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3R5cGVfb2ZcIikpO1xudmFyIF90b1ByaW1pdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3RvX3ByaW1pdGl2ZVwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgICB2YXIga2V5ID0gKDAsIF90b1ByaW1pdGl2ZSkuZGVmYXVsdChhcmcsIFwic3RyaW5nXCIpO1xuICAgIHJldHVybiAoMCwgX3R5cGVPZikuZGVmYXVsdChrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF90eXBlb2YxO1xudmFyIF90eXBlb2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5mdW5jdGlvbiBfdHlwZW9mMShvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufVxuO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfd3JhcEFzeW5jR2VuZXJhdG9yO1xudmFyIF9hc3luY0dlbmVyYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2FzeW5jX2dlbmVyYXRvclwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG59XG5mdW5jdGlvbiBfd3JhcEFzeW5jR2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IF9hc3luY0dlbmVyYXRvci5kZWZhdWx0KGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF93cmFwTmF0aXZlU3VwZXI7XG52YXIgX2NvbnN0cnVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2NvbnN0cnVjdFwiKSk7XG52YXIgX2lzTmF0aXZlRnVuY3Rpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL19pc19uYXRpdmVfZnVuY3Rpb25cIikpO1xudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX2dldF9wcm90b3R5cGVfb2ZcIikpO1xudmFyIF9zZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vX3NldF9wcm90b3R5cGVfb2ZcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcbiAgICB3cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiB3cmFwTmF0aXZlU3VwZXIxKENsYXNzMSkge1xuICAgICAgICB2YXIgV3JhcHBlciA9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9jb25zdHJ1Y3QpLmRlZmF1bHQoQ2xhc3MxLCBhcmd1bWVudHMsICgwLCBfZ2V0UHJvdG90eXBlT2YpLmRlZmF1bHQodGhpcykuY29uc3RydWN0b3IpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoQ2xhc3MxID09PSBudWxsIHx8ICEoMCwgX2lzTmF0aXZlRnVuY3Rpb24pLmRlZmF1bHQoQ2xhc3MxKSkgcmV0dXJuIENsYXNzMTtcbiAgICAgICAgaWYgKHR5cGVvZiBDbGFzczEgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzczEpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzczEpO1xuICAgICAgICAgICAgX2NhY2hlLnNldChDbGFzczEsIFdyYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzczEucHJvdG90eXBlLCB7XG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgwLCBfc2V0UHJvdG90eXBlT2YpLmRlZmF1bHQoV3JhcHBlciwgQ2xhc3MxKTtcbiAgICB9O1xuICAgIHJldHVybiB3cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIHJldHVybiB3cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhcHBseURlY29yYXRlZERlc2NyaXB0b3JcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFycmF5V2l0aEhvbGVzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfYXJyYXlXaXRoSG9sZXMuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFycmF5V2l0aG91dEhvbGVzXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzc2VydFRoaXNJbml0aWFsaXplZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXN5bmNHZW5lcmF0b3JcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9hc3luY0dlbmVyYXRvci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXN5bmNHZW5lcmF0b3JEZWxlZ2F0ZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2FzeW5jR2VuZXJhdG9yRGVsZWdhdGUuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFzeW5jSXRlcmF0b3JcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9hc3luY0l0ZXJhdG9yLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhc3luY1RvR2VuZXJhdG9yXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXdhaXRBc3luY0dlbmVyYXRvclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2F3YWl0QXN5bmNHZW5lcmF0b3IuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImF3YWl0VmFsdWVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9hd2FpdFZhbHVlLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc0NhbGxDaGVja1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzQ2FsbENoZWNrLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc05hbWVURFpFcnJvclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzTmFtZVRkekVycm9yLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc1ByaXZhdGVGaWVsZEdldFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc1ByaXZhdGVGaWVsZFNldFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc1ByaXZhdGVNZXRob2RHZXRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVNZXRob2RHZXQuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNsYXNzUHJpdmF0ZU1ldGhvZFNldFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NsYXNzUHJpdmF0ZU1ldGhvZFNldC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjR2V0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NTdGF0aWNQcml2YXRlRmllbGRTcGVjR2V0LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbnN0cnVjdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NvbnN0cnVjdC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQ2xhc3NcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVDbGFzcy5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb3JhdGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWNvcmF0ZS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0cy5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmaW5lRW51bWVyYWJsZVByb3BlcnRpZXNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZpbmVFbnVtZXJhYmxlUHJvcGVydGllcy5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmaW5lUHJvcGVydHlcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXh0ZW5kc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2dldC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UHJvdG90eXBlT2ZcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZi5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5oZXJpdHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pbmhlcml0cy5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW5oZXJpdHNMb29zZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2luaGVyaXRzTG9vc2UuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImluaXRpYWxpemVyRGVmaW5lUHJvcGVydHlcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pbml0aWFsaXplckRlZmluZVByb3BlcnR5LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpbml0aWFsaXplcldhcm5pbmdIZWxwZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pbml0aWFsaXplcldhcm5pbmdIZWxwZXIuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9pbnN0YW5jZW9mXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaW5zdGFuY2VvZi5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzTmF0aXZlRnVuY3Rpb25cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pc05hdGl2ZUZ1bmN0aW9uLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpdGVyYWJsZVRvQXJyYXlcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pdGVyYWJsZVRvQXJyYXkuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIml0ZXJhYmxlVG9BcnJheUxpbWl0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaXRlcmFibGVUb0FycmF5TGltaXQuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIml0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9pdGVyYWJsZVRvQXJyYXlMaW1pdExvb3NlLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJqc3hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9qc3guZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5ld0Fycm93Q2hlY2tcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9uZXdBcnJvd0NoZWNrLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJub25JdGVyYWJsZVJlc3RcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9ub25JdGVyYWJsZVJlc3QuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vbkl0ZXJhYmxlU3ByZWFkXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfbm9uSXRlcmFibGVTcHJlYWQuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9iamVjdFNwcmVhZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RXaXRob3V0UHJvcGVydGllcy5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWFkT25seUVycm9yXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVhZE9ubHlFcnJvci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfc2V0LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRQcm90b3R5cGVPZlwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwRmlyc3RHZW5lcmF0b3JOZXh0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfc2tpcEZpcnN0R2VuZXJhdG9yTmV4dC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2xpY2VkVG9BcnJheVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NsaWNlZFRvQXJyYXkuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNsaWNlZFRvQXJyYXlMb29zZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3NsaWNlZFRvQXJyYXlMb29zZS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3VwZXJQcm9wQmFzZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyUHJvcEJhc2UuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRhZ2dlZFRlbXBsYXRlTGl0ZXJhbFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX3Rocm93XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhyb3cuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQXJyYXlcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90b0FycmF5LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0NvbnN1bWFibGVBcnJheVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RvQ29uc3VtYWJsZUFycmF5LmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1ByaW1pdGl2ZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RvUHJpbWl0aXZlLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1Byb3BlcnR5S2V5XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdG9Qcm9wZXJ0eUtleS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHlwZU9mXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdHlwZU9mLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3cmFwQXN5bmNHZW5lcmF0b3JcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF93cmFwQXN5bmNHZW5lcmF0b3IuZGVmYXVsdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndyYXBOYXRpdmVTdXBlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlU3VwZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVTdXBlci5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0LmRlZmF1bHQ7XG4gICAgfVxufSk7XG52YXIgX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19hcHBseV9kZWNvcmF0ZWRfZGVzY3JpcHRvclwiKSk7XG52YXIgX2FycmF5V2l0aEhvbGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2FycmF5X3dpdGhfaG9sZXNcIikpO1xudmFyIF9hcnJheVdpdGhvdXRIb2xlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19hcnJheV93aXRob3V0X2hvbGVzXCIpKTtcbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2Fzc2VydF90aGlzX2luaXRpYWxpemVkXCIpKTtcbnZhciBfYXN5bmNHZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fYXN5bmNfZ2VuZXJhdG9yXCIpKTtcbnZhciBfYXN5bmNHZW5lcmF0b3JEZWxlZ2F0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19hc3luY19nZW5lcmF0b3JfZGVsZWdhdGVcIikpO1xudmFyIF9hc3luY0l0ZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2FzeW5jX2l0ZXJhdG9yXCIpKTtcbnZhciBfYXN5bmNUb0dlbmVyYXRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19hc3luY190b19nZW5lcmF0b3JcIikpO1xudmFyIF9hd2FpdEFzeW5jR2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2F3YWl0X2FzeW5jX2dlbmVyYXRvclwiKSk7XG52YXIgX2F3YWl0VmFsdWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fYXdhaXRfdmFsdWVcIikpO1xudmFyIF9jbGFzc0NhbGxDaGVjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19jbGFzc19jYWxsX2NoZWNrXCIpKTtcbnZhciBfY2xhc3NOYW1lVGR6RXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY2xhc3NfbmFtZV90ZHpfZXJyb3JcIikpO1xudmFyIF9jbGFzc1ByaXZhdGVGaWVsZEdldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19jbGFzc19wcml2YXRlX2ZpZWxkX2dldFwiKSk7XG52YXIgX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2NsYXNzX3ByaXZhdGVfZmllbGRfbG9vc2VfYmFzZVwiKSk7XG52YXIgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2NsYXNzX3ByaXZhdGVfZmllbGRfc2V0XCIpKTtcbnZhciBfY2xhc3NQcml2YXRlTWV0aG9kR2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2NsYXNzX3ByaXZhdGVfbWV0aG9kX2dldFwiKSk7XG52YXIgX2NsYXNzUHJpdmF0ZU1ldGhvZFNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19jbGFzc19wcml2YXRlX21ldGhvZF9zZXRcIikpO1xudmFyIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNHZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY2xhc3Nfc3RhdGljX3ByaXZhdGVfZmllbGRfc3BlY19nZXRcIikpO1xudmFyIF9jbGFzc1N0YXRpY1ByaXZhdGVGaWVsZFNwZWNTZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY2xhc3Nfc3RhdGljX3ByaXZhdGVfZmllbGRfc3BlY19zZXRcIikpO1xudmFyIF9jb25zdHJ1Y3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY29uc3RydWN0XCIpKTtcbnZhciBfY3JlYXRlQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY3JlYXRlX2NsYXNzXCIpKTtcbnZhciBfZGVjb3JhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fZGVjb3JhdGVcIikpO1xudmFyIF9kZWZhdWx0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19kZWZhdWx0c1wiKSk7XG52YXIgX2RlZmluZUVudW1lcmFibGVQcm9wZXJ0aWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2RlZmluZV9lbnVtZXJhYmxlX3Byb3BlcnRpZXNcIikpO1xudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19kZWZpbmVfcHJvcGVydHlcIikpO1xudmFyIF9leHRlbmRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2V4dGVuZHNcIikpO1xudmFyIF9nZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fZ2V0XCIpKTtcbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fZ2V0X3Byb3RvdHlwZV9vZlwiKSk7XG52YXIgX2luaGVyaXRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2luaGVyaXRzXCIpKTtcbnZhciBfaW5oZXJpdHNMb29zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19pbmhlcml0c19sb29zZVwiKSk7XG52YXIgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9faW5pdGlhbGl6ZXJfZGVmaW5lX3Byb3BlcnR5XCIpKTtcbnZhciBfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2luaXRpYWxpemVyX3dhcm5pbmdfaGVscGVyXCIpKTtcbnZhciBfaW5zdGFuY2VvZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19pbnN0YW5jZW9mXCIpKTtcbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdFwiKSk7XG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9faW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkXCIpKTtcbnZhciBfaXNOYXRpdmVGdW5jdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19pc19uYXRpdmVfZnVuY3Rpb25cIikpO1xudmFyIF9pdGVyYWJsZVRvQXJyYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9faXRlcmFibGVfdG9fYXJyYXlcIikpO1xudmFyIF9pdGVyYWJsZVRvQXJyYXlMaW1pdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19pdGVyYWJsZV90b19hcnJheV9saW1pdFwiKSk7XG52YXIgX2l0ZXJhYmxlVG9BcnJheUxpbWl0TG9vc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9faXRlcmFibGVfdG9fYXJyYXlfbGltaXRfbG9vc2VcIikpO1xudmFyIF9qc3ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fanN4XCIpKTtcbnZhciBfbmV3QXJyb3dDaGVjayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19uZXdfYXJyb3dfY2hlY2tcIikpO1xudmFyIF9ub25JdGVyYWJsZVJlc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fbm9uX2l0ZXJhYmxlX3Jlc3RcIikpO1xudmFyIF9ub25JdGVyYWJsZVNwcmVhZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19ub25faXRlcmFibGVfc3ByZWFkXCIpKTtcbnZhciBfb2JqZWN0U3ByZWFkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX29iamVjdF9zcHJlYWRcIikpO1xudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzXCIpKTtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19vYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzX2xvb3NlXCIpKTtcbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19wb3NzaWJsZV9jb25zdHJ1Y3Rvcl9yZXR1cm5cIikpO1xudmFyIF9yZWFkT25seUVycm9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3JlYWRfb25seV9lcnJvclwiKSk7XG52YXIgX3NldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19zZXRcIikpO1xudmFyIF9zZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19zZXRfcHJvdG90eXBlX29mXCIpKTtcbnZhciBfc2tpcEZpcnN0R2VuZXJhdG9yTmV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19za2lwX2ZpcnN0X2dlbmVyYXRvcl9uZXh0XCIpKTtcbnZhciBfc2xpY2VkVG9BcnJheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19zbGljZWRfdG9fYXJyYXlcIikpO1xudmFyIF9zbGljZWRUb0FycmF5TG9vc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fc2xpY2VkX3RvX2FycmF5X2xvb3NlXCIpKTtcbnZhciBfc3VwZXJQcm9wQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL19zdXBlcl9wcm9wX2Jhc2VcIikpO1xudmFyIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fdGFnZ2VkX3RlbXBsYXRlX2xpdGVyYWxcIikpO1xudmFyIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL190YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbF9sb29zZVwiKSk7XG52YXIgX3Rocm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3Rocm93XCIpKTtcbnZhciBfdG9BcnJheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL190b19hcnJheVwiKSk7XG52YXIgX3RvQ29uc3VtYWJsZUFycmF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3RvX2NvbnN1bWFibGVfYXJyYXlcIikpO1xudmFyIF90b1ByaW1pdGl2ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL190b19wcmltaXRpdmVcIikpO1xudmFyIF90b1Byb3BlcnR5S2V5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3RvX3Byb3BlcnR5X2tleVwiKSk7XG52YXIgX3R5cGVPZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQyKHJlcXVpcmUoXCIuL190eXBlX29mXCIpKTtcbnZhciBfd3JhcEFzeW5jR2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3dyYXBfYXN5bmNfZ2VuZXJhdG9yXCIpKTtcbnZhciBfd3JhcE5hdGl2ZVN1cGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX3dyYXBfbmF0aXZlX3N1cGVyXCIpKTtcbnZhciBfY3JlYXRlU3VwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihyZXF1aXJlKFwiLi9fY3JlYXRlX3N1cGVyXCIpKTtcbnZhciBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDIocmVxdWlyZShcIi4vX2lzX25hdGl2ZV9yZWZsZWN0X2NvbnN0cnVjdFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0MihvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuIiwidmFyICQ2bVU4dyRzd2NoZWxwZXJzID0gcmVxdWlyZShcIkBzd2MvaGVscGVyc1wiKTtcbnZhciAkNm1VOHckanVzdGV4dGVuZCA9IHJlcXVpcmUoXCJqdXN0LWV4dGVuZFwiKTtcblxuZnVuY3Rpb24gJHBhcmNlbCRpbnRlcm9wRGVmYXVsdChhKSB7XG4gIHJldHVybiBhICYmIGEuX19lc01vZHVsZSA/IGEuZGVmYXVsdCA6IGE7XG59XG5mdW5jdGlvbiAkcGFyY2VsJGRlZmluZUludGVyb3BGbGFnKGEpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdfX2VzTW9kdWxlJywge3ZhbHVlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbn1cbmZ1bmN0aW9uICRwYXJjZWwkZXhwb3J0KGUsIG4sIHYsIHMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIHNldDogcywgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG59XG5cbiRwYXJjZWwkZGVmaW5lSW50ZXJvcEZsYWcobW9kdWxlLmV4cG9ydHMpO1xuXG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzk7IH0pO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiRHJvcHpvbmVcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOTsgfSk7XG5cblxuXG52YXIgJGIxZDE3Y2ZiMWQxNWMzNmEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZnVuY3Rpb24gJGIxZDE3Y2ZiMWQxNWMzNmEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSgpIHtcbiAgICAgICAgJDZtVTh3JHN3Y2hlbHBlcnMuY2xhc3NDYWxsQ2hlY2sodGhpcywgJGIxZDE3Y2ZiMWQxNWMzNmEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4gICAgfVxuICAgICQ2bVU4dyRzd2NoZWxwZXJzLmNyZWF0ZUNsYXNzKCRiMWQxN2NmYjFkMTVjMzZhJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzksIFtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gQWRkIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBnaXZlbiBldmVudFxuICAgICAgICAgICAga2V5OiBcIm9uXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGZuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuYW1lc3BhY2UgZm9yIHRoaXMgZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrc1tldmVudF0pIHRoaXMuX2NhbGxiYWNrc1tldmVudF0gPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3NbZXZlbnRdLnB1c2goZm4pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiZW1pdFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5Kyspe1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrcykgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBjYWxsYmFja3NbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGEgY29ycmVzcG9uZGluZyBET00gZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudCh0aGlzLm1ha2VFdmVudChcImRyb3B6b25lOlwiICsgZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogYXJnc1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcIm1ha2VFdmVudFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VFdmVudChldmVudE5hbWUsIGRldGFpbCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogZGV0YWlsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgMTEgc3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQvQ3VzdG9tRXZlbnRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnROYW1lLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZvciBnaXZlbiBldmVudC4gSWYgZm4gaXMgbm90IHByb3ZpZGVkLCBhbGwgZXZlbnRcbiAgICAgICAgICAgIC8vIGxpc3RlbmVycyBmb3IgdGhhdCBldmVudCB3aWxsIGJlIHJlbW92ZWQuIElmIG5laXRoZXIgaXMgcHJvdmlkZWQsIGFsbFxuICAgICAgICAgICAgLy8gZXZlbnQgbGlzdGVuZXJzIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgICAgICAgIGtleTogXCJvZmZcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGZuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2tzKSByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayA9PT0gZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIHJldHVybiAkYjFkMTdjZmIxZDE1YzM2YSRleHBvcnQkMmUyYmNkODczOWFlMDM5O1xufSgpO1xuXG5cblxudmFyICQ2OWM2MTg4OGNjMWY0YzU3JGV4cG9ydHMgPSB7fTtcbiQ2OWM2MTg4OGNjMWY0YzU3JGV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImR6LXByZXZpZXcgZHotZmlsZS1wcmV2aWV3XFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImR6LWltYWdlXFxcIj48aW1nIGRhdGEtZHotdGh1bWJuYWlsPVxcXCJcXFwiPjwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiZHotZGV0YWlsc1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImR6LXNpemVcXFwiPjxzcGFuIGRhdGEtZHotc2l6ZT1cXFwiXFxcIj48L3NwYW4+PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImR6LWZpbGVuYW1lXFxcIj48c3BhbiBkYXRhLWR6LW5hbWU9XFxcIlxcXCI+PC9zcGFuPjwvZGl2PlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJkei1wcm9ncmVzc1xcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJkei11cGxvYWRcXFwiIGRhdGEtZHotdXBsb2FkcHJvZ3Jlc3M9XFxcIlxcXCI+PC9zcGFuPlxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJkei1lcnJvci1tZXNzYWdlXFxcIj48c3BhbiBkYXRhLWR6LWVycm9ybWVzc2FnZT1cXFwiXFxcIj48L3NwYW4+PC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJkei1zdWNjZXNzLW1hcmtcXFwiPlxcbiAgICA8c3ZnIHdpZHRoPVxcXCI1NFxcXCIgaGVpZ2h0PVxcXCI1NFxcXCIgdmlld0JveD1cXFwiMCAwIDU0IDU0XFxcIiBmaWxsPVxcXCJ3aGl0ZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cXG4gICAgICA8cGF0aCBkPVxcXCJNMTAuMjA3MSAyOS43OTI5TDE0LjI5MjkgMjUuNzA3MUMxNC42ODM0IDI1LjMxNjYgMTUuMzE2NiAyNS4zMTY2IDE1LjcwNzEgMjUuNzA3MUwyMS4yOTI5IDMxLjI5MjlDMjEuNjgzNCAzMS42ODM0IDIyLjMxNjYgMzEuNjgzNCAyMi43MDcxIDMxLjI5MjlMMzguMjkyOSAxNS43MDcxQzM4LjY4MzQgMTUuMzE2NiAzOS4zMTY2IDE1LjMxNjYgMzkuNzA3MSAxNS43MDcxTDQzLjc5MjkgMTkuNzkyOUM0NC4xODM0IDIwLjE4MzQgNDQuMTgzNCAyMC44MTY2IDQzLjc5MjkgMjEuMjA3MUwyMi43MDcxIDQyLjI5MjlDMjIuMzE2NiA0Mi42ODM0IDIxLjY4MzQgNDIuNjgzNCAyMS4yOTI5IDQyLjI5MjlMMTAuMjA3MSAzMS4yMDcxQzkuODE2NTggMzAuODE2NiA5LjgxNjU4IDMwLjE4MzQgMTAuMjA3MSAyOS43OTI5WlxcXCI+PC9wYXRoPlxcbiAgICA8L3N2Zz5cXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwiZHotZXJyb3ItbWFya1xcXCI+XFxuICAgIDxzdmcgd2lkdGg9XFxcIjU0XFxcIiBoZWlnaHQ9XFxcIjU0XFxcIiB2aWV3Qm94PVxcXCIwIDAgNTQgNTRcXFwiIGZpbGw9XFxcIndoaXRlXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPlxcbiAgICAgIDxwYXRoIGQ9XFxcIk0yNi4yOTI5IDIwLjI5MjlMMTkuMjA3MSAxMy4yMDcxQzE4LjgxNjYgMTIuODE2NiAxOC4xODM0IDEyLjgxNjYgMTcuNzkyOSAxMy4yMDcxTDEzLjIwNzEgMTcuNzkyOUMxMi44MTY2IDE4LjE4MzQgMTIuODE2NiAxOC44MTY2IDEzLjIwNzEgMTkuMjA3MUwyMC4yOTI5IDI2LjI5MjlDMjAuNjgzNCAyNi42ODM0IDIwLjY4MzQgMjcuMzE2NiAyMC4yOTI5IDI3LjcwNzFMMTMuMjA3MSAzNC43OTI5QzEyLjgxNjYgMzUuMTgzNCAxMi44MTY2IDM1LjgxNjYgMTMuMjA3MSAzNi4yMDcxTDE3Ljc5MjkgNDAuNzkyOUMxOC4xODM0IDQxLjE4MzQgMTguODE2NiA0MS4xODM0IDE5LjIwNzEgNDAuNzkyOUwyNi4yOTI5IDMzLjcwNzFDMjYuNjgzNCAzMy4zMTY2IDI3LjMxNjYgMzMuMzE2NiAyNy43MDcxIDMzLjcwNzFMMzQuNzkyOSA0MC43OTI5QzM1LjE4MzQgNDEuMTgzNCAzNS44MTY2IDQxLjE4MzQgMzYuMjA3MSA0MC43OTI5TDQwLjc5MjkgMzYuMjA3MUM0MS4xODM0IDM1LjgxNjYgNDEuMTgzNCAzNS4xODM0IDQwLjc5MjkgMzQuNzkyOUwzMy43MDcxIDI3LjcwNzFDMzMuMzE2NiAyNy4zMTY2IDMzLjMxNjYgMjYuNjgzNCAzMy43MDcxIDI2LjI5MjlMNDAuNzkyOSAxOS4yMDcxQzQxLjE4MzQgMTguODE2NiA0MS4xODM0IDE4LjE4MzQgNDAuNzkyOSAxNy43OTI5TDM2LjIwNzEgMTMuMjA3MUMzNS44MTY2IDEyLjgxNjYgMzUuMTgzNCAxMi44MTY2IDM0Ljc5MjkgMTMuMjA3MUwyNy43MDcxIDIwLjI5MjlDMjcuMzE2NiAyMC42ODM0IDI2LjY4MzQgMjAuNjgzNCAyNi4yOTI5IDIwLjI5MjlaXFxcIj48L3BhdGg+XFxuICAgIDwvc3ZnPlxcbiAgPC9kaXY+XFxuPC9kaXY+XFxuXCI7XG5cblxudmFyICRiNjU3YzAzMTU1ZmMyN2UyJHZhciRkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAvKipcbiAgICogSGFzIHRvIGJlIHNwZWNpZmllZCBvbiBlbGVtZW50cyBvdGhlciB0aGFuIGZvcm0gKG9yIHdoZW4gdGhlIGZvcm0gZG9lc24ndFxuICAgKiBoYXZlIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSkuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGBmaWxlc2AgYW5kXG4gICAqIGBkYXRhQmxvY2tzYCAgYW5kIG11c3QgcmV0dXJuIHRoZSB1cmwgYXMgc3RyaW5nLlxuICAgKi8gdXJsOiBudWxsLFxuICAgIC8qKlxuICAgKiBDYW4gYmUgY2hhbmdlZCB0byBgXCJwdXRcImAgaWYgbmVjZXNzYXJ5LiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIGZ1bmN0aW9uXG4gICAqIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBgZmlsZXNgIGFuZCBtdXN0IHJldHVybiB0aGUgbWV0aG9kIChzaW5jZSBgdjMuMTIuMGApLlxuICAgKi8gbWV0aG9kOiBcInBvc3RcIixcbiAgICAvKipcbiAgICogV2lsbCBiZSBzZXQgb24gdGhlIFhIUmVxdWVzdC5cbiAgICovIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXG4gICAgLyoqXG4gICAqIFRoZSB0aW1lb3V0IGZvciB0aGUgWEhSIHJlcXVlc3RzIGluIG1pbGxpc2Vjb25kcyAoc2luY2UgYHY0LjQuMGApLlxuICAgKiBJZiBzZXQgdG8gbnVsbCBvciAwLCBubyB0aW1lb3V0IGlzIGdvaW5nIHRvIGJlIHNldC5cbiAgICovIHRpbWVvdXQ6IG51bGwsXG4gICAgLyoqXG4gICAqIEhvdyBtYW55IGZpbGUgdXBsb2FkcyB0byBwcm9jZXNzIGluIHBhcmFsbGVsIChTZWUgdGhlXG4gICAqIEVucXVldWluZyBmaWxlIHVwbG9hZHMgZG9jdW1lbnRhdGlvbiBzZWN0aW9uIGZvciBtb3JlIGluZm8pXG4gICAqLyBwYXJhbGxlbFVwbG9hZHM6IDIsXG4gICAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2VuZCBtdWx0aXBsZSBmaWxlcyBpbiBvbmUgcmVxdWVzdC4gSWZcbiAgICogdGhpcyBpdCBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgZmFsbGJhY2sgZmlsZSBpbnB1dCBlbGVtZW50IHdpbGxcbiAgICogaGF2ZSB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUgYXMgd2VsbC4gVGhpcyBvcHRpb24gd2lsbFxuICAgKiBhbHNvIHRyaWdnZXIgYWRkaXRpb25hbCBldmVudHMgKGxpa2UgYHByb2Nlc3NpbmdtdWx0aXBsZWApLiBTZWUgdGhlIGV2ZW50c1xuICAgKiBkb2N1bWVudGF0aW9uIHNlY3Rpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqLyB1cGxvYWRNdWx0aXBsZTogZmFsc2UsXG4gICAgLyoqXG4gICAqIFdoZXRoZXIgeW91IHdhbnQgZmlsZXMgdG8gYmUgdXBsb2FkZWQgaW4gY2h1bmtzIHRvIHlvdXIgc2VydmVyLiBUaGlzIGNhbid0IGJlXG4gICAqIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgdXBsb2FkTXVsdGlwbGVgLlxuICAgKlxuICAgKiBTZWUgW2NodW5rc1VwbG9hZGVkXSgjY29uZmlnLWNodW5rc1VwbG9hZGVkKSBmb3IgdGhlIGNhbGxiYWNrIHRvIGZpbmFsaXNlIGFuIHVwbG9hZC5cbiAgICovIGNodW5raW5nOiBmYWxzZSxcbiAgICAvKipcbiAgICogSWYgYGNodW5raW5nYCBpcyBlbmFibGVkLCB0aGlzIGRlZmluZXMgd2hldGhlciAqKmV2ZXJ5KiogZmlsZSBzaG91bGQgYmUgY2h1bmtlZCxcbiAgICogZXZlbiBpZiB0aGUgZmlsZSBzaXplIGlzIGJlbG93IGNodW5rU2l6ZS4gVGhpcyBtZWFucywgdGhhdCB0aGUgYWRkaXRpb25hbCBjaHVua1xuICAgKiBmb3JtIGRhdGEgd2lsbCBiZSBzdWJtaXR0ZWQgYW5kIHRoZSBgY2h1bmtzVXBsb2FkZWRgIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZC5cbiAgICovIGZvcmNlQ2h1bmtpbmc6IGZhbHNlLFxuICAgIC8qKlxuICAgKiBJZiBgY2h1bmtpbmdgIGlzIGB0cnVlYCwgdGhlbiB0aGlzIGRlZmluZXMgdGhlIGNodW5rIHNpemUgaW4gYnl0ZXMuXG4gICAqLyBjaHVua1NpemU6IDIwOTcxNTIsXG4gICAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGluZGl2aWR1YWwgY2h1bmtzIG9mIGEgZmlsZSBhcmUgYmVpbmcgdXBsb2FkZWQgc2ltdWx0YW5lb3VzbHkuXG4gICAqLyBwYXJhbGxlbENodW5rVXBsb2FkczogZmFsc2UsXG4gICAgLyoqXG4gICAqIFdoZXRoZXIgYSBjaHVuayBzaG91bGQgYmUgcmV0cmllZCBpZiBpdCBmYWlscy5cbiAgICovIHJldHJ5Q2h1bmtzOiBmYWxzZSxcbiAgICAvKipcbiAgICogSWYgYHJldHJ5Q2h1bmtzYCBpcyB0cnVlLCBob3cgbWFueSB0aW1lcyBzaG91bGQgaXQgYmUgcmV0cmllZC5cbiAgICovIHJldHJ5Q2h1bmtzTGltaXQ6IDMsXG4gICAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGZpbGVzaXplIChpbiBNaUIpIHRoYXQgaXMgYWxsb3dlZCB0byBiZSB1cGxvYWRlZC5cbiAgICovIG1heEZpbGVzaXplOiAyNTYsXG4gICAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHBhcmFtIHRoYXQgZ2V0cyB0cmFuc2ZlcnJlZC5cbiAgICogKipOT1RFKio6IElmIHlvdSBoYXZlIHRoZSBvcHRpb24gIGB1cGxvYWRNdWx0aXBsZWAgc2V0IHRvIGB0cnVlYCwgdGhlblxuICAgKiBEcm9wem9uZSB3aWxsIGFwcGVuZCBgW11gIHRvIHRoZSBuYW1lLlxuICAgKi8gcGFyYW1OYW1lOiBcImZpbGVcIixcbiAgICAvKipcbiAgICogV2hldGhlciB0aHVtYm5haWxzIGZvciBpbWFnZXMgc2hvdWxkIGJlIGdlbmVyYXRlZFxuICAgKi8gY3JlYXRlSW1hZ2VUaHVtYm5haWxzOiB0cnVlLFxuICAgIC8qKlxuICAgKiBJbiBNQi4gV2hlbiB0aGUgZmlsZW5hbWUgZXhjZWVkcyB0aGlzIGxpbWl0LCB0aGUgdGh1bWJuYWlsIHdpbGwgbm90IGJlIGdlbmVyYXRlZC5cbiAgICovIG1heFRodW1ibmFpbEZpbGVzaXplOiAxMCxcbiAgICAvKipcbiAgICogSWYgYG51bGxgLCB0aGUgcmF0aW8gb2YgdGhlIGltYWdlIHdpbGwgYmUgdXNlZCB0byBjYWxjdWxhdGUgaXQuXG4gICAqLyB0aHVtYm5haWxXaWR0aDogMTIwLFxuICAgIC8qKlxuICAgKiBUaGUgc2FtZSBhcyBgdGh1bWJuYWlsV2lkdGhgLiBJZiBib3RoIGFyZSBudWxsLCBpbWFnZXMgd2lsbCBub3QgYmUgcmVzaXplZC5cbiAgICovIHRodW1ibmFpbEhlaWdodDogMTIwLFxuICAgIC8qKlxuICAgKiBIb3cgdGhlIGltYWdlcyBzaG91bGQgYmUgc2NhbGVkIGRvd24gaW4gY2FzZSBib3RoLCBgdGh1bWJuYWlsV2lkdGhgIGFuZCBgdGh1bWJuYWlsSGVpZ2h0YCBhcmUgcHJvdmlkZWQuXG4gICAqIENhbiBiZSBlaXRoZXIgYGNvbnRhaW5gIG9yIGBjcm9wYC5cbiAgICovIHRodW1ibmFpbE1ldGhvZDogXCJjcm9wXCIsXG4gICAgLyoqXG4gICAqIElmIHNldCwgaW1hZ2VzIHdpbGwgYmUgcmVzaXplZCB0byB0aGVzZSBkaW1lbnNpb25zIGJlZm9yZSBiZWluZyAqKnVwbG9hZGVkKiouXG4gICAqIElmIG9ubHkgb25lLCBgcmVzaXplV2lkdGhgICoqb3IqKiBgcmVzaXplSGVpZ2h0YCBpcyBwcm92aWRlZCwgdGhlIG9yaWdpbmFsIGFzcGVjdFxuICAgKiByYXRpbyBvZiB0aGUgZmlsZSB3aWxsIGJlIHByZXNlcnZlZC5cbiAgICpcbiAgICogVGhlIGBvcHRpb25zLnRyYW5zZm9ybUZpbGVgIGZ1bmN0aW9uIHVzZXMgdGhlc2Ugb3B0aW9ucywgc28gaWYgdGhlIGB0cmFuc2Zvcm1GaWxlYCBmdW5jdGlvblxuICAgKiBpcyBvdmVycmlkZGVuLCB0aGVzZSBvcHRpb25zIGRvbid0IGRvIGFueXRoaW5nLlxuICAgKi8gcmVzaXplV2lkdGg6IG51bGwsXG4gICAgLyoqXG4gICAqIFNlZSBgcmVzaXplV2lkdGhgLlxuICAgKi8gcmVzaXplSGVpZ2h0OiBudWxsLFxuICAgIC8qKlxuICAgKiBUaGUgbWltZSB0eXBlIG9mIHRoZSByZXNpemVkIGltYWdlIChiZWZvcmUgaXQgZ2V0cyB1cGxvYWRlZCB0byB0aGUgc2VydmVyKS5cbiAgICogSWYgYG51bGxgIHRoZSBvcmlnaW5hbCBtaW1lIHR5cGUgd2lsbCBiZSB1c2VkLiBUbyBmb3JjZSBqcGVnLCBmb3IgZXhhbXBsZSwgdXNlIGBpbWFnZS9qcGVnYC5cbiAgICogU2VlIGByZXNpemVXaWR0aGAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqLyByZXNpemVNaW1lVHlwZTogbnVsbCxcbiAgICAvKipcbiAgICogVGhlIHF1YWxpdHkgb2YgdGhlIHJlc2l6ZWQgaW1hZ2VzLiBTZWUgYHJlc2l6ZVdpZHRoYC5cbiAgICovIHJlc2l6ZVF1YWxpdHk6IDAuOCxcbiAgICAvKipcbiAgICogSG93IHRoZSBpbWFnZXMgc2hvdWxkIGJlIHNjYWxlZCBkb3duIGluIGNhc2UgYm90aCwgYHJlc2l6ZVdpZHRoYCBhbmQgYHJlc2l6ZUhlaWdodGAgYXJlIHByb3ZpZGVkLlxuICAgKiBDYW4gYmUgZWl0aGVyIGBjb250YWluYCBvciBgY3JvcGAuXG4gICAqLyByZXNpemVNZXRob2Q6IFwiY29udGFpblwiLFxuICAgIC8qKlxuICAgKiBUaGUgYmFzZSB0aGF0IGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSAqKmRpc3BsYXllZCoqIGZpbGVzaXplLiBZb3UgY2FuXG4gICAqIGNoYW5nZSB0aGlzIHRvIDEwMjQgaWYgeW91IHdvdWxkIHJhdGhlciBkaXNwbGF5IGtpYmlieXRlcywgbWViaWJ5dGVzLFxuICAgKiBldGMuLi4gMTAyNCBpcyB0ZWNobmljYWxseSBpbmNvcnJlY3QsIGJlY2F1c2UgYDEwMjQgYnl0ZXNgIGFyZSBgMSBraWJpYnl0ZWBcbiAgICogbm90IGAxIGtpbG9ieXRlYC4gWW91IGNhbiBjaGFuZ2UgdGhpcyB0byBgMTAyNGAgaWYgeW91IGRvbid0IGNhcmUgYWJvdXRcbiAgICogdmFsaWRpdHkuXG4gICAqLyBmaWxlc2l6ZUJhc2U6IDEwMDAsXG4gICAgLyoqXG4gICAqIElmIG5vdCBgbnVsbGAgZGVmaW5lcyBob3cgbWFueSBmaWxlcyB0aGlzIERyb3B6b25lIGhhbmRsZXMuIElmIGl0IGV4Y2VlZHMsXG4gICAqIHRoZSBldmVudCBgbWF4ZmlsZXNleGNlZWRlZGAgd2lsbCBiZSBjYWxsZWQuIFRoZSBkcm9wem9uZSBlbGVtZW50IGdldHMgdGhlXG4gICAqIGNsYXNzIGBkei1tYXgtZmlsZXMtcmVhY2hlZGAgYWNjb3JkaW5nbHkgc28geW91IGNhbiBwcm92aWRlIHZpc3VhbFxuICAgKiBmZWVkYmFjay5cbiAgICovIG1heEZpbGVzOiBudWxsLFxuICAgIC8qKlxuICAgKiBBbiBvcHRpb25hbCBvYmplY3QgdG8gc2VuZCBhZGRpdGlvbmFsIGhlYWRlcnMgdG8gdGhlIHNlcnZlci4gRWc6XG4gICAqIGB7IFwiTXktQXdlc29tZS1IZWFkZXJcIjogXCJoZWFkZXIgdmFsdWVcIiB9YFxuICAgKi8gaGVhZGVyczogbnVsbCxcbiAgICAvKipcbiAgICogU2hvdWxkIHRoZSBkZWZhdWx0IGhlYWRlcnMgYmUgc2V0IG9yIG5vdD9cbiAgICogQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uIDwtIGZvciByZXF1ZXN0aW5nIGpzb24gcmVzcG9uc2VcbiAgICogQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUgPC0gUmVxdWVzdCBzaG91bGRudCBiZSBjYWNoZWRcbiAgICogWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QgPC0gV2Ugc2VudCB0aGUgcmVxdWVzdCB2aWEgWE1MSHR0cFJlcXVlc3RcbiAgICovIGRlZmF1bHRIZWFkZXJzOiB0cnVlLFxuICAgIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBkcm9wem9uZSBlbGVtZW50IGl0c2VsZiB3aWxsIGJlIGNsaWNrYWJsZSwgaWYgYGZhbHNlYFxuICAgKiBub3RoaW5nIHdpbGwgYmUgY2xpY2thYmxlLlxuICAgKlxuICAgKiBZb3UgY2FuIGFsc28gcGFzcyBhbiBIVE1MIGVsZW1lbnQsIGEgQ1NTIHNlbGVjdG9yIChmb3IgbXVsdGlwbGUgZWxlbWVudHMpXG4gICAqIG9yIGFuIGFycmF5IG9mIHRob3NlLiBJbiB0aGF0IGNhc2UsIGFsbCBvZiB0aG9zZSBlbGVtZW50cyB3aWxsIHRyaWdnZXIgYW5cbiAgICogdXBsb2FkIHdoZW4gY2xpY2tlZC5cbiAgICovIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAvKipcbiAgICogV2hldGhlciBoaWRkZW4gZmlsZXMgaW4gZGlyZWN0b3JpZXMgc2hvdWxkIGJlIGlnbm9yZWQuXG4gICAqLyBpZ25vcmVIaWRkZW5GaWxlczogdHJ1ZSxcbiAgICAvKipcbiAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgYGFjY2VwdGAgY2hlY2tzIHRoZSBmaWxlJ3MgbWltZSB0eXBlIG9yXG4gICAqIGV4dGVuc2lvbiBhZ2FpbnN0IHRoaXMgbGlzdC4gVGhpcyBpcyBhIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIG1pbWVcbiAgICogdHlwZXMgb3IgZmlsZSBleHRlbnNpb25zLlxuICAgKlxuICAgKiBFZy46IGBpbWFnZS8qLGFwcGxpY2F0aW9uL3BkZiwucHNkYFxuICAgKlxuICAgKiBJZiB0aGUgRHJvcHpvbmUgaXMgYGNsaWNrYWJsZWAgdGhpcyBvcHRpb24gd2lsbCBhbHNvIGJlIHVzZWQgYXNcbiAgICogW2BhY2NlcHRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUTUwvRWxlbWVudC9pbnB1dCNhdHRyLWFjY2VwdClcbiAgICogcGFyYW1ldGVyIG9uIHRoZSBoaWRkZW4gZmlsZSBpbnB1dCBhcyB3ZWxsLlxuICAgKi8gYWNjZXB0ZWRGaWxlczogbnVsbCxcbiAgICAvKipcbiAgICogKipEZXByZWNhdGVkISoqXG4gICAqIFVzZSBhY2NlcHRlZEZpbGVzIGluc3RlYWQuXG4gICAqLyBhY2NlcHRlZE1pbWVUeXBlczogbnVsbCxcbiAgICAvKipcbiAgICogSWYgZmFsc2UsIGZpbGVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHF1ZXVlIGJ1dCB0aGUgcXVldWUgd2lsbCBub3QgYmVcbiAgICogcHJvY2Vzc2VkIGF1dG9tYXRpY2FsbHkuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgbmVlZCBzb21lIGFkZGl0aW9uYWwgdXNlciBpbnB1dCBiZWZvcmUgc2VuZGluZ1xuICAgKiBmaWxlcyAob3IgaWYgeW91IHdhbnQgd2FudCBhbGwgZmlsZXMgc2VudCBhdCBvbmNlKS5cbiAgICogSWYgeW91J3JlIHJlYWR5IHRvIHNlbmQgdGhlIGZpbGUgc2ltcGx5IGNhbGwgYG15RHJvcHpvbmUucHJvY2Vzc1F1ZXVlKClgLlxuICAgKlxuICAgKiBTZWUgdGhlIFtlbnF1ZXVpbmcgZmlsZSB1cGxvYWRzXSgjZW5xdWV1aW5nLWZpbGUtdXBsb2FkcykgZG9jdW1lbnRhdGlvblxuICAgKiBzZWN0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi8gYXV0b1Byb2Nlc3NRdWV1ZTogdHJ1ZSxcbiAgICAvKipcbiAgICogSWYgZmFsc2UsIGZpbGVzIGFkZGVkIHRvIHRoZSBkcm9wem9uZSB3aWxsIG5vdCBiZSBxdWV1ZWQgYnkgZGVmYXVsdC5cbiAgICogWW91J2xsIGhhdmUgdG8gY2FsbCBgZW5xdWV1ZUZpbGUoZmlsZSlgIG1hbnVhbGx5LlxuICAgKi8gYXV0b1F1ZXVlOiB0cnVlLFxuICAgIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoaXMgd2lsbCBhZGQgYSBsaW5rIHRvIGV2ZXJ5IGZpbGUgcHJldmlldyB0byByZW1vdmUgb3IgY2FuY2VsIChpZlxuICAgKiBhbHJlYWR5IHVwbG9hZGluZykgdGhlIGZpbGUuIFRoZSBgZGljdENhbmNlbFVwbG9hZGAsIGBkaWN0Q2FuY2VsVXBsb2FkQ29uZmlybWF0aW9uYFxuICAgKiBhbmQgYGRpY3RSZW1vdmVGaWxlYCBvcHRpb25zIGFyZSB1c2VkIGZvciB0aGUgd29yZGluZy5cbiAgICovIGFkZFJlbW92ZUxpbmtzOiBmYWxzZSxcbiAgICAvKipcbiAgICogRGVmaW5lcyB3aGVyZSB0byBkaXNwbGF5IHRoZSBmaWxlIHByZXZpZXdzIOKAkyBpZiBgbnVsbGAgdGhlXG4gICAqIERyb3B6b25lIGVsZW1lbnQgaXRzZWxmIGlzIHVzZWQuIENhbiBiZSBhIHBsYWluIGBIVE1MRWxlbWVudGAgb3IgYSBDU1NcbiAgICogc2VsZWN0b3IuIFRoZSBlbGVtZW50IHNob3VsZCBoYXZlIHRoZSBgZHJvcHpvbmUtcHJldmlld3NgIGNsYXNzIHNvXG4gICAqIHRoZSBwcmV2aWV3cyBhcmUgZGlzcGxheWVkIHByb3Blcmx5LlxuICAgKi8gcHJldmlld3NDb250YWluZXI6IG51bGwsXG4gICAgLyoqXG4gICAqIFNldCB0aGlzIHRvIGB0cnVlYCBpZiB5b3UgZG9uJ3Qgd2FudCBwcmV2aWV3cyB0byBiZSBzaG93bi5cbiAgICovIGRpc2FibGVQcmV2aWV3czogZmFsc2UsXG4gICAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGVsZW1lbnQgdGhlIGhpZGRlbiBpbnB1dCBmaWVsZCAod2hpY2ggaXMgdXNlZCB3aGVuIGNsaWNraW5nIG9uIHRoZVxuICAgKiBkcm9wem9uZSB0byB0cmlnZ2VyIGZpbGUgc2VsZWN0aW9uKSB3aWxsIGJlIGFwcGVuZGVkIHRvLiBUaGlzIG1pZ2h0XG4gICAqIGJlIGltcG9ydGFudCBpbiBjYXNlIHlvdSB1c2UgZnJhbWV3b3JrcyB0byBzd2l0Y2ggdGhlIGNvbnRlbnQgb2YgeW91ciBwYWdlLlxuICAgKlxuICAgKiBDYW4gYmUgYSBzZWxlY3RvciBzdHJpbmcsIG9yIGFuIGVsZW1lbnQgZGlyZWN0bHkuXG4gICAqLyBoaWRkZW5JbnB1dENvbnRhaW5lcjogXCJib2R5XCIsXG4gICAgLyoqXG4gICAqIElmIG51bGwsIG5vIGNhcHR1cmUgdHlwZSB3aWxsIGJlIHNwZWNpZmllZFxuICAgKiBJZiBjYW1lcmEsIG1vYmlsZSBkZXZpY2VzIHdpbGwgc2tpcCB0aGUgZmlsZSBzZWxlY3Rpb24gYW5kIGNob29zZSBjYW1lcmFcbiAgICogSWYgbWljcm9waG9uZSwgbW9iaWxlIGRldmljZXMgd2lsbCBza2lwIHRoZSBmaWxlIHNlbGVjdGlvbiBhbmQgY2hvb3NlIHRoZSBtaWNyb3Bob25lXG4gICAqIElmIGNhbWNvcmRlciwgbW9iaWxlIGRldmljZXMgd2lsbCBza2lwIHRoZSBmaWxlIHNlbGVjdGlvbiBhbmQgY2hvb3NlIHRoZSBjYW1lcmEgaW4gdmlkZW8gbW9kZVxuICAgKiBPbiBhcHBsZSBkZXZpY2VzIG11bHRpcGxlIG11c3QgYmUgc2V0IHRvIGZhbHNlLiAgQWNjZXB0ZWRGaWxlcyBtYXkgbmVlZCB0b1xuICAgKiBiZSBzZXQgdG8gYW4gYXBwcm9wcmlhdGUgbWltZSB0eXBlIChlLmcuIFwiaW1hZ2UvKlwiLCBcImF1ZGlvLypcIiwgb3IgXCJ2aWRlby8qXCIpLlxuICAgKi8gY2FwdHVyZTogbnVsbCxcbiAgICAvKipcbiAgICogKipEZXByZWNhdGVkKiouIFVzZSBgcmVuYW1lRmlsZWAgaW5zdGVhZC5cbiAgICovIHJlbmFtZUZpbGVuYW1lOiBudWxsLFxuICAgIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBiZWZvcmUgdGhlIGZpbGUgaXMgdXBsb2FkZWQgdG8gdGhlIHNlcnZlciBhbmQgcmVuYW1lcyB0aGUgZmlsZS5cbiAgICogVGhpcyBmdW5jdGlvbiBnZXRzIHRoZSBgRmlsZWAgYXMgYXJndW1lbnQgYW5kIGNhbiB1c2UgdGhlIGBmaWxlLm5hbWVgLiBUaGUgYWN0dWFsIG5hbWUgb2YgdGhlXG4gICAqIGZpbGUgdGhhdCBnZXRzIHVzZWQgZHVyaW5nIHRoZSB1cGxvYWQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2ggYGZpbGUudXBsb2FkLmZpbGVuYW1lYC5cbiAgICovIHJlbmFtZUZpbGU6IG51bGwsXG4gICAgLyoqXG4gICAqIElmIGB0cnVlYCB0aGUgZmFsbGJhY2sgd2lsbCBiZSBmb3JjZWQuIFRoaXMgaXMgdmVyeSB1c2VmdWwgdG8gdGVzdCB5b3VyIHNlcnZlclxuICAgKiBpbXBsZW1lbnRhdGlvbnMgZmlyc3QgYW5kIG1ha2Ugc3VyZSB0aGF0IGV2ZXJ5dGhpbmcgd29ya3MgYXNcbiAgICogZXhwZWN0ZWQgd2l0aG91dCBkcm9wem9uZSBpZiB5b3UgZXhwZXJpZW5jZSBwcm9ibGVtcywgYW5kIHRvIHRlc3RcbiAgICogaG93IHlvdXIgZmFsbGJhY2tzIHdpbGwgbG9vay5cbiAgICovIGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuICAgIC8qKlxuICAgKiBUaGUgdGV4dCB1c2VkIGJlZm9yZSBhbnkgZmlsZXMgYXJlIGRyb3BwZWQuXG4gICAqLyBkaWN0RGVmYXVsdE1lc3NhZ2U6IFwiRHJvcCBmaWxlcyBoZXJlIHRvIHVwbG9hZFwiLFxuICAgIC8qKlxuICAgKiBUaGUgdGV4dCB0aGF0IHJlcGxhY2VzIHRoZSBkZWZhdWx0IG1lc3NhZ2UgdGV4dCBpdCB0aGUgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLlxuICAgKi8gZGljdEZhbGxiYWNrTWVzc2FnZTogXCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBkcmFnJ24nZHJvcCBmaWxlIHVwbG9hZHMuXCIsXG4gICAgLyoqXG4gICAqIFRoZSB0ZXh0IHRoYXQgd2lsbCBiZSBhZGRlZCBiZWZvcmUgdGhlIGZhbGxiYWNrIGZvcm0uXG4gICAqIElmIHlvdSBwcm92aWRlIGEgIGZhbGxiYWNrIGVsZW1lbnQgeW91cnNlbGYsIG9yIGlmIHRoaXMgb3B0aW9uIGlzIGBudWxsYCB0aGlzIHdpbGxcbiAgICogYmUgaWdub3JlZC5cbiAgICovIGRpY3RGYWxsYmFja1RleHQ6IFwiUGxlYXNlIHVzZSB0aGUgZmFsbGJhY2sgZm9ybSBiZWxvdyB0byB1cGxvYWQgeW91ciBmaWxlcyBsaWtlIGluIHRoZSBvbGRlbiBkYXlzLlwiLFxuICAgIC8qKlxuICAgKiBJZiB0aGUgZmlsZXNpemUgaXMgdG9vIGJpZy5cbiAgICogYHt7ZmlsZXNpemV9fWAgYW5kIGB7e21heEZpbGVzaXplfX1gIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgcmVzcGVjdGl2ZSBjb25maWd1cmF0aW9uIHZhbHVlcy5cbiAgICovIGRpY3RGaWxlVG9vQmlnOiBcIkZpbGUgaXMgdG9vIGJpZyAoe3tmaWxlc2l6ZX19TWlCKS4gTWF4IGZpbGVzaXplOiB7e21heEZpbGVzaXplfX1NaUIuXCIsXG4gICAgLyoqXG4gICAqIElmIHRoZSBmaWxlIGRvZXNuJ3QgbWF0Y2ggdGhlIGZpbGUgdHlwZS5cbiAgICovIGRpY3RJbnZhbGlkRmlsZVR5cGU6IFwiWW91IGNhbid0IHVwbG9hZCBmaWxlcyBvZiB0aGlzIHR5cGUuXCIsXG4gICAgLyoqXG4gICAqIElmIHRoZSBzZXJ2ZXIgcmVzcG9uc2Ugd2FzIGludmFsaWQuXG4gICAqIGB7e3N0YXR1c0NvZGV9fWAgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBzZXJ2ZXJzIHN0YXR1cyBjb2RlLlxuICAgKi8gZGljdFJlc3BvbnNlRXJyb3I6IFwiU2VydmVyIHJlc3BvbmRlZCB3aXRoIHt7c3RhdHVzQ29kZX19IGNvZGUuXCIsXG4gICAgLyoqXG4gICAqIElmIGBhZGRSZW1vdmVMaW5rc2AgaXMgdHJ1ZSwgdGhlIHRleHQgdG8gYmUgdXNlZCBmb3IgdGhlIGNhbmNlbCB1cGxvYWQgbGluay5cbiAgICovIGRpY3RDYW5jZWxVcGxvYWQ6IFwiQ2FuY2VsIHVwbG9hZFwiLFxuICAgIC8qKlxuICAgKiBUaGUgdGV4dCB0aGF0IGlzIGRpc3BsYXllZCBpZiBhbiB1cGxvYWQgd2FzIG1hbnVhbGx5IGNhbmNlbGVkXG4gICAqLyBkaWN0VXBsb2FkQ2FuY2VsZWQ6IFwiVXBsb2FkIGNhbmNlbGVkLlwiLFxuICAgIC8qKlxuICAgKiBJZiBgYWRkUmVtb3ZlTGlua3NgIGlzIHRydWUsIHRoZSB0ZXh0IHRvIGJlIHVzZWQgZm9yIGNvbmZpcm1hdGlvbiB3aGVuIGNhbmNlbGxpbmcgdXBsb2FkLlxuICAgKi8gZGljdENhbmNlbFVwbG9hZENvbmZpcm1hdGlvbjogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2FuY2VsIHRoaXMgdXBsb2FkP1wiLFxuICAgIC8qKlxuICAgKiBJZiBgYWRkUmVtb3ZlTGlua3NgIGlzIHRydWUsIHRoZSB0ZXh0IHRvIGJlIHVzZWQgdG8gcmVtb3ZlIGEgZmlsZS5cbiAgICovIGRpY3RSZW1vdmVGaWxlOiBcIlJlbW92ZSBmaWxlXCIsXG4gICAgLyoqXG4gICAqIElmIHRoaXMgaXMgbm90IG51bGwsIHRoZW4gdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCBiZWZvcmUgcmVtb3ZpbmcgYSBmaWxlLlxuICAgKi8gZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb246IG51bGwsXG4gICAgLyoqXG4gICAqIERpc3BsYXllZCBpZiBgbWF4RmlsZXNgIGlzIHN0IGFuZCBleGNlZWRlZC5cbiAgICogVGhlIHN0cmluZyBge3ttYXhGaWxlc319YCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBjb25maWd1cmF0aW9uIHZhbHVlLlxuICAgKi8gZGljdE1heEZpbGVzRXhjZWVkZWQ6IFwiWW91IGNhbiBub3QgdXBsb2FkIGFueSBtb3JlIGZpbGVzLlwiLFxuICAgIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHRyYW5zbGF0ZSB0aGUgZGlmZmVyZW50IHVuaXRzLiBTdGFydGluZyB3aXRoIGB0YmAgZm9yIHRlcmFieXRlcyBhbmQgZ29pbmcgZG93biB0b1xuICAgKiBgYmAgZm9yIGJ5dGVzLlxuICAgKi8gZGljdEZpbGVTaXplVW5pdHM6IHtcbiAgICAgICAgdGI6IFwiVEJcIixcbiAgICAgICAgZ2I6IFwiR0JcIixcbiAgICAgICAgbWI6IFwiTUJcIixcbiAgICAgICAga2I6IFwiS0JcIixcbiAgICAgICAgYjogXCJiXCJcbiAgICB9LFxuICAgIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBkcm9wem9uZSBpbml0aWFsaXplZFxuICAgKiBZb3UgY2FuIGFkZCBldmVudCBsaXN0ZW5lcnMgaGVyZVxuICAgKi8gaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICAvKipcbiAgICogQ2FuIGJlIGFuICoqb2JqZWN0Kiogb2YgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHRyYW5zZmVyIHRvIHRoZSBzZXJ2ZXIsICoqb3IqKiBhIGBGdW5jdGlvbmBcbiAgICogdGhhdCBnZXRzIGludm9rZWQgd2l0aCB0aGUgYGZpbGVzYCwgYHhocmAgYW5kLCBpZiBpdCdzIGEgY2h1bmtlZCB1cGxvYWQsIGBjaHVua2AgYXJndW1lbnRzLiBJbiBjYXNlXG4gICAqIG9mIGEgZnVuY3Rpb24sIHRoaXMgbmVlZHMgdG8gcmV0dXJuIGEgbWFwLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcgZm9yIG5vcm1hbCB1cGxvYWRzLCBidXQgYWRkcyByZWxldmFudCBpbmZvcm1hdGlvbiBmb3JcbiAgICogY2h1bmtlZCB1cGxvYWRzLlxuICAgKlxuICAgKiBUaGlzIGlzIHRoZSBzYW1lIGFzIGFkZGluZyBoaWRkZW4gaW5wdXQgZmllbGRzIGluIHRoZSBmb3JtIGVsZW1lbnQuXG4gICAqLyBwYXJhbXM6IGZ1bmN0aW9uKGZpbGVzLCB4aHIsIGNodW5rKSB7XG4gICAgICAgIGlmIChjaHVuaykgcmV0dXJuIHtcbiAgICAgICAgICAgIGR6dXVpZDogY2h1bmsuZmlsZS51cGxvYWQudXVpZCxcbiAgICAgICAgICAgIGR6Y2h1bmtpbmRleDogY2h1bmsuaW5kZXgsXG4gICAgICAgICAgICBkenRvdGFsZmlsZXNpemU6IGNodW5rLmZpbGUuc2l6ZSxcbiAgICAgICAgICAgIGR6Y2h1bmtzaXplOiB0aGlzLm9wdGlvbnMuY2h1bmtTaXplLFxuICAgICAgICAgICAgZHp0b3RhbGNodW5rY291bnQ6IGNodW5rLmZpbGUudXBsb2FkLnRvdGFsQ2h1bmtDb3VudCxcbiAgICAgICAgICAgIGR6Y2h1bmtieXRlb2Zmc2V0OiBjaHVuay5pbmRleCAqIHRoaXMub3B0aW9ucy5jaHVua1NpemVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgZ2V0cyBhIFtmaWxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9GaWxlKVxuICAgKiBhbmQgYSBgZG9uZWAgZnVuY3Rpb24gYXMgcGFyYW1ldGVycy5cbiAgICpcbiAgICogSWYgdGhlIGRvbmUgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgdGhlIGZpbGUgaXMgXCJhY2NlcHRlZFwiIGFuZCB3aWxsXG4gICAqIGJlIHByb2Nlc3NlZC4gSWYgeW91IHBhc3MgYW4gZXJyb3IgbWVzc2FnZSwgdGhlIGZpbGUgaXMgcmVqZWN0ZWQsIGFuZCB0aGUgZXJyb3JcbiAgICogbWVzc2FnZSB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBiZSBjYWxsZWQgaWYgdGhlIGZpbGUgaXMgdG9vIGJpZyBvciBkb2Vzbid0IG1hdGNoIHRoZSBtaW1lIHR5cGVzLlxuICAgKi8gYWNjZXB0OiBmdW5jdGlvbihmaWxlLCBkb25lKSB7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfSxcbiAgICAvKipcbiAgICogVGhlIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gYWxsIGNodW5rcyBoYXZlIGJlZW4gdXBsb2FkZWQgZm9yIGEgZmlsZS5cbiAgICogSXQgZ2V0cyB0aGUgZmlsZSBmb3Igd2hpY2ggdGhlIGNodW5rcyBoYXZlIGJlZW4gdXBsb2FkZWQgYXMgdGhlIGZpcnN0IHBhcmFtZXRlcixcbiAgICogYW5kIHRoZSBgZG9uZWAgZnVuY3Rpb24gYXMgc2Vjb25kLiBgZG9uZSgpYCBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gZXZlcnl0aGluZ1xuICAgKiBuZWVkZWQgdG8gZmluaXNoIHRoZSB1cGxvYWQgcHJvY2VzcyBpcyBkb25lLlxuICAgKi8gY2h1bmtzVXBsb2FkZWQ6IGZ1bmN0aW9uIGNodW5rc1VwbG9hZGVkKGZpbGUsIGRvbmUpIHtcbiAgICAgICAgZG9uZSgpO1xuICAgIH0sXG4gICAgLyoqXG4gICAqIFNlbmRzIHRoZSBmaWxlIGFzIGJpbmFyeSBibG9iIGluIGJvZHkgaW5zdGVhZCBvZiBmb3JtIGRhdGEuXG4gICAqIElmIHRoaXMgaXMgc2V0LCB0aGUgYHBhcmFtc2Agb3B0aW9uIHdpbGwgYmUgaWdub3JlZC5cbiAgICogSXQncyBhbiBlcnJvciB0byBzZXQgdGhpcyB0byBgdHJ1ZWAgYWxvbmcgd2l0aCBgdXBsb2FkTXVsdGlwbGVgIHNpbmNlXG4gICAqIG11bHRpcGxlIGZpbGVzIGNhbm5vdCBiZSBpbiBhIHNpbmdsZSBiaW5hcnkgYm9keS5cbiAgICovIGJpbmFyeUJvZHk6IGZhbHNlLFxuICAgIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNob3dzIHRoZSBmYWxsYmFjayBpbnB1dCBmaWVsZCBhbmQgYWRkc1xuICAgKiBhIHRleHQuXG4gICAqLyBmYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoaXMgY29kZSBzaG91bGQgcGFzcyBpbiBJRTcuLi4gOihcbiAgICAgICAgdmFyIG1lc3NhZ2VFbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQodGhpcy5lbGVtZW50LmNsYXNzTmFtZSwgXCIgZHotYnJvd3Nlci1ub3Qtc3VwcG9ydGVkXCIpO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoLyhefCApZHotbWVzc2FnZSgkfCApLy50ZXN0KGNoaWxkLmNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuY2xhc3NOYW1lID0gXCJkei1tZXNzYWdlXCI7IC8vIFJlbW92ZXMgdGhlICdkei1kZWZhdWx0JyBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtZXNzYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgbWVzc2FnZUVsZW1lbnQgPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmNyZWF0ZUVsZW1lbnQoJzxkaXYgY2xhc3M9XCJkei1tZXNzYWdlXCI+PHNwYW4+PC9zcGFuPjwvZGl2PicpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKG1lc3NhZ2VFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3BhbiA9IG1lc3NhZ2VFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKVswXTtcbiAgICAgICAgaWYgKHNwYW4pIHtcbiAgICAgICAgICAgIGlmIChzcGFuLnRleHRDb250ZW50ICE9IG51bGwpIHNwYW4udGV4dENvbnRlbnQgPSB0aGlzLm9wdGlvbnMuZGljdEZhbGxiYWNrTWVzc2FnZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHNwYW4uaW5uZXJUZXh0ICE9IG51bGwpIHNwYW4uaW5uZXJUZXh0ID0gdGhpcy5vcHRpb25zLmRpY3RGYWxsYmFja01lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmdldEZhbGxiYWNrRm9ybSgpKTtcbiAgICB9LFxuICAgIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB0byBjYWxjdWxhdGUgdGhlIHRodW1ibmFpbCBkaW1lbnNpb25zLlxuICAgKlxuICAgKiBJdCBnZXRzIGBmaWxlYCwgYHdpZHRoYCBhbmQgYGhlaWdodGAgKGJvdGggbWF5IGJlIGBudWxsYCkgYXMgcGFyYW1ldGVycyBhbmQgbXVzdCByZXR1cm4gYW4gb2JqZWN0IGNvbnRhaW5pbmc6XG4gICAqXG4gICAqICAtIGBzcmNXaWR0aGAgJiBgc3JjSGVpZ2h0YCAocmVxdWlyZWQpXG4gICAqICAtIGB0cmdXaWR0aGAgJiBgdHJnSGVpZ2h0YCAocmVxdWlyZWQpXG4gICAqICAtIGBzcmNYYCAmIGBzcmNZYCAob3B0aW9uYWwsIGRlZmF1bHQgYDBgKVxuICAgKiAgLSBgdHJnWGAgJiBgdHJnWWAgKG9wdGlvbmFsLCBkZWZhdWx0IGAwYClcbiAgICpcbiAgICogVGhvc2UgdmFsdWVzIGFyZSBnb2luZyB0byBiZSB1c2VkIGJ5IGBjdHguZHJhd0ltYWdlKClgLlxuICAgKi8gcmVzaXplOiBmdW5jdGlvbihmaWxlLCB3aWR0aCwgaGVpZ2h0LCByZXNpemVNZXRob2QpIHtcbiAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICBzcmNYOiAwLFxuICAgICAgICAgICAgc3JjWTogMCxcbiAgICAgICAgICAgIHNyY1dpZHRoOiBmaWxlLndpZHRoLFxuICAgICAgICAgICAgc3JjSGVpZ2h0OiBmaWxlLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3JjUmF0aW8gPSBmaWxlLndpZHRoIC8gZmlsZS5oZWlnaHQ7XG4gICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIGRpbWVuc2lvbnMgaWYgbm90IHNwZWNpZmllZFxuICAgICAgICBpZiAod2lkdGggPT0gbnVsbCAmJiBoZWlnaHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgd2lkdGggPSBpbmZvLnNyY1dpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gaW5mby5zcmNIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAod2lkdGggPT0gbnVsbCkgd2lkdGggPSBoZWlnaHQgKiBzcmNSYXRpbztcbiAgICAgICAgZWxzZSBpZiAoaGVpZ2h0ID09IG51bGwpIGhlaWdodCA9IHdpZHRoIC8gc3JjUmF0aW87XG4gICAgICAgIC8vIE1ha2Ugc3VyZSBpbWFnZXMgYXJlbid0IHVwc2NhbGVkXG4gICAgICAgIHdpZHRoID0gTWF0aC5taW4od2lkdGgsIGluZm8uc3JjV2lkdGgpO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIGluZm8uc3JjSGVpZ2h0KTtcbiAgICAgICAgdmFyIHRyZ1JhdGlvID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgICAgIGlmIChpbmZvLnNyY1dpZHRoID4gd2lkdGggfHwgaW5mby5zcmNIZWlnaHQgPiBoZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIEltYWdlIGlzIGJpZ2dlciBhbmQgbmVlZHMgcmVzY2FsaW5nXG4gICAgICAgICAgICBpZiAocmVzaXplTWV0aG9kID09PSBcImNyb3BcIikge1xuICAgICAgICAgICAgICAgIGlmIChzcmNSYXRpbyA+IHRyZ1JhdGlvKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZm8uc3JjSGVpZ2h0ID0gZmlsZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGluZm8uc3JjV2lkdGggPSBpbmZvLnNyY0hlaWdodCAqIHRyZ1JhdGlvO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZm8uc3JjV2lkdGggPSBmaWxlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBpbmZvLnNyY0hlaWdodCA9IGluZm8uc3JjV2lkdGggLyB0cmdSYXRpbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc2l6ZU1ldGhvZCA9PT0gXCJjb250YWluXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBNZXRob2QgJ2NvbnRhaW4nXG4gICAgICAgICAgICAgICAgaWYgKHNyY1JhdGlvID4gdHJnUmF0aW8pIGhlaWdodCA9IHdpZHRoIC8gc3JjUmF0aW87XG4gICAgICAgICAgICAgICAgZWxzZSB3aWR0aCA9IGhlaWdodCAqIHNyY1JhdGlvO1xuICAgICAgICAgICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gcmVzaXplTWV0aG9kICdcIi5jb25jYXQocmVzaXplTWV0aG9kLCBcIidcIikpO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uc3JjWCA9IChmaWxlLndpZHRoIC0gaW5mby5zcmNXaWR0aCkgLyAyO1xuICAgICAgICBpbmZvLnNyY1kgPSAoZmlsZS5oZWlnaHQgLSBpbmZvLnNyY0hlaWdodCkgLyAyO1xuICAgICAgICBpbmZvLnRyZ1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGluZm8udHJnSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICB9LFxuICAgIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGZpbGUgKGZvciBleGFtcGxlLCByZXNpemUgYW4gaW1hZ2UgaWYgbmVjZXNzYXJ5KS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdXNlcyBgcmVzaXplV2lkdGhgIGFuZCBgcmVzaXplSGVpZ2h0YCAoaWYgcHJvdmlkZWQpIGFuZCByZXNpemVzXG4gICAqIGltYWdlcyBhY2NvcmRpbmcgdG8gdGhvc2UgZGltZW5zaW9ucy5cbiAgICpcbiAgICogR2V0cyB0aGUgYGZpbGVgIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIGFuZCBhIGBkb25lKClgIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQsIHRoYXQgbmVlZHNcbiAgICogdG8gYmUgaW52b2tlZCB3aXRoIHRoZSBmaWxlIHdoZW4gdGhlIHRyYW5zZm9ybWF0aW9uIGlzIGRvbmUuXG4gICAqLyB0cmFuc2Zvcm1GaWxlOiBmdW5jdGlvbihmaWxlLCBkb25lKSB7XG4gICAgICAgIGlmICgodGhpcy5vcHRpb25zLnJlc2l6ZVdpZHRoIHx8IHRoaXMub3B0aW9ucy5yZXNpemVIZWlnaHQpICYmIGZpbGUudHlwZS5tYXRjaCgvaW1hZ2UuKi8pKSByZXR1cm4gdGhpcy5yZXNpemVJbWFnZShmaWxlLCB0aGlzLm9wdGlvbnMucmVzaXplV2lkdGgsIHRoaXMub3B0aW9ucy5yZXNpemVIZWlnaHQsIHRoaXMub3B0aW9ucy5yZXNpemVNZXRob2QsIGRvbmUpO1xuICAgICAgICBlbHNlIHJldHVybiBkb25lKGZpbGUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAqIEEgc3RyaW5nIHRoYXQgY29udGFpbnMgdGhlIHRlbXBsYXRlIHVzZWQgZm9yIGVhY2ggZHJvcHBlZFxuICAgKiBmaWxlLiBDaGFuZ2UgaXQgdG8gZnVsZmlsbCB5b3VyIG5lZWRzIGJ1dCBtYWtlIHN1cmUgdG8gcHJvcGVybHlcbiAgICogcHJvdmlkZSBhbGwgZWxlbWVudHMuXG4gICAqXG4gICAqIElmIHlvdSB3YW50IHRvIHVzZSBhbiBhY3R1YWwgSFRNTCBlbGVtZW50IGluc3RlYWQgb2YgcHJvdmlkaW5nIGEgU3RyaW5nXG4gICAqIGFzIGEgY29uZmlnIG9wdGlvbiwgeW91IGNvdWxkIGNyZWF0ZSBhIGRpdiB3aXRoIHRoZSBpZCBgdHBsYCxcbiAgICogcHV0IHRoZSB0ZW1wbGF0ZSBpbnNpZGUgaXQgYW5kIHByb3ZpZGUgdGhlIGVsZW1lbnQgbGlrZSB0aGlzOlxuICAgKlxuICAgKiAgICAgZG9jdW1lbnRcbiAgICogICAgICAgLnF1ZXJ5U2VsZWN0b3IoJyN0cGwnKVxuICAgKiAgICAgICAuaW5uZXJIVE1MXG4gICAqXG4gICAqLyBwcmV2aWV3VGVtcGxhdGU6ICgvKkBfX1BVUkVfXyovJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkNjljNjE4ODhjYzFmNGM1NyRleHBvcnRzKSksXG4gICAgLypcbiAgIFRob3NlIGZ1bmN0aW9ucyByZWdpc3RlciB0aGVtc2VsdmVzIHRvIHRoZSBldmVudHMgb24gaW5pdCBhbmQgaGFuZGxlIGFsbFxuICAgdGhlIHVzZXIgaW50ZXJmYWNlIHNwZWNpZmljIHN0dWZmLiBPdmVyd3JpdGluZyB0aGVtIHdvbid0IGJyZWFrIHRoZSB1cGxvYWRcbiAgIGJ1dCBjYW4gYnJlYWsgdGhlIHdheSBpdCdzIGRpc3BsYXllZC5cbiAgIFlvdSBjYW4gb3ZlcndyaXRlIHRoZW0gaWYgeW91IGRvbid0IGxpa2UgdGhlIGRlZmF1bHQgYmVoYXZpb3IuIElmIHlvdSBqdXN0XG4gICB3YW50IHRvIGFkZCBhbiBhZGRpdGlvbmFsIGV2ZW50IGhhbmRsZXIsIHJlZ2lzdGVyIGl0IG9uIHRoZSBkcm9wem9uZSBvYmplY3RcbiAgIGFuZCBkb24ndCBvdmVyd3JpdGUgdGhvc2Ugb3B0aW9ucy5cbiAgICovIC8vIFRob3NlIGFyZSBzZWxmIGV4cGxhbmF0b3J5IGFuZCBzaW1wbHkgY29uY2VybiB0aGUgRHJhZ25Ecm9wLlxuICAgIGRyb3A6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZHotZHJhZy1ob3ZlclwiKTtcbiAgICB9LFxuICAgIGRyYWdzdGFydDogZnVuY3Rpb24oZSkge1xuICAgIH0sXG4gICAgZHJhZ2VuZDogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkei1kcmFnLWhvdmVyXCIpO1xuICAgIH0sXG4gICAgZHJhZ2VudGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LWRyYWctaG92ZXJcIik7XG4gICAgfSxcbiAgICBkcmFnb3ZlcjogZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1kcmFnLWhvdmVyXCIpO1xuICAgIH0sXG4gICAgZHJhZ2xlYXZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LWRyYWctaG92ZXJcIik7XG4gICAgfSxcbiAgICBwYXN0ZTogZnVuY3Rpb24oZSkge1xuICAgIH0sXG4gICAgLy8gQ2FsbGVkIHdoZW5ldmVyIHRoZXJlIGFyZSBubyBmaWxlcyBsZWZ0IGluIHRoZSBkcm9wem9uZSBhbnltb3JlLCBhbmQgdGhlXG4gICAgLy8gZHJvcHpvbmUgc2hvdWxkIGJlIGRpc3BsYXllZCBhcyBpZiBpbiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LXN0YXJ0ZWRcIik7XG4gICAgfSxcbiAgICAvLyBDYWxsZWQgd2hlbiBhIGZpbGUgaXMgYWRkZWQgdG8gdGhlIHF1ZXVlXG4gICAgLy8gUmVjZWl2ZXMgYGZpbGVgXG4gICAgYWRkZWRmaWxlOiBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQgPT09IHRoaXMucHJldmlld3NDb250YWluZXIpIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotc3RhcnRlZFwiKTtcbiAgICAgICAgaWYgKHRoaXMucHJldmlld3NDb250YWluZXIgJiYgIXRoaXMub3B0aW9ucy5kaXNhYmxlUHJldmlld3MpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBmaWxlLnByZXZpZXdFbGVtZW50ID0gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5jcmVhdGVFbGVtZW50KHRoaXMub3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUudHJpbSgpKTtcbiAgICAgICAgICAgIGZpbGUucHJldmlld1RlbXBsYXRlID0gZmlsZS5wcmV2aWV3RWxlbWVudDsgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgIHRoaXMucHJldmlld3NDb250YWluZXIuYXBwZW5kQ2hpbGQoZmlsZS5wcmV2aWV3RWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWR6LW5hbWVdXCIpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBmaWxlLm5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMSA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yMSA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvcjEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yMSA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWR6LXNpemVdXCIpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAxOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xID0gKF9zdGVwMSA9IF9pdGVyYXRvcjEubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEgPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IF9zdGVwMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSB0aGlzLmZpbGVzaXplKGZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjEgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMSAmJiBfaXRlcmF0b3IxLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IxLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFkZFJlbW92ZUxpbmtzKSB7XG4gICAgICAgICAgICAgICAgZmlsZS5fcmVtb3ZlTGluayA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuY3JlYXRlRWxlbWVudChcIjxhIGNsYXNzPVxcXCJkei1yZW1vdmVcXFwiIGhyZWY9XFxcImphdmFzY3JpcHQ6dW5kZWZpbmVkO1xcXCIgZGF0YS1kei1yZW1vdmU+XCIuY29uY2F0KHRoaXMub3B0aW9ucy5kaWN0UmVtb3ZlRmlsZSwgXCI8L2E+XCIpKTtcbiAgICAgICAgICAgICAgICBmaWxlLnByZXZpZXdFbGVtZW50LmFwcGVuZENoaWxkKGZpbGUuX3JlbW92ZUxpbmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlbW92ZUZpbGVFdmVudCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxID0gX3RoaXM7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuc3RhdHVzID09PSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlVQTE9BRElORykgcmV0dXJuICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuY29uZmlybShfdGhpcy5vcHRpb25zLmRpY3RDYW5jZWxVcGxvYWRDb25maXJtYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczIgPSBfdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGljdFJlbW92ZUZpbGVDb25maXJtYXRpb24pIHJldHVybiAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmNvbmZpcm0oX3RoaXMub3B0aW9ucy5kaWN0UmVtb3ZlRmlsZUNvbmZpcm1hdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBfdGhpcy5yZW1vdmVGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvcjIgPSBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1kei1yZW1vdmVdXCIpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZUxpbmsgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJlbW92ZUZpbGVFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIENhbGxlZCB3aGVuZXZlciBhIGZpbGUgaXMgcmVtb3ZlZC5cbiAgICByZW1vdmVkZmlsZTogZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCAhPSBudWxsICYmIGZpbGUucHJldmlld0VsZW1lbnQucGFyZW50Tm9kZSAhPSBudWxsKSBmaWxlLnByZXZpZXdFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmlsZS5wcmV2aWV3RWxlbWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpO1xuICAgIH0sXG4gICAgLy8gQ2FsbGVkIHdoZW4gYSB0aHVtYm5haWwgaGFzIGJlZW4gZ2VuZXJhdGVkXG4gICAgLy8gUmVjZWl2ZXMgYGZpbGVgIGFuZCBgZGF0YVVybGBcbiAgICB0aHVtYm5haWw6IGZ1bmN0aW9uKGZpbGUsIGRhdGFVcmwpIHtcbiAgICAgICAgaWYgKGZpbGUucHJldmlld0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LWZpbGUtcHJldmlld1wiKTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZHotdGh1bWJuYWlsXVwiKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGh1bWJuYWlsRWxlbWVudCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aHVtYm5haWxFbGVtZW50LmFsdCA9IGZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsRWxlbWVudC5zcmMgPSBkYXRhVXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotaW1hZ2UtcHJldmlld1wiKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyBDYWxsZWQgd2hlbmV2ZXIgYW4gZXJyb3Igb2NjdXJzXG4gICAgLy8gUmVjZWl2ZXMgYGZpbGVgIGFuZCBgbWVzc2FnZWBcbiAgICBlcnJvcjogZnVuY3Rpb24oZmlsZSwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkge1xuICAgICAgICAgICAgZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotZXJyb3JcIik7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwic3RyaW5nXCIgJiYgbWVzc2FnZS5lcnJvcikgbWVzc2FnZSA9IG1lc3NhZ2UuZXJyb3I7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWR6LWVycm9ybWVzc2FnZV1cIilbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZXJyb3JtdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICAvLyBDYWxsZWQgd2hlbiBhIGZpbGUgZ2V0cyBwcm9jZXNzZWQuIFNpbmNlIHRoZXJlIGlzIGEgY3VlLCBub3QgYWxsIGFkZGVkXG4gICAgLy8gZmlsZXMgYXJlIHByb2Nlc3NlZCBpbW1lZGlhdGVseS5cbiAgICAvLyBSZWNlaXZlcyBgZmlsZWBcbiAgICBwcm9jZXNzaW5nOiBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7XG4gICAgICAgICAgICBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1wcm9jZXNzaW5nXCIpO1xuICAgICAgICAgICAgaWYgKGZpbGUuX3JlbW92ZUxpbmspIHJldHVybiBmaWxlLl9yZW1vdmVMaW5rLmlubmVySFRNTCA9IHRoaXMub3B0aW9ucy5kaWN0Q2FuY2VsVXBsb2FkO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBwcm9jZXNzaW5nbXVsdGlwbGU6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG4gICAgLy8gQ2FsbGVkIHdoZW5ldmVyIHRoZSB1cGxvYWQgcHJvZ3Jlc3MgZ2V0cyB1cGRhdGVkLlxuICAgIC8vIFJlY2VpdmVzIGBmaWxlYCwgYHByb2dyZXNzYCAocGVyY2VudGFnZSAwLTEwMCkgYW5kIGBieXRlc1NlbnRgLlxuICAgIC8vIFRvIGdldCB0aGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG9mIHRoZSBmaWxlLCB1c2UgYGZpbGUuc2l6ZWBcbiAgICB1cGxvYWRwcm9ncmVzczogZnVuY3Rpb24oZmlsZSwgcHJvZ3Jlc3MsIGJ5dGVzU2VudCkge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgdHJ5IHtcbiAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZS5wcmV2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtZHotdXBsb2FkcHJvZ3Jlc3NdXCIpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICBub2RlLm5vZGVOYW1lID09PSBcIlBST0dSRVNTXCIgPyBub2RlLnZhbHVlID0gcHJvZ3Jlc3MgOiBub2RlLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQocHJvZ3Jlc3MsIFwiJVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gQ2FsbGVkIHdoZW5ldmVyIHRoZSB0b3RhbCB1cGxvYWQgcHJvZ3Jlc3MgZ2V0cyB1cGRhdGVkLlxuICAgIC8vIENhbGxlZCB3aXRoIHRvdGFsVXBsb2FkUHJvZ3Jlc3MgKDAtMTAwKSwgdG90YWxCeXRlcyBhbmQgdG90YWxCeXRlc1NlbnRcbiAgICB0b3RhbHVwbG9hZHByb2dyZXNzOiBmdW5jdGlvbigpIHtcbiAgICB9LFxuICAgIC8vIENhbGxlZCBqdXN0IGJlZm9yZSB0aGUgZmlsZSBpcyBzZW50LiBHZXRzIHRoZSBgeGhyYCBvYmplY3QgYXMgc2Vjb25kXG4gICAgLy8gcGFyYW1ldGVyLCBzbyB5b3UgY2FuIG1vZGlmeSBpdCAoZm9yIGV4YW1wbGUgdG8gYWRkIGEgQ1NSRiB0b2tlbikgYW5kIGFcbiAgICAvLyBgZm9ybURhdGFgIG9iamVjdCB0byBhZGQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbiAgICBzZW5kaW5nOiBmdW5jdGlvbigpIHtcbiAgICB9LFxuICAgIHNlbmRpbmdtdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICAvLyBXaGVuIHRoZSBjb21wbGV0ZSB1cGxvYWQgaXMgZmluaXNoZWQgYW5kIHN1Y2Nlc3NmdWxcbiAgICAvLyBSZWNlaXZlcyBgZmlsZWBcbiAgICBzdWNjZXNzOiBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSByZXR1cm4gZmlsZS5wcmV2aWV3RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotc3VjY2Vzc1wiKTtcbiAgICB9LFxuICAgIHN1Y2Nlc3NtdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICAvLyBXaGVuIHRoZSB1cGxvYWQgaXMgY2FuY2VsZWQuXG4gICAgY2FuY2VsZWQ6IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdChcImVycm9yXCIsIGZpbGUsIHRoaXMub3B0aW9ucy5kaWN0VXBsb2FkQ2FuY2VsZWQpO1xuICAgIH0sXG4gICAgY2FuY2VsZWRtdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICAvLyBXaGVuIHRoZSB1cGxvYWQgaXMgZmluaXNoZWQsIGVpdGhlciB3aXRoIHN1Y2Nlc3Mgb3IgYW4gZXJyb3IuXG4gICAgLy8gUmVjZWl2ZXMgYGZpbGVgXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgaWYgKGZpbGUuX3JlbW92ZUxpbmspIGZpbGUuX3JlbW92ZUxpbmsuaW5uZXJIVE1MID0gdGhpcy5vcHRpb25zLmRpY3RSZW1vdmVGaWxlO1xuICAgICAgICBpZiAoZmlsZS5wcmV2aWV3RWxlbWVudCkgcmV0dXJuIGZpbGUucHJldmlld0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImR6LWNvbXBsZXRlXCIpO1xuICAgIH0sXG4gICAgY29tcGxldGVtdWx0aXBsZTogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICBtYXhmaWxlc2V4Y2VlZGVkOiBmdW5jdGlvbigpIHtcbiAgICB9LFxuICAgIG1heGZpbGVzcmVhY2hlZDogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICBxdWV1ZWNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICB9LFxuICAgIGFkZGVkZmlsZXM6IGZ1bmN0aW9uKCkge1xuICAgIH1cbn07XG52YXIgJGI2NTdjMDMxNTVmYzI3ZTIkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9ICRiNjU3YzAzMTU1ZmMyN2UyJHZhciRkZWZhdWx0T3B0aW9ucztcblxuXG52YXIgJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24oRW1pdHRlcikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgICQ2bVU4dyRzd2NoZWxwZXJzLmluaGVyaXRzKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzksIEVtaXR0ZXIpO1xuICAgIGZ1bmN0aW9uICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkoZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgJDZtVTh3JHN3Y2hlbHBlcnMuY2xhc3NDYWxsQ2hlY2sodGhpcywgJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4gICAgICAgIHZhciBfdGhpcztcbiAgICAgICAgX3RoaXMgPSAkNm1VOHckc3djaGVscGVycy5wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsICQ2bVU4dyRzd2NoZWxwZXJzLmdldFByb3RvdHlwZU9mKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkpLmNhbGwodGhpcykpO1xuICAgICAgICB2YXIgZmFsbGJhY2ssIGxlZnQ7XG4gICAgICAgIF90aGlzLmVsZW1lbnQgPSBlbDtcbiAgICAgICAgX3RoaXMuY2xpY2thYmxlRWxlbWVudHMgPSBbXTtcbiAgICAgICAgX3RoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIF90aGlzLmZpbGVzID0gW107IC8vIEFsbCBmaWxlc1xuICAgICAgICBpZiAodHlwZW9mIF90aGlzLmVsZW1lbnQgPT09IFwic3RyaW5nXCIpIF90aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF90aGlzLmVsZW1lbnQpO1xuICAgICAgICAvLyBOb3QgY2hlY2tpbmcgaWYgaW5zdGFuY2Ugb2YgSFRNTEVsZW1lbnQgb3IgRWxlbWVudCBzaW5jZSBJRTkgaXMgZXh0cmVtZWx5IHdlaXJkLlxuICAgICAgICBpZiAoIV90aGlzLmVsZW1lbnQgfHwgX3RoaXMuZWxlbWVudC5ub2RlVHlwZSA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRyb3B6b25lIGVsZW1lbnQuXCIpO1xuICAgICAgICBpZiAoX3RoaXMuZWxlbWVudC5kcm9wem9uZSkgdGhyb3cgbmV3IEVycm9yKFwiRHJvcHpvbmUgYWxyZWFkeSBhdHRhY2hlZC5cIik7XG4gICAgICAgIC8vIE5vdyBhZGQgdGhpcyBkcm9wem9uZSB0byB0aGUgaW5zdGFuY2VzLlxuICAgICAgICAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5Lmluc3RhbmNlcy5wdXNoKCQ2bVU4dyRzd2NoZWxwZXJzLmFzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgICAgICAvLyBQdXQgdGhlIGRyb3B6b25lIGluc2lkZSB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICAgIF90aGlzLmVsZW1lbnQuZHJvcHpvbmUgPSAkNm1VOHckc3djaGVscGVycy5hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgICAgICB2YXIgZWxlbWVudE9wdGlvbnMgPSAobGVmdCA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkub3B0aW9uc0ZvckVsZW1lbnQoX3RoaXMuZWxlbWVudCkpICE9IG51bGwgPyBsZWZ0IDoge1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCgkNm1VOHckanVzdGV4dGVuZCkodHJ1ZSwge1xuICAgICAgICB9LCAkYjY1N2MwMzE1NWZjMjdlMiRleHBvcnQkMmUyYmNkODczOWFlMDM5LCBlbGVtZW50T3B0aW9ucywgb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucyA6IHtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLm9wdGlvbnMucHJldmlld1RlbXBsYXRlID0gX3RoaXMub3B0aW9ucy5wcmV2aWV3VGVtcGxhdGUucmVwbGFjZSgvXFxuKi9nLCBcIlwiKTtcbiAgICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgZmFpbGVkLCBqdXN0IGNhbGwgdGhlIGZhbGxiYWNrIGFuZCBsZWF2ZVxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5mb3JjZUZhbGxiYWNrIHx8ICEkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmlzQnJvd3NlclN1cHBvcnRlZCgpKSByZXR1cm4gJDZtVTh3JHN3Y2hlbHBlcnMucG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3RoaXMub3B0aW9ucy5mYWxsYmFjay5jYWxsKCQ2bVU4dyRzd2NoZWxwZXJzLmFzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgICAgLy8gQG9wdGlvbnMudXJsID0gQGVsZW1lbnQuZ2V0QXR0cmlidXRlIFwiYWN0aW9uXCIgdW5sZXNzIEBvcHRpb25zLnVybD9cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudXJsID09IG51bGwpIF90aGlzLm9wdGlvbnMudXJsID0gX3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgICAgIGlmICghX3RoaXMub3B0aW9ucy51cmwpIHRocm93IG5ldyBFcnJvcihcIk5vIFVSTCBwcm92aWRlZC5cIik7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmFjY2VwdGVkRmlsZXMgJiYgX3RoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcykgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbid0IHByb3ZpZGUgYm90aCAnYWNjZXB0ZWRGaWxlcycgYW5kICdhY2NlcHRlZE1pbWVUeXBlcycuICdhY2NlcHRlZE1pbWVUeXBlcycgaXMgZGVwcmVjYXRlZC5cIik7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlICYmIF90aGlzLm9wdGlvbnMuY2h1bmtpbmcpIHRocm93IG5ldyBFcnJvcihcIllvdSBjYW5ub3Qgc2V0IGJvdGg6IHVwbG9hZE11bHRpcGxlIGFuZCBjaHVua2luZy5cIik7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmJpbmFyeUJvZHkgJiYgX3RoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbm5vdCBzZXQgYm90aDogYmluYXJ5Qm9keSBhbmQgdXBsb2FkTXVsdGlwbGUuXCIpO1xuICAgICAgICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcykge1xuICAgICAgICAgICAgX3RoaXMub3B0aW9ucy5hY2NlcHRlZEZpbGVzID0gX3RoaXMub3B0aW9ucy5hY2NlcHRlZE1pbWVUeXBlcztcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5vcHRpb25zLmFjY2VwdGVkTWltZVR5cGVzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnJlbmFtZUZpbGVuYW1lICE9IG51bGwpIF90aGlzLm9wdGlvbnMucmVuYW1lRmlsZSA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLnJlbmFtZUZpbGVuYW1lLmNhbGwoJDZtVTh3JHN3Y2hlbHBlcnMuYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgZmlsZS5uYW1lLCBmaWxlKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLm1ldGhvZCA9PT0gXCJzdHJpbmdcIikgX3RoaXMub3B0aW9ucy5tZXRob2QgPSBfdGhpcy5vcHRpb25zLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBpZiAoKGZhbGxiYWNrID0gX3RoaXMuZ2V0RXhpc3RpbmdGYWxsYmFjaygpKSAmJiBmYWxsYmFjay5wYXJlbnROb2RlKSAvLyBSZW1vdmUgdGhlIGZhbGxiYWNrXG4gICAgICAgIGZhbGxiYWNrLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmFsbGJhY2spO1xuICAgICAgICAvLyBEaXNwbGF5IHByZXZpZXdzIGluIHRoZSBwcmV2aWV3c0NvbnRhaW5lciBlbGVtZW50IG9yIHRoZSBEcm9wem9uZSBlbGVtZW50IHVubGVzcyBleHBsaWNpdGx5IHNldCB0byBmYWxzZVxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5wcmV2aWV3c0NvbnRhaW5lciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnByZXZpZXdzQ29udGFpbmVyKSBfdGhpcy5wcmV2aWV3c0NvbnRhaW5lciA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZ2V0RWxlbWVudChfdGhpcy5vcHRpb25zLnByZXZpZXdzQ29udGFpbmVyLCBcInByZXZpZXdzQ29udGFpbmVyXCIpO1xuICAgICAgICAgICAgZWxzZSBfdGhpcy5wcmV2aWV3c0NvbnRhaW5lciA9IF90aGlzLmVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbGlja2FibGUgPT09IHRydWUpIF90aGlzLmNsaWNrYWJsZUVsZW1lbnRzID0gW1xuICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnRcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBlbHNlIF90aGlzLmNsaWNrYWJsZUVsZW1lbnRzID0gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5nZXRFbGVtZW50cyhfdGhpcy5vcHRpb25zLmNsaWNrYWJsZSwgXCJjbGlja2FibGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuaW5pdCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgICQ2bVU4dyRzd2NoZWxwZXJzLmNyZWF0ZUNsYXNzKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzksIFtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmV0dXJucyBhbGwgZmlsZXMgdGhhdCBoYXZlIGJlZW4gYWNjZXB0ZWRcbiAgICAgICAgICAgIGtleTogXCJnZXRBY2NlcHRlZEZpbGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWNjZXB0ZWRGaWxlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlcy5maWx0ZXIoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5hY2NlcHRlZDtcbiAgICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmV0dXJucyBhbGwgZmlsZXMgdGhhdCBoYXZlIGJlZW4gcmVqZWN0ZWRcbiAgICAgICAgICAgIC8vIE5vdCBzdXJlIHdoZW4gdGhhdCdzIGdvaW5nIHRvIGJlIHVzZWZ1bCwgYnV0IGFkZGVkIGZvciBjb21wbGV0ZW5lc3MuXG4gICAgICAgICAgICBrZXk6IFwiZ2V0UmVqZWN0ZWRGaWxlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlamVjdGVkRmlsZXMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFmaWxlLmFjY2VwdGVkO1xuICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiZ2V0RmlsZXNXaXRoU3RhdHVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsZXNXaXRoU3RhdHVzKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLnN0YXR1cyA9PT0gc3RhdHVzO1xuICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBSZXR1cm5zIGFsbCBmaWxlcyB0aGF0IGFyZSBpbiB0aGUgcXVldWVcbiAgICAgICAgICAgIGtleTogXCJnZXRRdWV1ZWRGaWxlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFF1ZXVlZEZpbGVzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZpbGVzV2l0aFN0YXR1cygkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlFVRVVFRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJnZXRVcGxvYWRpbmdGaWxlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVwbG9hZGluZ0ZpbGVzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZpbGVzV2l0aFN0YXR1cygkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlVQTE9BRElORyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJnZXRBZGRlZEZpbGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWRkZWRGaWxlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGaWxlc1dpdGhTdGF0dXMoJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5BRERFRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEZpbGVzIHRoYXQgYXJlIGVpdGhlciBxdWV1ZWQgb3IgdXBsb2FkaW5nXG4gICAgICAgICAgICBrZXk6IFwiZ2V0QWN0aXZlRmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVGaWxlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlcy5maWx0ZXIoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZS5zdGF0dXMgPT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuVVBMT0FESU5HIHx8IGZpbGUuc3RhdHVzID09PSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlFVRVVFRDtcbiAgICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiBEcm9wem9uZSBpcyBpbml0aWFsaXplZC4gWW91XG4gICAgICAgICAgICAvLyBjYW4gKGFuZCBzaG91bGQpIHNldHVwIGV2ZW50IGxpc3RlbmVycyBpbnNpZGUgdGhpcyBmdW5jdGlvbi5cbiAgICAgICAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMiA9IHRoaXMsIF90aGlzMSA9IHRoaXMsIF90aGlzMiA9IHRoaXMsIF90aGlzMyA9IHRoaXMsIF90aGlzNCA9IHRoaXMsIF90aGlzNSA9IHRoaXMsIF90aGlzNiA9IHRoaXMsIF90aGlzNyA9IHRoaXMsIF90aGlzOCA9IHRoaXMsIF90aGlzOSA9IHRoaXMsIF90aGlzMTAgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgaXQgaXNuJ3Qgc2V0IGFscmVhZHlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgPT09IFwiZm9ybVwiKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wem9uZVwiKSAmJiAhdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHotbWVzc2FnZVwiKSkgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuY3JlYXRlRWxlbWVudChcIjxkaXYgY2xhc3M9XFxcImR6LWRlZmF1bHQgZHotbWVzc2FnZVxcXCI+PGJ1dHRvbiBjbGFzcz1cXFwiZHotYnV0dG9uXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMuZGljdERlZmF1bHRNZXNzYWdlLCBcIjwvYnV0dG9uPjwvZGl2PlwiKSkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0dXBIaWRkZW5GaWxlSW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczExID0gX3RoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaGlkZGVuRmlsZUlucHV0KSBfdGhpcy5oaWRkZW5GaWxlSW5wdXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfdGhpcy5oaWRkZW5GaWxlSW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZGVuRmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZGVuRmlsZUlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJmaWxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMubWF4RmlsZXMgPT09IG51bGwgfHwgX3RoaXMub3B0aW9ucy5tYXhGaWxlcyA+IDEpIF90aGlzLmhpZGRlbkZpbGVJbnB1dC5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLCBcIm11bHRpcGxlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZGVuRmlsZUlucHV0LmNsYXNzTmFtZSA9IFwiZHotaGlkZGVuLWlucHV0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hY2NlcHRlZEZpbGVzICE9PSBudWxsKSBfdGhpcy5oaWRkZW5GaWxlSW5wdXQuc2V0QXR0cmlidXRlKFwiYWNjZXB0XCIsIF90aGlzLm9wdGlvbnMuYWNjZXB0ZWRGaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jYXB0dXJlICE9PSBudWxsKSBfdGhpcy5oaWRkZW5GaWxlSW5wdXQuc2V0QXR0cmlidXRlKFwiY2FwdHVyZVwiLCBfdGhpcy5vcHRpb25zLmNhcHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFraW5nIHN1cmUgdGhhdCBubyBvbmUgY2FuIFwidGFiXCIgaW50byB0aGlzIGZpZWxkLlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGlkZGVuRmlsZUlucHV0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiLTFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3Qgc2V0dGluZyBgZGlzcGxheT1cIm5vbmVcImAgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRvbid0IGFjY2VwdCBjbGlja3NcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uIGVsZW1lbnRzIHRoYXQgYXJlbid0IGRpc3BsYXllZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS50b3AgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGRlbkZpbGVJbnB1dC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRkZW5GaWxlSW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRkZW5GaWxlSW5wdXQuc3R5bGUud2lkdGggPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZ2V0RWxlbWVudChfdGhpcy5vcHRpb25zLmhpZGRlbklucHV0Q29udGFpbmVyLCBcImhpZGRlbklucHV0Q29udGFpbmVyXCIpLmFwcGVuZENoaWxkKF90aGlzLmhpZGRlbkZpbGVJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRkZW5GaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2hpZGRlbkZpbGVJbnB1dCA9IF90aGlzMTEuaGlkZGVuRmlsZUlucHV0LCBmaWxlcyA9IF9oaWRkZW5GaWxlSW5wdXQuZmlsZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoKSB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5hZGRGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5lbWl0KFwiYWRkZWRmaWxlc1wiLCBmaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBIaWRkZW5GaWxlSW5wdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzZXR1cEhpZGRlbkZpbGVJbnB1dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLlVSTCA9IHdpbmRvdy5VUkwgIT09IG51bGwgPyB3aW5kb3cuVVJMIDogd2luZG93LndlYmtpdFVSTDtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGFsbCBldmVudCBsaXN0ZW5lcnMgb24gdGhlIERyb3B6b25lIG9iamVjdCBpdHNlbGYuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXkncmUgbm90IGluIEBzZXR1cEV2ZW50TGlzdGVuZXJzKCkgYmVjYXVzZSB0aGV5IHNob3VsZG4ndCBiZSByZW1vdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFnYWluIHdoZW4gdGhlIGRyb3B6b25lIGdldHMgZGlzYWJsZWQuXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gdGhpcy5ldmVudHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub24oZXZlbnROYW1lLCB0aGlzLm9wdGlvbnNbZXZlbnROYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwidXBsb2FkcHJvZ3Jlc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczEyLnVwZGF0ZVRvdGFsVXBsb2FkUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwicmVtb3ZlZGZpbGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczEudXBkYXRlVG90YWxVcGxvYWRQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjYW5jZWxlZFwiLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZW1pdChcImNvbXBsZXRlXCIsIGZpbGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIEVtaXQgYSBgcXVldWVjb21wbGV0ZWAgZXZlbnQgaWYgYWxsIGZpbGVzIGZpbmlzaGVkIHVwbG9hZGluZy5cbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY29tcGxldGVcIiwgZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMSA9IF90aGlzMztcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5nZXRBZGRlZEZpbGVzKCkubGVuZ3RoID09PSAwICYmIF90aGlzMy5nZXRVcGxvYWRpbmdGaWxlcygpLmxlbmd0aCA9PT0gMCAmJiBfdGhpczMuZ2V0UXVldWVkRmlsZXMoKS5sZW5ndGggPT09IDApIC8vIFRoaXMgbmVlZHMgdG8gYmUgZGVmZXJyZWQgc28gdGhhdCBgcXVldWVjb21wbGV0ZWAgcmVhbGx5IHRyaWdnZXJzIGFmdGVyIGBjb21wbGV0ZWBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMxMS5lbWl0KFwicXVldWVjb21wbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5zRmlsZXMgPSBmdW5jdGlvbiBjb250YWluc0ZpbGVzKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyLnR5cGVzKSAvLyBCZWNhdXNlIGUuZGF0YVRyYW5zZmVyLnR5cGVzIGlzIGFuIE9iamVjdCBpblxuICAgICAgICAgICAgICAgICAgICAvLyBJRSwgd2UgbmVlZCB0byBpdGVyYXRlIGxpa2UgdGhpcyBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAgICAgICAgIC8vIHVzaW5nIGUuZGF0YVRyYW5zZmVyLnR5cGVzLnNvbWUoKVxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZS5kYXRhVHJhbnNmZXIudHlwZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyLnR5cGVzW2ldID09PSBcIkZpbGVzXCIpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBub1Byb3BhZ2F0aW9uID0gZnVuY3Rpb24gbm9Qcm9wYWdhdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBmaWxlcywgd2UgZG9uJ3Qgd2FudCB0byBzdG9wXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3BhZ2F0aW9uIHNvIHdlIGRvbid0IGludGVyZmVyZSB3aXRoIG90aGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYWcgYW5kIGRyb3AgYmVoYXZpb3VyLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5zRmlsZXMoZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdzdGFydDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM0LmVtaXQoXCJkcmFnc3RhcnRcIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZW50ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9Qcm9wYWdhdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5lbWl0KFwiZHJhZ2VudGVyXCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ292ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFrZXMgaXQgcG9zc2libGUgdG8gZHJhZyBmaWxlcyBmcm9tIGNocm9tZSdzIGRvd25sb2FkIGJhclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5NTI2NDMwL2RyYWctYW5kLWRyb3AtZmlsZS11cGxvYWRzLWZyb20tY2hyb21lLWRvd25sb2Fkcy1iYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDExIChTQ1JJUFQ2NTUzNSBleGNlcHRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlZmN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZjdCA9IGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibW92ZVwiID09PSBlZmN0IHx8IFwibGlua01vdmVcIiA9PT0gZWZjdCA/IFwibW92ZVwiIDogXCJjb3B5XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vUHJvcGFnYXRpb24oZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczYuZW1pdChcImRyYWdvdmVyXCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2xlYXZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczcuZW1pdChcImRyYWdsZWF2ZVwiLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3A6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9Qcm9wYWdhdGlvbihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOC5kcm9wKGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2VuZDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXM5LmVtaXQoXCJkcmFnZW5kXCIsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oY2xpY2thYmxlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMxMSA9IF90aGlzMTA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczEwLmxpc3RlbmVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGNsaWNrYWJsZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgdGhlIGFjdHVhbCBkcm9wem9uZSBvciB0aGUgbWVzc2FnZSBlbGVtZW50IHNob3VsZCB0cmlnZ2VyIGZpbGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja2FibGVFbGVtZW50ICE9PSBfdGhpczExLmVsZW1lbnQgfHwgZXZ0LnRhcmdldCA9PT0gX3RoaXMxMS5lbGVtZW50IHx8ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZWxlbWVudEluc2lkZShldnQudGFyZ2V0LCBfdGhpczExLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5kei1tZXNzYWdlXCIpKSkgX3RoaXMxMS5oaWRkZW5GaWxlSW5wdXQuY2xpY2soKTsgLy8gRm9yd2FyZCB0aGUgY2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBOb3QgZnVsbHkgdGVzdGVkIHlldFxuICAgICAgICAgICAga2V5OiBcImRlc3Ryb3lcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsRmlsZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGlkZGVuRmlsZUlucHV0ICE9IG51bGwgPyB0aGlzLmhpZGRlbkZpbGVJbnB1dC5wYXJlbnROb2RlIDogdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuRmlsZUlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5oaWRkZW5GaWxlSW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGRlbkZpbGVJbnB1dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZHJvcHpvbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuaW5zdGFuY2VzLnNwbGljZSgkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5Lmluc3RhbmNlcy5pbmRleE9mKHRoaXMpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcInVwZGF0ZVRvdGFsVXBsb2FkUHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUb3RhbFVwbG9hZFByb2dyZXNzKCkge1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbFVwbG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbEJ5dGVzU2VudCA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHRvdGFsQnl0ZXMgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVGaWxlcyA9IHRoaXMuZ2V0QWN0aXZlRmlsZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IHRoaXMuZ2V0QWN0aXZlRmlsZXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxCeXRlc1NlbnQgKz0gZmlsZS51cGxvYWQuYnl0ZXNTZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsQnl0ZXMgKz0gZmlsZS51cGxvYWQudG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG90YWxVcGxvYWRQcm9ncmVzcyA9IDEwMCAqIHRvdGFsQnl0ZXNTZW50IC8gdG90YWxCeXRlcztcbiAgICAgICAgICAgICAgICB9IGVsc2UgdG90YWxVcGxvYWRQcm9ncmVzcyA9IDEwMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KFwidG90YWx1cGxvYWRwcm9ncmVzc1wiLCB0b3RhbFVwbG9hZFByb2dyZXNzLCB0b3RhbEJ5dGVzLCB0b3RhbEJ5dGVzU2VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEBvcHRpb25zLnBhcmFtTmFtZSBjYW4gYmUgYSBmdW5jdGlvbiB0YWtpbmcgb25lIHBhcmFtZXRlciByYXRoZXIgdGhhbiBhIHN0cmluZy5cbiAgICAgICAgICAgIC8vIEEgcGFyYW1ldGVyIG5hbWUgZm9yIGEgZmlsZSBpcyBvYnRhaW5lZCBzaW1wbHkgYnkgY2FsbGluZyB0aGlzIHdpdGggYW4gaW5kZXggbnVtYmVyLlxuICAgICAgICAgICAga2V5OiBcIl9nZXRQYXJhbU5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UGFyYW1OYW1lKG4pIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5wYXJhbU5hbWUgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRoaXMub3B0aW9ucy5wYXJhbU5hbWUobik7XG4gICAgICAgICAgICAgICAgZWxzZSByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5vcHRpb25zLnBhcmFtTmFtZSkuY29uY2F0KHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSA/IFwiW1wiLmNvbmNhdChuLCBcIl1cIikgOiBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gSWYgQG9wdGlvbnMucmVuYW1lRmlsZSBpcyBhIGZ1bmN0aW9uLFxuICAgICAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZCB0byByZW5hbWUgdGhlIGZpbGUubmFtZSBiZWZvcmUgYXBwZW5kaW5nIGl0IHRvIHRoZSBmb3JtRGF0YVxuICAgICAgICAgICAga2V5OiBcIl9yZW5hbWVGaWxlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmFtZUZpbGUoZmlsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnJlbmFtZUZpbGUgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGZpbGUubmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlbmFtZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFJldHVybnMgYSBmb3JtIHRoYXQgY2FuIGJlIHVzZWQgYXMgZmFsbGJhY2sgaWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBEcmFnbkRyb3BcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBJZiB0aGUgZHJvcHpvbmUgaXMgYWxyZWFkeSBhIGZvcm0sIG9ubHkgdGhlIGlucHV0IGZpZWxkIGFuZCBidXR0b24gYXJlIHJldHVybmVkLiBPdGhlcndpc2UgYSBjb21wbGV0ZSBmb3JtIGVsZW1lbnQgaXMgcHJvdmlkZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGNvZGUgaGFzIHRvIHBhc3MgaW4gSUU3IDooXG4gICAgICAgICAgICBrZXk6IFwiZ2V0RmFsbGJhY2tGb3JtXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmFsbGJhY2tGb3JtKCkge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZhbGxiYWNrLCBmb3JtO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0ZhbGxiYWNrID0gdGhpcy5nZXRFeGlzdGluZ0ZhbGxiYWNrKCkpIHJldHVybiBleGlzdGluZ0ZhbGxiYWNrO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZHNTdHJpbmcgPSAnPGRpdiBjbGFzcz1cImR6LWZhbGxiYWNrXCI+JztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRpY3RGYWxsYmFja1RleHQpIGZpZWxkc1N0cmluZyArPSBcIjxwPlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMuZGljdEZhbGxiYWNrVGV4dCwgXCI8L3A+XCIpO1xuICAgICAgICAgICAgICAgIGZpZWxkc1N0cmluZyArPSBcIjxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBuYW1lPVxcXCJcIi5jb25jYXQodGhpcy5fZ2V0UGFyYW1OYW1lKDApLCBcIlxcXCIgXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUgPyAnbXVsdGlwbGU9XCJtdWx0aXBsZVwiJyA6IHVuZGVmaW5lZCwgXCIgLz48aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiVXBsb2FkIVxcXCI+PC9kaXY+XCIpO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZHMgPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmNyZWF0ZUVsZW1lbnQoZmllbGRzU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgIT09IFwiRk9STVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm0gPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmNyZWF0ZUVsZW1lbnQoXCI8Zm9ybSBhY3Rpb249XFxcIlwiLmNvbmNhdCh0aGlzLm9wdGlvbnMudXJsLCBcIlxcXCIgZW5jdHlwZT1cXFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVxcXCIgbWV0aG9kPVxcXCJcIikuY29uY2F0KHRoaXMub3B0aW9ucy5tZXRob2QsIFwiXFxcIj48L2Zvcm0+XCIpKTtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChmaWVsZHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBlbmN0eXBlIGFuZCBtZXRob2QgYXR0cmlidXRlcyBhcmUgc2V0IHByb3Blcmx5XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcIm1ldGhvZFwiLCB0aGlzLm9wdGlvbnMubWV0aG9kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm0gIT0gbnVsbCA/IGZvcm0gOiBmaWVsZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFJldHVybnMgdGhlIGZhbGxiYWNrIGVsZW1lbnRzIGlmIHRoZXkgZXhpc3QgYWxyZWFkeVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoaXMgY29kZSBoYXMgdG8gcGFzcyBpbiBJRTcgOihcbiAgICAgICAgICAgIGtleTogXCJnZXRFeGlzdGluZ0ZhbGxiYWNrXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RXhpc3RpbmdGYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0RmFsbGJhY2sgPSBmdW5jdGlvbiBnZXRGYWxsYmFjayhlbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBlbGVtZW50c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvKF58IClmYWxsYmFjaygkfCApLy50ZXN0KGVsLmNsYXNzTmFtZSkpIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvcm1cIlxuICAgICAgICAgICAgICAgICAgICBdW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnTmFtZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhbGxiYWNrID0gZ2V0RmFsbGJhY2sodGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpKSkgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEFjdGl2YXRlcyBhbGwgbGlzdGVuZXJzIHN0b3JlZCBpbiBAbGlzdGVuZXJzXG4gICAgICAgICAgICBrZXk6IFwic2V0dXBFdmVudExpc3RlbmVyc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLm1hcChmdW5jdGlvbihlbGVtZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGV2ZW50IGluIGVsZW1lbnRMaXN0ZW5lcnMuZXZlbnRzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBlbGVtZW50TGlzdGVuZXJzLmV2ZW50c1tldmVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudExpc3RlbmVycy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gRGVhY3RpdmF0ZXMgYWxsIGxpc3RlbmVycyBzdG9yZWQgaW4gQGxpc3RlbmVyc1xuICAgICAgICAgICAga2V5OiBcInJlbW92ZUV2ZW50TGlzdGVuZXJzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLm1hcChmdW5jdGlvbihlbGVtZW50TGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGV2ZW50IGluIGVsZW1lbnRMaXN0ZW5lcnMuZXZlbnRzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBlbGVtZW50TGlzdGVuZXJzLmV2ZW50c1tldmVudF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudExpc3RlbmVycy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmVtb3ZlcyBhbGwgZXZlbnQgbGlzdGVuZXJzIGFuZCBjYW5jZWxzIGFsbCBmaWxlcyBpbiB0aGUgcXVldWUgb3IgYmVpbmcgcHJvY2Vzc2VkLlxuICAgICAgICAgICAga2V5OiBcImRpc2FibGVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja2FibGVFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LWNsaWNrYWJsZVwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZXMubWFwKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbFVwbG9hZChmaWxlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcImVuYWJsZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kaXNhYmxlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrYWJsZUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotY2xpY2thYmxlXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmV0dXJucyBhIG5pY2VseSBmb3JtYXR0ZWQgZmlsZXNpemVcbiAgICAgICAgICAgIGtleTogXCJmaWxlc2l6ZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGVzaXplKHNpemUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRTaXplID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRVbml0ID0gXCJiXCI7XG4gICAgICAgICAgICAgICAgaWYgKHNpemUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1bml0cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYlwiXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5pdCA9IHVuaXRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1dG9mZiA9IE1hdGgucG93KHRoaXMub3B0aW9ucy5maWxlc2l6ZUJhc2UsIDQgLSBpKSAvIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpemUgPj0gY3V0b2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTaXplID0gc2l6ZSAvIE1hdGgucG93KHRoaXMub3B0aW9ucy5maWxlc2l6ZUJhc2UsIDQgLSBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFVuaXQgPSB1bml0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2l6ZSA9IE1hdGgucm91bmQoMTAgKiBzZWxlY3RlZFNpemUpIC8gMTA7IC8vIEN1dHRpbmcgb2YgZGlnaXRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIjxzdHJvbmc+XCIuY29uY2F0KHNlbGVjdGVkU2l6ZSwgXCI8L3N0cm9uZz4gXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMuZGljdEZpbGVTaXplVW5pdHNbc2VsZWN0ZWRVbml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEFkZHMgb3IgcmVtb3ZlcyB0aGUgYGR6LW1heC1maWxlcy1yZWFjaGVkYCBjbGFzcyBmcm9tIHRoZSBmb3JtLlxuICAgICAgICAgICAga2V5OiBcIl91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVNYXhGaWxlc1JlYWNoZWRDbGFzcygpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1heEZpbGVzICE9IG51bGwgJiYgdGhpcy5nZXRBY2NlcHRlZEZpbGVzKCkubGVuZ3RoID49IHRoaXMub3B0aW9ucy5tYXhGaWxlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRBY2NlcHRlZEZpbGVzKCkubGVuZ3RoID09PSB0aGlzLm9wdGlvbnMubWF4RmlsZXMpIHRoaXMuZW1pdChcIm1heGZpbGVzcmVhY2hlZFwiLCB0aGlzLmZpbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZHotbWF4LWZpbGVzLXJlYWNoZWRcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImR6LW1heC1maWxlcy1yZWFjaGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiZHJvcFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRyb3AoZSkge1xuICAgICAgICAgICAgICAgIGlmICghZS5kYXRhVHJhbnNmZXIpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkcm9wXCIsIGUpO1xuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIEZpbGVMaXN0IHRvIGFuIEFycmF5XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgZm9yIElFMTFcbiAgICAgICAgICAgICAgICB2YXIgZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZS5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoOyBpKyspZmlsZXNbaV0gPSBlLmRhdGFUcmFuc2Zlci5maWxlc1tpXTtcbiAgICAgICAgICAgICAgICAvLyBFdmVuIGlmIGl0J3MgYSBmb2xkZXIsIGZpbGVzLmxlbmd0aCB3aWxsIGNvbnRhaW4gdGhlIGZvbGRlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2RhdGFUcmFuc2ZlciA9IGUuZGF0YVRyYW5zZmVyLCBpdGVtcyA9IF9kYXRhVHJhbnNmZXIuaXRlbXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGggJiYgaXRlbXNbMF0ud2Via2l0R2V0QXNFbnRyeSAhPSBudWxsKSAvLyBUaGUgYnJvd3NlciBzdXBwb3J0cyBkcm9wcGluZyBvZiBmb2xkZXJzLCBzbyBoYW5kbGUgaXRlbXMgaW5zdGVhZCBvZiBmaWxlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRGaWxlc0Zyb21JdGVtcyhpdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5oYW5kbGVGaWxlcyhmaWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImFkZGVkZmlsZXNcIiwgZmlsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwicGFzdGVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXN0ZShlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRhNjAxZmYzMGY0ODNlOTE3JHZhciRfX2d1YXJkX18oZSAhPSBudWxsID8gZS5jbGlwYm9hcmREYXRhIDogdW5kZWZpbmVkLCBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4Lml0ZW1zO1xuICAgICAgICAgICAgICAgIH0pID09IG51bGwpIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJwYXN0ZVwiLCBlKTtcbiAgICAgICAgICAgICAgICB2YXIgX2NsaXBib2FyZERhdGEgPSBlLmNsaXBib2FyZERhdGEsIGl0ZW1zID0gX2NsaXBib2FyZERhdGEuaXRlbXM7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkgcmV0dXJuIHRoaXMuX2FkZEZpbGVzRnJvbUl0ZW1zKGl0ZW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcImhhbmRsZUZpbGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlRmlsZXMoZmlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gV2hlbiBhIGZvbGRlciBpcyBkcm9wcGVkIChvciBmaWxlcyBhcmUgcGFzdGVkKSwgaXRlbXMgbXVzdCBiZSBoYW5kbGVkXG4gICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIGZpbGVzLlxuICAgICAgICAgICAga2V5OiBcIl9hZGRGaWxlc0Zyb21JdGVtc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRGaWxlc0Zyb21JdGVtcyhpdGVtcykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBpdGVtc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLndlYmtpdEdldEFzRW50cnkgIT0gbnVsbCAmJiAoZW50cnkgPSBpdGVtLndlYmtpdEdldEFzRW50cnkoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSkgcmVzdWx0LnB1c2goX3RoaXMuYWRkRmlsZShpdGVtLmdldEFzRmlsZSgpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KSAvLyBBcHBlbmQgYWxsIGZpbGVzIGZyb20gdGhhdCBkaXJlY3RvcnkgdG8gZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goX3RoaXMuX2FkZEZpbGVzRnJvbURpcmVjdG9yeShlbnRyeSwgZW50cnkubmFtZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHJlc3VsdC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmdldEFzRmlsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmtpbmQgPT0gbnVsbCB8fCBpdGVtLmtpbmQgPT09IFwiZmlsZVwiKSByZXN1bHQucHVzaChfdGhpcy5hZGRGaWxlKGl0ZW0uZ2V0QXNGaWxlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSByZXN1bHQucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXN1bHQucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gR29lcyB0aHJvdWdoIHRoZSBkaXJlY3RvcnksIGFuZCBhZGRzIGVhY2ggZmlsZSBpdCBmaW5kcyByZWN1cnNpdmVseVxuICAgICAgICAgICAga2V5OiBcIl9hZGRGaWxlc0Zyb21EaXJlY3RvcnlcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRmlsZXNGcm9tRGlyZWN0b3J5KGRpcmVjdG9yeSwgcGF0aCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRpclJlYWRlciA9IGRpcmVjdG9yeS5jcmVhdGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRhNjAxZmYzMGY0ODNlOTE3JHZhciRfX2d1YXJkTWV0aG9kX18oY29uc29sZSwgXCJsb2dcIiwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8ubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgcmVhZEVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzMSA9IF90aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyUmVhZGVyLnJlYWRFbnRyaWVzKGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZW50cmllc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMyID0gX3RoaXMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzRmlsZSkgZW50cnkuZmlsZShmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLmlnbm9yZUhpZGRlbkZpbGVzICYmIGZpbGUubmFtZS5zdWJzdHJpbmcoMCwgMSkgPT09IFwiLlwiKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5mdWxsUGF0aCA9IFwiXCIuY29uY2F0KHBhdGgsIFwiL1wiKS5jb25jYXQoZmlsZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmFkZEZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KSBfdGhpczEuX2FkZEZpbGVzRnJvbURpcmVjdG9yeShlbnRyeSwgXCJcIi5jb25jYXQocGF0aCwgXCIvXCIpLmNvbmNhdChlbnRyeS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjYWxsIHJlYWRFbnRyaWVzKCkgYWdhaW4sIHNpbmNlIGJyb3dzZXIgb25seSBoYW5kbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZmlyc3QgMTAwIGVudHJpZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRGlyZWN0b3J5UmVhZGVyI3JlYWRFbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvckhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRFbnRyaWVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIElmIGBkb25lKClgIGlzIGNhbGxlZCB3aXRob3V0IGFyZ3VtZW50IHRoZSBmaWxlIGlzIGFjY2VwdGVkXG4gICAgICAgICAgICAvLyBJZiB5b3UgY2FsbCBpdCB3aXRoIGFuIGVycm9yIG1lc3NhZ2UsIHRoZSBmaWxlIGlzIHJlamVjdGVkXG4gICAgICAgICAgICAvLyAoVGhpcyBhbGxvd3MgZm9yIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uKVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRoZSBmaWxlc2l6ZSwgYW5kIGlmIHRoZSBmaWxlLnR5cGUgcGFzc2VzIHRoZVxuICAgICAgICAgICAgLy8gYGFjY2VwdGVkRmlsZXNgIGNoZWNrLlxuICAgICAgICAgICAga2V5OiBcImFjY2VwdFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFjY2VwdChmaWxlLCBkb25lKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tYXhGaWxlc2l6ZSAmJiBmaWxlLnNpemUgPiB0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUgKiAxMDQ4NTc2KSBkb25lKHRoaXMub3B0aW9ucy5kaWN0RmlsZVRvb0JpZy5yZXBsYWNlKFwie3tmaWxlc2l6ZX19XCIsIE1hdGgucm91bmQoZmlsZS5zaXplIC8gMTAyNCAvIDEwLjI0KSAvIDEwMCkucmVwbGFjZShcInt7bWF4RmlsZXNpemV9fVwiLCB0aGlzLm9wdGlvbnMubWF4RmlsZXNpemUpKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5pc1ZhbGlkRmlsZShmaWxlLCB0aGlzLm9wdGlvbnMuYWNjZXB0ZWRGaWxlcykpIGRvbmUodGhpcy5vcHRpb25zLmRpY3RJbnZhbGlkRmlsZVR5cGUpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy5tYXhGaWxlcyAhPSBudWxsICYmIHRoaXMuZ2V0QWNjZXB0ZWRGaWxlcygpLmxlbmd0aCA+PSB0aGlzLm9wdGlvbnMubWF4RmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSh0aGlzLm9wdGlvbnMuZGljdE1heEZpbGVzRXhjZWVkZWQucmVwbGFjZShcInt7bWF4RmlsZXN9fVwiLCB0aGlzLm9wdGlvbnMubWF4RmlsZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibWF4ZmlsZXNleGNlZWRlZFwiLCBmaWxlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5vcHRpb25zLmFjY2VwdC5jYWxsKHRoaXMsIGZpbGUsIGRvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiYWRkRmlsZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEZpbGUoZmlsZSkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgZmlsZS51cGxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHV1aWQ6ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkudXVpZHY0KCksXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIHRoZSB0b3RhbCB1cGxvYWQgc2l6ZSB0byBmaWxlLnNpemUgZm9yIHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBhY3R1YWwgZGlmZmVyZW50IHRoYW4gdGhlIHNpemUgdG8gYmUgdHJhbnNtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiBmaWxlLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzU2VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuX3JlbmFtZUZpbGUoZmlsZSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICBmaWxlLnN0YXR1cyA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuQURERUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiYWRkZWRmaWxlXCIsIGZpbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VucXVldWVUaHVtYm5haWwoZmlsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hY2NlcHQoZmlsZSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLmFjY2VwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXJyb3JQcm9jZXNzaW5nKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBlcnJvcik7IC8vIFdpbGwgc2V0IHRoZSBmaWxlLnN0YXR1c1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5hY2NlcHRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5hdXRvUXVldWUpIF90aGlzLmVucXVldWVGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdpbGwgc2V0IC5hY2NlcHRlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdXBkYXRlTWF4RmlsZXNSZWFjaGVkQ2xhc3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gV3JhcHBlciBmb3IgZW5xdWV1ZUZpbGVcbiAgICAgICAgICAgIGtleTogXCJlbnF1ZXVlRmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbnF1ZXVlRmlsZXMoZmlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVucXVldWVGaWxlKGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJlbnF1ZXVlRmlsZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVucXVldWVGaWxlKGZpbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5zdGF0dXMgPT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuQURERUQgJiYgZmlsZS5hY2NlcHRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBmaWxlLnN0YXR1cyA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuUVVFVUVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Qcm9jZXNzUXVldWUpIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnByb2Nlc3NRdWV1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTsgLy8gRGVmZXJyaW5nIHRoZSBjYWxsXG4gICAgICAgICAgICAgICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihcIlRoaXMgZmlsZSBjYW4ndCBiZSBxdWV1ZWQgYmVjYXVzZSBpdCBoYXMgYWxyZWFkeSBiZWVuIHByb2Nlc3NlZCBvciB3YXMgcmVqZWN0ZWQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiX2VucXVldWVUaHVtYm5haWxcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZW5xdWV1ZVRodW1ibmFpbChmaWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jcmVhdGVJbWFnZVRodW1ibmFpbHMgJiYgZmlsZS50eXBlLm1hdGNoKC9pbWFnZS4qLykgJiYgZmlsZS5zaXplIDw9IHRoaXMub3B0aW9ucy5tYXhUaHVtYm5haWxGaWxlc2l6ZSAqIDEwNDg1NzYpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGh1bWJuYWlsUXVldWUucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTsgLy8gRGVmZXJyaW5nIHRoZSBjYWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzVGh1bWJuYWlsUXVldWUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcHJvY2Vzc2luZ1RodW1ibmFpbCB8fCB0aGlzLl90aHVtYm5haWxRdWV1ZS5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzaW5nVGh1bWJuYWlsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IHRoaXMuX3RodW1ibmFpbFF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVGh1bWJuYWlsKGZpbGUsIHRoaXMub3B0aW9ucy50aHVtYm5haWxXaWR0aCwgdGhpcy5vcHRpb25zLnRodW1ibmFpbEhlaWdodCwgdGhpcy5vcHRpb25zLnRodW1ibmFpbE1ldGhvZCwgdHJ1ZSwgZnVuY3Rpb24oZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KFwidGh1bWJuYWlsXCIsIGZpbGUsIGRhdGFVcmwpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcHJvY2Vzc2luZ1RodW1ibmFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3NUaHVtYm5haWxRdWV1ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBDYW4gYmUgY2FsbGVkIGJ5IHRoZSB1c2VyIHRvIHJlbW92ZSBhIGZpbGVcbiAgICAgICAgICAgIGtleTogXCJyZW1vdmVGaWxlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRmlsZShmaWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuc3RhdHVzID09PSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlVQTE9BRElORykgdGhpcy5jYW5jZWxVcGxvYWQoZmlsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlcyA9ICRhNjAxZmYzMGY0ODNlOTE3JHZhciR3aXRob3V0KHRoaXMuZmlsZXMsIGZpbGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInJlbW92ZWRmaWxlXCIsIGZpbGUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRoaXMuZW1pdChcInJlc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBSZW1vdmVzIGFsbCBmaWxlcyB0aGF0IGFyZW4ndCBjdXJyZW50bHkgcHJvY2Vzc2VkIGZyb20gdGhlIGxpc3RcbiAgICAgICAgICAgIGtleTogXCJyZW1vdmVBbGxGaWxlc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbEZpbGVzKGNhbmNlbElmTmVjZXNzYXJ5KSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiBmaWxlcyBzaW5jZSByZW1vdmVGaWxlKCkgY2hhbmdlcyB0aGUgQGZpbGVzIGFycmF5LlxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxJZk5lY2Vzc2FyeSA9PSBudWxsKSBjYW5jZWxJZk5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSB0aGlzLmZpbGVzLnNsaWNlKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zdGF0dXMgIT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuVVBMT0FESU5HIHx8IGNhbmNlbElmTmVjZXNzYXJ5KSB0aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gUmVzaXplcyBhbiBpbWFnZSBiZWZvcmUgaXQgZ2V0cyBzZW50IHRvIHRoZSBzZXJ2ZXIuIFRoaXMgZnVuY3Rpb24gaXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2ZcbiAgICAgICAgICAgIC8vIGBvcHRpb25zLnRyYW5zZm9ybUZpbGVgIGlmIGByZXNpemVXaWR0aGAgb3IgYHJlc2l6ZUhlaWdodGAgYXJlIHNldC4gVGhlIGNhbGxiYWNrIGlzIGludm9rZWQgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHJlc2l6ZWQgYmxvYi5cbiAgICAgICAgICAgIGtleTogXCJyZXNpemVJbWFnZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZUltYWdlKGZpbGUsIHdpZHRoLCBoZWlnaHQsIHJlc2l6ZU1ldGhvZCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRodW1ibmFpbChmaWxlLCB3aWR0aCwgaGVpZ2h0LCByZXNpemVNZXRob2QsIHRydWUsIGZ1bmN0aW9uKGRhdGFVcmwsIGNhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FudmFzID09IG51bGwpIC8vIFRoZSBpbWFnZSBoYXMgbm90IGJlZW4gcmVzaXplZFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9vcHRpb25zID0gX3RoaXMub3B0aW9ucywgcmVzaXplTWltZVR5cGUgPSBfb3B0aW9ucy5yZXNpemVNaW1lVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNpemVNaW1lVHlwZSA9PSBudWxsKSByZXNpemVNaW1lVHlwZSA9IGZpbGUudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNpemVkRGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwocmVzaXplTWltZVR5cGUsIF90aGlzLm9wdGlvbnMucmVzaXplUXVhbGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzaXplTWltZVR5cGUgPT09IFwiaW1hZ2UvanBlZ1wiIHx8IHJlc2l6ZU1pbWVUeXBlID09PSBcImltYWdlL2pwZ1wiKSAvLyBOb3cgYWRkIHRoZSBvcmlnaW5hbCBFWElGIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemVkRGF0YVVSTCA9ICRhNjAxZmYzMGY0ODNlOTE3JHZhciRFeGlmUmVzdG9yZS5yZXN0b3JlKGZpbGUuZGF0YVVSTCwgcmVzaXplZERhdGFVUkwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZGF0YVVSSXRvQmxvYihyZXNpemVkRGF0YVVSTCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJjcmVhdGVUaHVtYm5haWxcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUaHVtYm5haWwoZmlsZSwgd2lkdGgsIGhlaWdodCwgcmVzaXplTWV0aG9kLCBmaXhPcmllbnRhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlLmRhdGFVUkwgPSBmaWxlUmVhZGVyLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3QgYm90aGVyIGNyZWF0aW5nIGEgdGh1bWJuYWlsIGZvciBTVkcgaW1hZ2VzIHNpbmNlIHRoZXkncmUgdmVjdG9yXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnR5cGUgPT09IFwiaW1hZ2Uvc3ZnK3htbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgY2FsbGJhY2soZmlsZVJlYWRlci5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNyZWF0ZVRodW1ibmFpbEZyb21VcmwoZmlsZSwgd2lkdGgsIGhlaWdodCwgcmVzaXplTWV0aG9kLCBmaXhPcmllbnRhdGlvbiwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBgbW9ja0ZpbGVgIG5lZWRzIHRvIGhhdmUgdGhlc2UgYXR0cmlidXRlczpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgeyBuYW1lOiAnbmFtZScsIHNpemU6IDEyMzQ1LCBpbWFnZVVybDogJycgfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGBjYWxsYmFja2Agd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIGltYWdlIGhhcyBiZWVuIGRvd25sb2FkZWQgYW5kIGRpc3BsYXllZC5cbiAgICAgICAgICAgIC8vIGBjcm9zc09yaWdpbmAgd2lsbCBiZSBhZGRlZCB0byB0aGUgYGltZ2AgdGFnIHdoZW4gYWNjZXNzaW5nIHRoZSBmaWxlLlxuICAgICAgICAgICAga2V5OiBcImRpc3BsYXlFeGlzdGluZ0ZpbGVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwbGF5RXhpc3RpbmdGaWxlKG1vY2tGaWxlLCBpbWFnZVVybCwgY2FsbGJhY2ssIGNyb3NzT3JpZ2luLCBwYXJhbSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNpemVUaHVtYm5haWwgPSBwYXJhbSA9PT0gdm9pZCAwID8gdHJ1ZSA6IHBhcmFtO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImFkZGVkZmlsZVwiLCBtb2NrRmlsZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVcIiwgbW9ja0ZpbGUpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzaXplVGh1bWJuYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInRodW1ibmFpbFwiLCBtb2NrRmlsZSwgaW1hZ2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uRG9uZSA9IGZ1bmN0aW9uKHRodW1ibmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdChcInRodW1ibmFpbFwiLCBtb2NrRmlsZSwgdGh1bWJuYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgbW9ja0ZpbGUuZGF0YVVSTCA9IGltYWdlVXJsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVRodW1ibmFpbEZyb21VcmwobW9ja0ZpbGUsIHRoaXMub3B0aW9ucy50aHVtYm5haWxXaWR0aCwgdGhpcy5vcHRpb25zLnRodW1ibmFpbEhlaWdodCwgdGhpcy5vcHRpb25zLnRodW1ibmFpbE1ldGhvZCwgdGhpcy5vcHRpb25zLmZpeE9yaWVudGF0aW9uLCBvbkRvbmUsIGNyb3NzT3JpZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJjcmVhdGVUaHVtYm5haWxGcm9tVXJsXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVGh1bWJuYWlsRnJvbVVybChmaWxlLCB3aWR0aCwgaGVpZ2h0LCByZXNpemVNZXRob2QsIGZpeE9yaWVudGF0aW9uLCBjYWxsYmFjaywgY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vIE5vdCB1c2luZyBgbmV3IEltYWdlYCBoZXJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gbGF0ZXN0IENocm9tZSB2ZXJzaW9ucy5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VueW8vZHJvcHpvbmUvcHVsbC8yMjZcbiAgICAgICAgICAgICAgICB2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NPcmlnaW4pIGltZy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuICAgICAgICAgICAgICAgIC8vIGZpeE9yaWVudGF0aW9uIGlzIG5vdCBuZWVkZWQgYW55bW9yZSB3aXRoIGJyb3dzZXJzIGhhbmRsaW5nIGltYWdlT3JpZW50YXRpb25cbiAgICAgICAgICAgICAgICBmaXhPcmllbnRhdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSlbXCJpbWFnZU9yaWVudGF0aW9uXCJdID09IFwiZnJvbS1pbWFnZVwiID8gZmFsc2UgOiBmaXhPcmllbnRhdGlvbjtcbiAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpczEgPSBfdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRFeGlmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygxKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBFWElGICE9PSBcInVuZGVmaW5lZFwiICYmIEVYSUYgIT09IG51bGwgJiYgZml4T3JpZW50YXRpb24pIGxvYWRFeGlmID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFWElGLmdldERhdGEoaW1nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soRVhJRi5nZXRUYWcodGhpcywgXCJPcmllbnRhdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRFeGlmKGZ1bmN0aW9uKG9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc2l6ZUluZm8gPSBfdGhpczEub3B0aW9ucy5yZXNpemUuY2FsbChfdGhpczEsIGZpbGUsIHdpZHRoLCBoZWlnaHQsIHJlc2l6ZU1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gcmVzaXplSW5mby50cmdXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSByZXNpemVJbmZvLnRyZ0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSByZXNpemVJbmZvLnRyZ0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcmVzaXplSW5mby50cmdXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChvcmllbnRhdGlvbil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBob3Jpem9udGFsIGZsaXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjYW52YXMud2lkdGgsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDE4MMKwIHJvdGF0ZSBsZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZShNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNhbCBmbGlwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmVydGljYWwgZmxpcCArIDkwIHJvdGF0ZSByaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKDAuNSAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDkwwrAgcm90YXRlIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoMC41ICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMCwgLWNhbnZhcy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBmbGlwICsgOTAgcm90YXRlIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoMC41ICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2FudmFzLmhlaWdodCwgLWNhbnZhcy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gOTDCsCByb3RhdGUgbGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKC0wLjUgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtY2FudmFzLmhlaWdodCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGJ1Z2ZpeCBmb3IgaU9TJyBzY2FsaW5nIGJ1Zy5cbiAgICAgICAgICAgICAgICAgICAgICAgICRhNjAxZmYzMGY0ODNlOTE3JHZhciRkcmF3SW1hZ2VJT1NGaXgoY3R4LCBpbWcsIHJlc2l6ZUluZm8uc3JjWCAhPSBudWxsID8gcmVzaXplSW5mby5zcmNYIDogMCwgcmVzaXplSW5mby5zcmNZICE9IG51bGwgPyByZXNpemVJbmZvLnNyY1kgOiAwLCByZXNpemVJbmZvLnNyY1dpZHRoLCByZXNpemVJbmZvLnNyY0hlaWdodCwgcmVzaXplSW5mby50cmdYICE9IG51bGwgPyByZXNpemVJbmZvLnRyZ1ggOiAwLCByZXNpemVJbmZvLnRyZ1kgIT0gbnVsbCA/IHJlc2l6ZUluZm8udHJnWSA6IDAsIHJlc2l6ZUluZm8udHJnV2lkdGgsIHJlc2l6ZUluZm8udHJnSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aHVtYm5haWwgPSBjYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHJldHVybiBjYWxsYmFjayh0aHVtYm5haWwsIGNhbnZhcyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIGltZy5vbmVycm9yID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGltZy5zcmMgPSBmaWxlLmRhdGFVUkw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEdvZXMgdGhyb3VnaCB0aGUgcXVldWUgYW5kIHByb2Nlc3NlcyBmaWxlcyBpZiB0aGVyZSBhcmVuJ3QgdG9vIG1hbnkgYWxyZWFkeS5cbiAgICAgICAgICAgIGtleTogXCJwcm9jZXNzUXVldWVcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzUXVldWUoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9vcHRpb25zID0gdGhpcy5vcHRpb25zLCBwYXJhbGxlbFVwbG9hZHMgPSBfb3B0aW9ucy5wYXJhbGxlbFVwbG9hZHM7XG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NpbmdMZW5ndGggPSB0aGlzLmdldFVwbG9hZGluZ0ZpbGVzKCkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBpID0gcHJvY2Vzc2luZ0xlbmd0aDtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgYWxyZWFkeSBhdCBsZWFzdCBhcyBtYW55IGZpbGVzIHVwbG9hZGluZyB0aGFuIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzaW5nTGVuZ3RoID49IHBhcmFsbGVsVXBsb2FkcykgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBxdWV1ZWRGaWxlcyA9IHRoaXMuZ2V0UXVldWVkRmlsZXMoKTtcbiAgICAgICAgICAgICAgICBpZiAoIShxdWV1ZWRGaWxlcy5sZW5ndGggPiAwKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIC8vIFRoZSBmaWxlcyBzaG91bGQgYmUgdXBsb2FkZWQgaW4gb25lIHJlcXVlc3RcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzRmlsZXMocXVldWVkRmlsZXMuc2xpY2UoMCwgcGFyYWxsZWxVcGxvYWRzIC0gcHJvY2Vzc2luZ0xlbmd0aCkpO1xuICAgICAgICAgICAgICAgIGVsc2Ugd2hpbGUoaSA8IHBhcmFsbGVsVXBsb2Fkcyl7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcXVldWVkRmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gcHJvY2Vzc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NGaWxlKHF1ZXVlZEZpbGVzLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBXcmFwcGVyIGZvciBgcHJvY2Vzc0ZpbGVzYFxuICAgICAgICAgICAga2V5OiBcInByb2Nlc3NGaWxlXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NGaWxlcyhbXG4gICAgICAgICAgICAgICAgICAgIGZpbGVcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gTG9hZHMgdGhlIGZpbGUsIHRoZW4gY2FsbHMgZmluaXNoZWRMb2FkaW5nKClcbiAgICAgICAgICAgIGtleTogXCJwcm9jZXNzRmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzRmlsZXMoZmlsZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnByb2Nlc3NpbmcgPSB0cnVlOyAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5zdGF0dXMgPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlVQTE9BRElORztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInByb2Nlc3NpbmdcIiwgZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB0aGlzLmVtaXQoXCJwcm9jZXNzaW5nbXVsdGlwbGVcIiwgZmlsZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZEZpbGVzKGZpbGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcIl9nZXRGaWxlc1dpdGhYaHJcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmlsZXNXaXRoWGhyKHhocikge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlcztcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZXMgPSB0aGlzLmZpbGVzLmZpbHRlcihmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLnhociA9PT0geGhyO1xuICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBDYW5jZWxzIHRoZSBmaWxlIHVwbG9hZCBhbmQgc2V0cyB0aGUgc3RhdHVzIHRvIENBTkNFTEVEXG4gICAgICAgICAgICAvLyAqKmlmKiogdGhlIGZpbGUgaXMgYWN0dWFsbHkgYmVpbmcgdXBsb2FkZWQuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIHN0aWxsIGluIHRoZSBxdWV1ZSwgdGhlIGZpbGUgaXMgYmVpbmcgcmVtb3ZlZCBmcm9tIGl0IGFuZCB0aGUgc3RhdHVzXG4gICAgICAgICAgICAvLyBzZXQgdG8gQ0FOQ0VMRUQuXG4gICAgICAgICAgICBrZXk6IFwiY2FuY2VsVXBsb2FkXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsVXBsb2FkKGZpbGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5zdGF0dXMgPT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuVVBMT0FESU5HKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cGVkRmlsZXMgPSB0aGlzLl9nZXRGaWxlc1dpdGhYaHIoZmlsZS54aHIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBncm91cGVkRmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBlZEZpbGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cGVkRmlsZS5zdGF0dXMgPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LkNBTkNFTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZS54aHIgIT09IFwidW5kZWZpbmVkXCIpIGZpbGUueGhyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMSA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yMSA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvcjEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvcjEgPSBncm91cGVkRmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDE7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjEgPSAoX3N0ZXAxID0gX2l0ZXJhdG9yMS5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMSA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cGVkRmlsZSA9IF9zdGVwMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJjYW5jZWxlZFwiLCBncm91cGVkRmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IxID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMSA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24xICYmIF9pdGVyYXRvcjEucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMS5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIHRoaXMuZW1pdChcImNhbmNlbGVkbXVsdGlwbGVcIiwgZ3JvdXBlZEZpbGVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGUuc3RhdHVzID09PSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LkFEREVEIHx8IGZpbGUuc3RhdHVzID09PSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlFVRVVFRCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlLnN0YXR1cyA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuQ0FOQ0VMRUQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNhbmNlbGVkXCIsIGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB0aGlzLmVtaXQoXCJjYW5jZWxlZG11bHRpcGxlXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1Byb2Nlc3NRdWV1ZSkgcmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJyZXNvbHZlT3B0aW9uXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzb2x2ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5Kyspe1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG9wdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwidXBsb2FkRmlsZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwbG9hZEZpbGUoZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVwbG9hZEZpbGVzKFtcbiAgICAgICAgICAgICAgICAgICAgZmlsZVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwidXBsb2FkRmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1cGxvYWRGaWxlcyhmaWxlcykge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRmlsZXMoZmlsZXMsIGZ1bmN0aW9uKHRyYW5zZm9ybWVkRmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2h1bmtpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENodW5raW5nIGlzIG5vdCBhbGxvd2VkIHRvIGJlIHVzZWQgd2l0aCBgdXBsb2FkTXVsdGlwbGVgIHNvIHdlIGtub3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhlcmUgaXMgb25seSBfX29uZV9fZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZEZpbGUgPSB0cmFuc2Zvcm1lZEZpbGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXNbMF0udXBsb2FkLmNodW5rZWQgPSBfdGhpcy5vcHRpb25zLmNodW5raW5nICYmIChfdGhpcy5vcHRpb25zLmZvcmNlQ2h1bmtpbmcgfHwgdHJhbnNmb3JtZWRGaWxlLnNpemUgPiBfdGhpcy5vcHRpb25zLmNodW5rU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlc1swXS51cGxvYWQudG90YWxDaHVua0NvdW50ID0gTWF0aC5jZWlsKHRyYW5zZm9ybWVkRmlsZS5zaXplIC8gX3RoaXMub3B0aW9ucy5jaHVua1NpemUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlc1swXS51cGxvYWQuY2h1bmtlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzMSA9IF90aGlzLCBfdGhpczQgPSBfdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgZmlsZSBzaG91bGQgYmUgc2VudCBpbiBjaHVua3MhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY2h1bmtpbmcgb3B0aW9uIGlzIHNldCwgd2UgKiprbm93KiogdGhhdCB0aGVyZSBjYW4gb25seSBiZSAqKm9uZSoqIGZpbGUsIHNpbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGxvYWRNdWx0aXBsZSBpcyBub3QgYWxsb3dlZCB3aXRoIHRoaXMgb3B0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZEZpbGUgPSB0cmFuc2Zvcm1lZEZpbGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ZWRDaHVua0NvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLmNodW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZU5leHRDaHVuayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVua0luZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBuZXh0IGl0ZW0gaW4gZmlsZS51cGxvYWQuY2h1bmtzIHRoYXQgaXMgbm90IGRlZmluZWQgeWV0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGZpbGUudXBsb2FkLmNodW5rc1tjaHVua0luZGV4XSAhPT0gdW5kZWZpbmVkKWNodW5rSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG1lYW5zLCB0aGF0IGFsbCBjaHVua3MgaGF2ZSBhbHJlYWR5IGJlZW4gc3RhcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmtJbmRleCA+PSBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydGVkQ2h1bmtDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGNodW5rSW5kZXggKiBfdGhpczEub3B0aW9ucy5jaHVua1NpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgX3RoaXMxLm9wdGlvbnMuY2h1bmtTaXplLCB0cmFuc2Zvcm1lZEZpbGUuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFCbG9jayA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogX3RoaXMxLl9nZXRQYXJhbU5hbWUoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRyYW5zZm9ybWVkRmlsZS53ZWJraXRTbGljZSA/IHRyYW5zZm9ybWVkRmlsZS53ZWJraXRTbGljZShzdGFydCwgZW5kKSA6IHRyYW5zZm9ybWVkRmlsZS5zbGljZShzdGFydCwgZW5kKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGUudXBsb2FkLmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua0luZGV4OiBjaHVua0luZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5jaHVua3NbY2h1bmtJbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBjaHVua0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQmxvY2s6IGRhdGFCbG9jayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LlVQTE9BRElORyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJpZXM6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMS5fdXBsb2FkRGF0YShmaWxlcywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhQmxvY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5maW5pc2hlZENodW5rVXBsb2FkID0gZnVuY3Rpb24oY2h1bmssIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzNSA9IF90aGlzNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxsRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnN0YXR1cyA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuU1VDQ0VTUztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgZGF0YSBmcm9tIHRoZSBjaHVua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmRhdGFCbG9jayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsucmVzcG9uc2UgPSBjaHVuay54aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnJlc3BvbnNlSGVhZGVycyA9IGNodW5rLnhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWF2aW5nIHRoaXMgcmVmZXJlbmNlIHRvIHhociB3aWxsIGNhdXNlIG1lbW9yeSBsZWFrcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuay54aHIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQ7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnVwbG9hZC5jaHVua3NbaV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGhhbmRsZU5leHRDaHVuaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS51cGxvYWQuY2h1bmtzW2ldLnN0YXR1cyAhPT0gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5TVUNDRVNTKSBhbGxGaW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRmluaXNoZWQpIF90aGlzNC5vcHRpb25zLmNodW5rc1VwbG9hZGVkKGZpbGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuX2ZpbmlzaGVkKGZpbGVzLCByZXNwb25zZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucGFyYWxsZWxDaHVua1VwbG9hZHMpIGZvcih2YXIgaSA9IDA7IGkgPCBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQ7IGkrKyloYW5kbGVOZXh0Q2h1bmsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaGFuZGxlTmV4dENodW5rKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YUJsb2NrcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKWRhdGFCbG9ja3NbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogX3RoaXMuX2dldFBhcmFtTmFtZShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1lZEZpbGVzW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlc1tpXS51cGxvYWQuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdXBsb2FkRGF0YShmaWxlcywgZGF0YUJsb2Nrcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8vIFJldHVybnMgdGhlIHJpZ2h0IGNodW5rIGZvciBnaXZlbiBmaWxlIGFuZCB4aHJcbiAgICAgICAgICAgIGtleTogXCJfZ2V0Q2h1bmtcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q2h1bmsoZmlsZSwgeGhyKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGZpbGUudXBsb2FkLnRvdGFsQ2h1bmtDb3VudDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUudXBsb2FkLmNodW5rc1tpXSAhPT0gdW5kZWZpbmVkICYmIGZpbGUudXBsb2FkLmNodW5rc1tpXS54aHIgPT09IHhocikgcmV0dXJuIGZpbGUudXBsb2FkLmNodW5rc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gYWN0dWFsbHkgdXBsb2FkcyB0aGUgZmlsZShzKSB0byB0aGUgc2VydmVyLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICBJZiBkYXRhQmxvY2tzIGNvbnRhaW5zIHRoZSBhY3R1YWwgZGF0YSB0byB1cGxvYWQgKG1lYW5pbmcsIHRoYXQgdGhpcyBjb3VsZFxuICAgICAgICAgICAgLy8gZWl0aGVyIGJlIHRyYW5zZm9ybWVkIGZpbGVzLCBvciBpbmRpdmlkdWFsIGNodW5rcyBmb3IgY2h1bmtlZCB1cGxvYWQpIHRoZW5cbiAgICAgICAgICAgIC8vIHRoZXkgd2lsbCBiZSB1c2VkIGZvciB0aGUgYWN0dWFsIGRhdGEgdG8gdXBsb2FkLlxuICAgICAgICAgICAga2V5OiBcIl91cGxvYWREYXRhXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VwbG9hZERhdGEoZmlsZXMsIGRhdGFCbG9ja3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLCBfdGhpczcgPSB0aGlzLCBfdGhpczggPSB0aGlzLCBfdGhpczkgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFB1dCB0aGUgeGhyIG9iamVjdCBpbiB0aGUgZmlsZSBvYmplY3RzIHRvIGJlIGFibGUgdG8gcmVmZXJlbmNlIGl0IGxhdGVyLlxuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS54aHIgPSB4aHI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsZXNbMF0udXBsb2FkLmNodW5rZWQpIC8vIFB1dCB0aGUgeGhyIG9iamVjdCBpbiB0aGUgcmlnaHQgY2h1bmsgb2JqZWN0LCBzbyBpdCBjYW4gYmUgYXNzb2NpYXRlZFxuICAgICAgICAgICAgICAgIC8vIGxhdGVyLCBhbmQgZm91bmQgd2l0aCBfZ2V0Q2h1bmsuXG4gICAgICAgICAgICAgICAgZmlsZXNbMF0udXBsb2FkLmNodW5rc1tkYXRhQmxvY2tzWzBdLmNodW5rSW5kZXhdLnhociA9IHhocjtcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5yZXNvbHZlT3B0aW9uKHRoaXMub3B0aW9ucy5tZXRob2QsIGZpbGVzLCBkYXRhQmxvY2tzKTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5yZXNvbHZlT3B0aW9uKHRoaXMub3B0aW9ucy51cmwsIGZpbGVzLCBkYXRhQmxvY2tzKTtcbiAgICAgICAgICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gU2V0dGluZyB0aGUgdGltZW91dCBhZnRlciBvcGVuIGJlY2F1c2Ugb2YgSUUxMSBpc3N1ZTogaHR0cHM6Ly9naXRsYWIuY29tL21lbm8vZHJvcHpvbmUvaXNzdWVzLzhcbiAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IHRoaXMucmVzb2x2ZU9wdGlvbih0aGlzLm9wdGlvbnMudGltZW91dCwgZmlsZXMpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KSB4aHIudGltZW91dCA9IHRoaXMucmVzb2x2ZU9wdGlvbih0aGlzLm9wdGlvbnMudGltZW91dCwgZmlsZXMpO1xuICAgICAgICAgICAgICAgIC8vIEhhcyB0byBiZSBhZnRlciBgLm9wZW4oKWAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZW55by9kcm9wem9uZS9pc3N1ZXMvMTc5XG4gICAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9ICEhdGhpcy5vcHRpb25zLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZmluaXNoZWRVcGxvYWRpbmcoZmlsZXMsIHhociwgZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzNy5faGFuZGxlVXBsb2FkRXJyb3IoZmlsZXMsIHhociwgXCJSZXF1ZXN0IHRpbWVkb3V0IGFmdGVyIFwiLmNvbmNhdChfdGhpczcub3B0aW9ucy50aW1lb3V0IC8gMTAwMCwgXCIgc2Vjb25kc1wiKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczguX2hhbmRsZVVwbG9hZEVycm9yKGZpbGVzLCB4aHIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyBkbyBub3QgaGF2ZSB0aGUgLnVwbG9hZCBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzc09iaiA9IHhoci51cGxvYWQgIT0gbnVsbCA/IHhoci51cGxvYWQgOiB4aHI7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NPYmoub25wcm9ncmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzOS5fdXBkYXRlRmlsZXNVcGxvYWRQcm9ncmVzcyhmaWxlcywgeGhyLCBlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0gdGhpcy5vcHRpb25zLmRlZmF1bHRIZWFkZXJzID8ge1xuICAgICAgICAgICAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjogXCJuby1jYWNoZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIlgtUmVxdWVzdGVkLVdpdGhcIjogXCJYTUxIdHRwUmVxdWVzdFwiXG4gICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmluYXJ5Qm9keSkgaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IGZpbGVzWzBdLnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oZWFkZXJzKSAkcGFyY2VsJGludGVyb3BEZWZhdWx0KCQ2bVU4dyRqdXN0ZXh0ZW5kKShoZWFkZXJzLCB0aGlzLm9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBoZWFkZXJOYW1lIGluIGhlYWRlcnMpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyVmFsdWUgPSBoZWFkZXJzW2hlYWRlck5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZGVyVmFsdWUpIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlck5hbWUsIGhlYWRlclZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iaW5hcnlCb2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgZmlsZSBpcyBnb2luZyB0byBiZSBzZW50IGFzIGJpbmFyeSBib2R5LCBpdCBkb2Vzbid0IG1ha2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueSBzZW5zZSB0byBnZW5lcmF0ZSBgRm9ybURhdGFgIGZvciBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInNlbmRpbmdcIiwgZmlsZSwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB0aGlzLmVtaXQoXCJzZW5kaW5nbXVsdGlwbGVcIiwgZmlsZXMsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0UmVxdWVzdCh4aHIsIG51bGwsIGZpbGVzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkaW5nIGFsbCBAb3B0aW9ucyBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkaXRpb25hbFBhcmFtcyA9IHRoaXMub3B0aW9ucy5wYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFkZGl0aW9uYWxQYXJhbXMgPT09IFwiZnVuY3Rpb25cIikgYWRkaXRpb25hbFBhcmFtcyA9IGFkZGl0aW9uYWxQYXJhbXMuY2FsbCh0aGlzLCBmaWxlcywgeGhyLCBmaWxlc1swXS51cGxvYWQuY2h1bmtlZCA/IHRoaXMuX2dldENodW5rKGZpbGVzWzBdLCB4aHIpIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBhZGRpdGlvbmFsUGFyYW1zKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhZGRpdGlvbmFsUGFyYW1zW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSAvLyBUaGUgYWRkaXRpb25hbCBwYXJhbWV0ZXIgY29udGFpbnMgYW4gYXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gbGV0cyBpdGVyYXRlIG92ZXIgaXQgdG8gYXR0YWNoIGVhY2ggdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmRpdmlkdWFsbHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKWZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGV0IHRoZSB1c2VyIGFkZCBhZGRpdGlvbmFsIGRhdGEgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJzZW5kaW5nXCIsIGZpbGUsIHhociwgZm9ybURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkTXVsdGlwbGUpIHRoaXMuZW1pdChcInNlbmRpbmdtdWx0aXBsZVwiLCBmaWxlcywgeGhyLCBmb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZEZvcm1FbGVtZW50RGF0YShmb3JtRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYWRkIHRoZSBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAvLyBIYXMgdG8gYmUgbGFzdCBiZWNhdXNlIHNvbWUgc2VydmVycyAoZWc6IFMzKSBleHBlY3QgdGhlIGZpbGUgdG8gYmUgdGhlIGxhc3QgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhQmxvY2tzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhQmxvY2sgPSBkYXRhQmxvY2tzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKGRhdGFCbG9jay5uYW1lLCBkYXRhQmxvY2suZGF0YSwgZGF0YUJsb2NrLmZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdFJlcXVlc3QoeGhyLCBmb3JtRGF0YSwgZmlsZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVHJhbnNmb3JtcyBhbGwgZmlsZXMgd2l0aCB0aGlzLm9wdGlvbnMudHJhbnNmb3JtRmlsZSBhbmQgaW52b2tlcyBkb25lIHdpdGggdGhlIHRyYW5zZm9ybWVkIGZpbGVzIHdoZW4gZG9uZS5cbiAgICAgICAgICAgIGtleTogXCJfdHJhbnNmb3JtRmlsZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdHJhbnNmb3JtRmlsZXMoZmlsZXMsIGRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLCBfbG9vcCA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3B0aW9ucy50cmFuc2Zvcm1GaWxlLmNhbGwoX3RoaXMsIGZpbGVzW2ldLCBmdW5jdGlvbih0cmFuc2Zvcm1lZEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkRmlsZXNbaV0gPSB0cmFuc2Zvcm1lZEZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKytkb25lQ291bnRlciA9PT0gZmlsZXMubGVuZ3RoKSBkb25lKHRyYW5zZm9ybWVkRmlsZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZEZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgLy8gQ2x1bXN5IHdheSBvZiBoYW5kbGluZyBhc3luY2hyb25vdXMgY2FsbHMsIHVudGlsIEkgZ2V0IHRvIGFkZCBhIHByb3BlciBGdXR1cmUgbGlicmFyeS5cbiAgICAgICAgICAgICAgICB2YXIgZG9uZUNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKylfbG9vcChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gVGFrZXMgY2FyZSBvZiBhZGRpbmcgb3RoZXIgaW5wdXQgZWxlbWVudHMgb2YgdGhlIGZvcm0gdG8gdGhlIEFKQVggcmVxdWVzdFxuICAgICAgICAgICAga2V5OiBcIl9hZGRGb3JtRWxlbWVudERhdGFcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRm9ybUVsZW1lbnREYXRhKGZvcm1EYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAvLyBUYWtlIGNhcmUgb2Ygb3RoZXIgaW5wdXQgZWxlbWVudHNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LnRhZ05hbWUgPT09IFwiRk9STVwiKSB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvblwiKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXROYW1lID0gaW5wdXQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dFR5cGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0VHlwZSkgaW5wdXRUeXBlID0gaW5wdXRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaW5wdXQgZG9lc24ndCBoYXZlIGEgbmFtZSwgd2UgY2FuJ3QgdXNlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dE5hbWUgPT09IFwidW5kZWZpbmVkXCIgfHwgaW5wdXROYW1lID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC50YWdOYW1lID09PSBcIlNFTEVDVFwiICYmIGlucHV0Lmhhc0F0dHJpYnV0ZShcIm11bHRpcGxlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3NzaWJseSBtdWx0aXBsZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBpbnB1dC5vcHRpb25zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSBmb3JtRGF0YS5hcHBlbmQoaW5wdXROYW1lLCBvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpbnB1dFR5cGUgfHwgaW5wdXRUeXBlICE9PSBcImNoZWNrYm94XCIgJiYgaW5wdXRUeXBlICE9PSBcInJhZGlvXCIgfHwgaW5wdXQuY2hlY2tlZCkgZm9ybURhdGEuYXBwZW5kKGlucHV0TmFtZSwgaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIEludm9rZWQgd2hlbiB0aGVyZSBpcyBuZXcgcHJvZ3Jlc3MgaW5mb3JtYXRpb24gYWJvdXQgZ2l2ZW4gZmlsZXMuXG4gICAgICAgICAgICAvLyBJZiBlIGlzIG5vdCBwcm92aWRlZCwgaXQgaXMgYXNzdW1lZCB0aGF0IHRoZSB1cGxvYWQgaXMgZmluaXNoZWQuXG4gICAgICAgICAgICBrZXk6IFwiX3VwZGF0ZUZpbGVzVXBsb2FkUHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlRmlsZXNVcGxvYWRQcm9ncmVzcyhmaWxlcywgeGhyLCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGVzWzBdLnVwbG9hZC5jaHVua2VkKSB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZmlsZSB1cGxvYWRzIHdpdGhvdXQgY2h1bmtpbmdcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBmaWxlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnVwbG9hZC50b3RhbCAmJiBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgJiYgZmlsZS51cGxvYWQuYnl0ZXNTZW50ID09IGZpbGUudXBsb2FkLnRvdGFsKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS51cGxvYWQucHJvZ3Jlc3MgPSAxMDAgKiBlLmxvYWRlZCAvIGUudG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS51cGxvYWQudG90YWwgPSBlLnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLmJ5dGVzU2VudCA9IGUubG9hZGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBObyBldmVudCwgc28gd2UncmUgYXQgMTAwJVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLnByb2dyZXNzID0gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLmJ5dGVzU2VudCA9IGZpbGUudXBsb2FkLnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBsb2FkcHJvZ3Jlc3NcIiwgZmlsZSwgZmlsZS51cGxvYWQucHJvZ3Jlc3MsIGZpbGUudXBsb2FkLmJ5dGVzU2VudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGNodW5rZWQgZmlsZSB1cGxvYWRzXG4gICAgICAgICAgICAgICAgICAgIC8vIENodW5rZWQgdXBsb2FkIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdXBsb2FkaW5nIG11bHRpcGxlIGZpbGVzIGluIG9uZVxuICAgICAgICAgICAgICAgICAgICAvLyByZXF1ZXN0LCBzbyB3ZSBrbm93IHRoZXJlJ3Mgb25seSBvbmUgZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBmaWxlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBhIGNodW5rZWQgdXBsb2FkLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgYXBwcm9wcmlhdGUgY2h1bmtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvZ3Jlc3MuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IHRoaXMuX2dldENodW5rKGZpbGUsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuay5wcm9ncmVzcyA9IDEwMCAqIGUubG9hZGVkIC8gZS50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnRvdGFsID0gZS50b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmJ5dGVzU2VudCA9IGUubG9hZGVkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gZXZlbnQsIHNvIHdlJ3JlIGF0IDEwMCVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLnByb2dyZXNzID0gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsuYnl0ZXNTZW50ID0gY2h1bmsudG90YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IHRhbGx5IHRoZSAqZmlsZSogdXBsb2FkIHByb2dyZXNzIGZyb20gaXRzIGluZGl2aWR1YWwgY2h1bmtzXG4gICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLnByb2dyZXNzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZmlsZS51cGxvYWQudG90YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZmlsZS51cGxvYWQudG90YWxDaHVua0NvdW50OyBpKyspaWYgKGZpbGUudXBsb2FkLmNodW5rc1tpXSAmJiB0eXBlb2YgZmlsZS51cGxvYWQuY2h1bmtzW2ldLnByb2dyZXNzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5wcm9ncmVzcyArPSBmaWxlLnVwbG9hZC5jaHVua3NbaV0ucHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC50b3RhbCArPSBmaWxlLnVwbG9hZC5jaHVua3NbaV0udG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnVwbG9hZC5ieXRlc1NlbnQgKz0gZmlsZS51cGxvYWQuY2h1bmtzW2ldLmJ5dGVzU2VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgcHJvY2VzcyBpcyBhIHBlcmNlbnRhZ2UsIHdlIG5lZWQgdG8gZGl2aWRlIGJ5IHRoZSBhbW91bnQgb2ZcbiAgICAgICAgICAgICAgICAgICAgLy8gY2h1bmtzIHdlJ3ZlIHVzZWQuXG4gICAgICAgICAgICAgICAgICAgIGZpbGUudXBsb2FkLnByb2dyZXNzID0gZmlsZS51cGxvYWQucHJvZ3Jlc3MgLyBmaWxlLnVwbG9hZC50b3RhbENodW5rQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInVwbG9hZHByb2dyZXNzXCIsIGZpbGUsIGZpbGUudXBsb2FkLnByb2dyZXNzLCBmaWxlLnVwbG9hZC5ieXRlc1NlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcIl9maW5pc2hlZFVwbG9hZGluZ1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5pc2hlZFVwbG9hZGluZyhmaWxlcywgeGhyLCBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIGlmIChmaWxlc1swXS5zdGF0dXMgPT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuQ0FOQ0VMRUQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSAhPT0gXCJhcnJheWJ1ZmZlclwiICYmIHhoci5yZXNwb25zZVR5cGUgIT09IFwiYmxvYlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5nZXRSZXNwb25zZUhlYWRlcihcImNvbnRlbnQtdHlwZVwiKSAmJiB+eGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiY29udGVudC10eXBlXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gXCJJbnZhbGlkIEpTT04gcmVzcG9uc2UgZnJvbSBzZXJ2ZXIuXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRmlsZXNVcGxvYWRQcm9ncmVzcyhmaWxlcywgeGhyKTtcbiAgICAgICAgICAgICAgICBpZiAoISgyMDAgPD0geGhyLnN0YXR1cyAmJiB4aHIuc3RhdHVzIDwgMzAwKSkgdGhpcy5faGFuZGxlVXBsb2FkRXJyb3IoZmlsZXMsIHhociwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZpbGVzWzBdLnVwbG9hZC5jaHVua2VkKSBmaWxlc1swXS51cGxvYWQuZmluaXNoZWRDaHVua1VwbG9hZCh0aGlzLl9nZXRDaHVuayhmaWxlc1swXSwgeGhyKSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5fZmluaXNoZWQoZmlsZXMsIHJlc3BvbnNlLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcIl9oYW5kbGVVcGxvYWRFcnJvclwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVVcGxvYWRFcnJvcihmaWxlcywgeGhyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlc1swXS5zdGF0dXMgPT09ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuQ0FOQ0VMRUQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZXNbMF0udXBsb2FkLmNodW5rZWQgJiYgdGhpcy5vcHRpb25zLnJldHJ5Q2h1bmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IHRoaXMuX2dldENodW5rKGZpbGVzWzBdLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGNodW5rLnJldHJpZXMrKykgPCB0aGlzLm9wdGlvbnMucmV0cnlDaHVua3NMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBsb2FkRGF0YShmaWxlcywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rLmRhdGFCbG9ja1xuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLndhcm4oXCJSZXRyaWVkIHRoaXMgY2h1bmsgdG9vIG9mdGVuLiBHaXZpbmcgdXAuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvclByb2Nlc3NpbmcoZmlsZXMsIHJlc3BvbnNlIHx8IHRoaXMub3B0aW9ucy5kaWN0UmVzcG9uc2VFcnJvci5yZXBsYWNlKFwie3tzdGF0dXNDb2RlfX1cIiwgeGhyLnN0YXR1cyksIHhocik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJzdWJtaXRSZXF1ZXN0XCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3VibWl0UmVxdWVzdCh4aHIsIGZvcm1EYXRhLCBmaWxlcykge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbm5vdCBzZW5kIHRoaXMgcmVxdWVzdCBiZWNhdXNlIHRoZSBYTUxIdHRwUmVxdWVzdC5yZWFkeVN0YXRlIGlzIG5vdCBPUEVORUQuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmluYXJ5Qm9keSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZXNbMF0udXBsb2FkLmNodW5rZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IHRoaXMuX2dldENodW5rKGZpbGVzWzBdLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoY2h1bmsuZGF0YUJsb2NrLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeGhyLnNlbmQoZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB4aHIuc2VuZChmb3JtRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIENhbGxlZCBpbnRlcm5hbGx5IHdoZW4gcHJvY2Vzc2luZyBpcyBmaW5pc2hlZC5cbiAgICAgICAgICAgIC8vIEluZGl2aWR1YWwgY2FsbGJhY2tzIGhhdmUgdG8gYmUgY2FsbGVkIGluIHRoZSBhcHByb3ByaWF0ZSBzZWN0aW9ucy5cbiAgICAgICAgICAgIGtleTogXCJfZmluaXNoZWRcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluaXNoZWQoZmlsZXMsIHJlc3BvbnNlVGV4dCwgZSkge1xuICAgICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBmaWxlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuc3RhdHVzID0gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5TVUNDRVNTO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwic3VjY2Vzc1wiLCBmaWxlLCByZXNwb25zZVRleHQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVcIiwgZmlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZE11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInN1Y2Nlc3NtdWx0aXBsZVwiLCBmaWxlcywgcmVzcG9uc2VUZXh0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVtdWx0aXBsZVwiLCBmaWxlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1Byb2Nlc3NRdWV1ZSkgcmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIENhbGxlZCBpbnRlcm5hbGx5IHdoZW4gcHJvY2Vzc2luZyBpcyBmaW5pc2hlZC5cbiAgICAgICAgICAgIC8vIEluZGl2aWR1YWwgY2FsbGJhY2tzIGhhdmUgdG8gYmUgY2FsbGVkIGluIHRoZSBhcHByb3ByaWF0ZSBzZWN0aW9ucy5cbiAgICAgICAgICAgIGtleTogXCJfZXJyb3JQcm9jZXNzaW5nXCIsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Vycm9yUHJvY2Vzc2luZyhmaWxlcywgbWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGZpbGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5zdGF0dXMgPSAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LkVSUk9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZmlsZSwgbWVzc2FnZSwgeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImNvbXBsZXRlXCIsIGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51cGxvYWRNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvcm11bHRpcGxlXCIsIGZpbGVzLCBtZXNzYWdlLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZW11bHRpcGxlXCIsIGZpbGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUHJvY2Vzc1F1ZXVlKSByZXR1cm4gdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sIFtcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcImluaXRDbGFzc1wiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRDbGFzcygpIHtcbiAgICAgICAgICAgICAgICAvLyBFeHBvc2luZyB0aGUgZW1pdHRlciBjbGFzcywgbWFpbmx5IGZvciB0ZXN0c1xuICAgICAgICAgICAgICAgIHRoaXMucHJvdG90eXBlLkVtaXR0ZXIgPSAkYjFkMTdjZmIxZDE1YzM2YSRleHBvcnQkMmUyYmNkODczOWFlMDM5O1xuICAgICAgICAgICAgICAgIC8qXG4gICAgIFRoaXMgaXMgYSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgZXZlbnRzIHlvdSBjYW4gcmVnaXN0ZXIgb24gYSBkcm9wem9uZSBvYmplY3QuXG5cbiAgICAgWW91IGNhbiByZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGxpa2UgdGhpczpcblxuICAgICBkcm9wem9uZS5vbihcImRyYWdFbnRlclwiLCBmdW5jdGlvbigpIHsgfSk7XG5cbiAgICAgKi8gdGhpcy5wcm90b3R5cGUuZXZlbnRzID0gW1xuICAgICAgICAgICAgICAgICAgICBcImRyb3BcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkcmFnc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkcmFnZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZHJhZ2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZHJhZ292ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkcmFnbGVhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhZGRlZGZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhZGRlZGZpbGVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVtb3ZlZGZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0aHVtYm5haWxcIixcbiAgICAgICAgICAgICAgICAgICAgXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICBcImVycm9ybXVsdGlwbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJwcm9jZXNzaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicHJvY2Vzc2luZ211bHRpcGxlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidXBsb2FkcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3RhbHVwbG9hZHByb2dyZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwic2VuZGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcInNlbmRpbmdtdWx0aXBsZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdWNjZXNzbXVsdGlwbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjYW5jZWxlZFwiLFxuICAgICAgICAgICAgICAgICAgICBcImNhbmNlbGVkbXVsdGlwbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjb21wbGV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbXBsZXRlbXVsdGlwbGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJyZXNldFwiLFxuICAgICAgICAgICAgICAgICAgICBcIm1heGZpbGVzZXhjZWVkZWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJtYXhmaWxlc3JlYWNoZWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJxdWV1ZWNvbXBsZXRlXCIsIFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgdGhpcy5wcm90b3R5cGUuX3RodW1ibmFpbFF1ZXVlID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5wcm90b3R5cGUuX3Byb2Nlc3NpbmdUaHVtYm5haWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcInV1aWR2NFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHV1aWR2NCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PT0gXCJ4XCIgPyByIDogciAmIDMgfCA4O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdKTtcbiAgICByZXR1cm4gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOTtcbn0oJGIxZDE3Y2ZiMWQxNWMzNmEkZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSk7XG4kYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmluaXRDbGFzcygpO1xuLy8gVGhpcyBpcyBhIG1hcCBvZiBvcHRpb25zIGZvciB5b3VyIGRpZmZlcmVudCBkcm9wem9uZXMuIEFkZCBjb25maWd1cmF0aW9uc1xuLy8gdG8gdGhpcyBvYmplY3QgZm9yIHlvdXIgZGlmZmVyZW50IGRyb3B6b25lIGVsZW1lbnMuXG4vL1xuLy8gRXhhbXBsZTpcbi8vXG4vLyAgICAgRHJvcHpvbmUub3B0aW9ucy5teURyb3B6b25lRWxlbWVudElkID0geyBtYXhGaWxlc2l6ZTogMSB9O1xuLy9cbi8vIEFuZCBpbiBodG1sOlxuLy9cbi8vICAgICA8Zm9ybSBhY3Rpb249XCIvdXBsb2FkXCIgaWQ9XCJteS1kcm9wem9uZS1lbGVtZW50LWlkXCIgY2xhc3M9XCJkcm9wem9uZVwiPjwvZm9ybT5cbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkub3B0aW9ucyA9IHtcbn07XG4vLyBSZXR1cm5zIHRoZSBvcHRpb25zIGZvciBhbiBlbGVtZW50IG9yIHVuZGVmaW5lZCBpZiBub25lIGF2YWlsYWJsZS5cbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkub3B0aW9uc0ZvckVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gR2V0IHRoZSBgRHJvcHpvbmUub3B0aW9ucy5lbGVtZW50SWRgIGZvciB0aGlzIGVsZW1lbnQgaWYgaXQgZXhpc3RzXG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIikpIHJldHVybiAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5Lm9wdGlvbnNbJGE2MDFmZjMwZjQ4M2U5MTckdmFyJGNhbWVsaXplKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaWRcIikpXTtcbiAgICBlbHNlIHJldHVybiB1bmRlZmluZWQ7XG59O1xuLy8gSG9sZHMgYSBsaXN0IG9mIGFsbCBkcm9wem9uZSBpbnN0YW5jZXNcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuaW5zdGFuY2VzID0gW107XG4vLyBSZXR1cm5zIHRoZSBkcm9wem9uZSBmb3IgZ2l2ZW4gZWxlbWVudCBpZiBhbnlcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZm9yRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09IFwic3RyaW5nXCIpIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuICAgIGlmICgoZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5kcm9wem9uZSA6IHVuZGVmaW5lZCkgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gRHJvcHpvbmUgZm91bmQgZm9yIGdpdmVuIGVsZW1lbnQuIFRoaXMgaXMgcHJvYmFibHkgYmVjYXVzZSB5b3UncmUgdHJ5aW5nIHRvIGFjY2VzcyBpdCBiZWZvcmUgRHJvcHpvbmUgaGFkIHRoZSB0aW1lIHRvIGluaXRpYWxpemUuIFVzZSB0aGUgYGluaXRgIG9wdGlvbiB0byBzZXR1cCBhbnkgYWRkaXRpb25hbCBvYnNlcnZlcnMgb24geW91ciBEcm9wem9uZS5cIik7XG4gICAgcmV0dXJuIGVsZW1lbnQuZHJvcHpvbmU7XG59O1xuLy8gTG9va3MgZm9yIGFsbCAuZHJvcHpvbmUgZWxlbWVudHMgYW5kIGNyZWF0ZXMgYSBkcm9wem9uZSBmb3IgdGhlbVxuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5kaXNjb3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkcm9wem9uZXM7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIGRyb3B6b25lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZHJvcHpvbmVcIik7XG4gICAgZWxzZSB7XG4gICAgICAgIGRyb3B6b25lcyA9IFtdO1xuICAgICAgICAvLyBJRSA6KFxuICAgICAgICB2YXIgY2hlY2tFbGVtZW50cyA9IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2UsIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZWxlbWVudHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC8oXnwgKWRyb3B6b25lKCR8ICkvLnRlc3QoZWwuY2xhc3NOYW1lKSkgcmVzdWx0LnB1c2goZHJvcHpvbmVzLnB1c2goZWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgcmVzdWx0LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9O1xuICAgICAgICBjaGVja0VsZW1lbnRzKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpKTtcbiAgICAgICAgY2hlY2tFbGVtZW50cyhkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImZvcm1cIikpO1xuICAgIH1cbiAgICByZXR1cm4gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGRyb3B6b25lc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpe1xuICAgICAgICAgICAgICAgIHZhciBkcm9wem9uZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGRyb3B6b25lIHVubGVzcyBhdXRvIGRpc2NvdmVyIGhhcyBiZWVuIGRpc2FibGVkIGZvciBzcGVjaWZpYyBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkub3B0aW9uc0ZvckVsZW1lbnQoZHJvcHpvbmUpICE9PSBmYWxzZSkgcmVzdWx0LnB1c2gobmV3ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkoZHJvcHpvbmUpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHJlc3VsdC5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KSgpO1xufTtcbi8vIFNvbWUgYnJvd3NlcnMgc3VwcG9ydCBkcmFnIGFuZCBkcm9nIGZ1bmN0aW9uYWxpdHksIGJ1dCBub3QgY29ycmVjdGx5LlxuLy9cbi8vIFNvIEkgY3JlYXRlZCBhIGJsb2NrbGlzdCBvZiB1c2VyQWdlbnRzLiBZZXMsIHllcy4gQnJvd3NlciBzbmlmZmluZywgSSBrbm93LlxuLy8gQnV0IHdoYXQgdG8gZG8gd2hlbiBicm93c2VycyAqdGhlb3JldGljYWxseSogc3VwcG9ydCBhbiBBUEksIGJ1dCBjcmFzaFxuLy8gd2hlbiB1c2luZyBpdC5cbi8vXG4vLyBUaGlzIGlzIGEgbGlzdCBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRlc3RlZCBhZ2FpbnN0IG5hdmlnYXRvci51c2VyQWdlbnRcbi8vXG4vLyAqKiBJdCBzaG91bGQgb25seSBiZSB1c2VkIG9uIGJyb3dzZXIgdGhhdCAqZG8qIHN1cHBvcnQgdGhlIEFQSSwgYnV0XG4vLyBpbmNvcnJlY3RseSAqKlxuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5ibG9ja2VkQnJvd3NlcnMgPSBbXG4gICAgLy8gVGhlIG1hYyBvcyBhbmQgd2luZG93cyBwaG9uZSB2ZXJzaW9uIG9mIG9wZXJhIDEyIHNlZW1zIHRvIGhhdmUgYSBwcm9ibGVtIHdpdGggdGhlIEZpbGUgZHJhZyduJ2Ryb3AgQVBJLlxuICAgIC9vcGVyYS4qKE1hY2ludG9zaHxXaW5kb3dzIFBob25lKS4qdmVyc2lvblxcLzEyL2ksIFxuXTtcbi8vIENoZWNrcyBpZiB0aGUgYnJvd3NlciBpcyBzdXBwb3J0ZWRcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuaXNCcm93c2VyU3VwcG9ydGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhcGFibGVCcm93c2VyID0gdHJ1ZTtcbiAgICBpZiAod2luZG93LkZpbGUgJiYgd2luZG93LkZpbGVSZWFkZXIgJiYgd2luZG93LkZpbGVMaXN0ICYmIHdpbmRvdy5CbG9iICYmIHdpbmRvdy5Gb3JtRGF0YSAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGlmICghKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikpKSBjYXBhYmxlQnJvd3NlciA9IGZhbHNlO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmJsYWNrbGlzdGVkQnJvd3NlcnMgIT09IHVuZGVmaW5lZCkgLy8gU2luY2UgdGhpcyBoYXMgYmVlbiByZW5hbWVkLCB0aGlzIG1ha2VzIHN1cmUgd2UgZG9uJ3QgYnJlYWsgb2xkZXJcbiAgICAgICAgICAgIC8vIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgICAgICAkYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmJsb2NrZWRCcm93c2VycyA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuYmxhY2tsaXN0ZWRCcm93c2VycztcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZSwgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBBUEksIGJ1dCBtYXkgYmUgYmxvY2tlZC5cbiAgICAgICAgICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuYmxvY2tlZEJyb3dzZXJzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWdleCA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJsZUJyb3dzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBjYXBhYmxlQnJvd3NlciA9IGZhbHNlO1xuICAgIHJldHVybiBjYXBhYmxlQnJvd3Nlcjtcbn07XG4kYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmRhdGFVUkl0b0Jsb2IgPSBmdW5jdGlvbihkYXRhVVJJKSB7XG4gICAgLy8gY29udmVydCBiYXNlNjQgdG8gcmF3IGJpbmFyeSBkYXRhIGhlbGQgaW4gYSBzdHJpbmdcbiAgICAvLyBkb2Vzbid0IGhhbmRsZSBVUkxFbmNvZGVkIERhdGFVUklzIC0gc2VlIFNPIGFuc3dlciAjNjg1MDI3NiBmb3IgY29kZSB0aGF0IGRvZXMgdGhpc1xuICAgIHZhciBieXRlU3RyaW5nID0gYXRvYihkYXRhVVJJLnNwbGl0KFwiLFwiKVsxXSk7XG4gICAgLy8gc2VwYXJhdGUgb3V0IHRoZSBtaW1lIGNvbXBvbmVudFxuICAgIHZhciBtaW1lU3RyaW5nID0gZGF0YVVSSS5zcGxpdChcIixcIilbMF0uc3BsaXQoXCI6XCIpWzFdLnNwbGl0KFwiO1wiKVswXTtcbiAgICAvLyB3cml0ZSB0aGUgYnl0ZXMgb2YgdGhlIHN0cmluZyB0byBhbiBBcnJheUJ1ZmZlclxuICAgIHZhciBhYiA9IG5ldyBBcnJheUJ1ZmZlcihieXRlU3RyaW5nLmxlbmd0aCk7XG4gICAgdmFyIGlhID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgIGZvcih2YXIgaSA9IDAsIGVuZCA9IGJ5dGVTdHJpbmcubGVuZ3RoLCBhc2MgPSAwIDw9IGVuZDsgYXNjID8gaSA8PSBlbmQgOiBpID49IGVuZDsgYXNjID8gaSsrIDogaS0tKWlhW2ldID0gYnl0ZVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIC8vIHdyaXRlIHRoZSBBcnJheUJ1ZmZlciB0byBhIGJsb2JcbiAgICByZXR1cm4gbmV3IEJsb2IoW1xuICAgICAgICBhYlxuICAgIF0sIHtcbiAgICAgICAgdHlwZTogbWltZVN0cmluZ1xuICAgIH0pO1xufTtcbi8vIFJldHVybnMgYW4gYXJyYXkgd2l0aG91dCB0aGUgcmVqZWN0ZWQgaXRlbVxudmFyICRhNjAxZmYzMGY0ODNlOTE3JHZhciR3aXRob3V0ID0gZnVuY3Rpb24obGlzdCwgcmVqZWN0ZWRJdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IHJlamVjdGVkSXRlbTtcbiAgICB9KS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcbn07XG4vLyBhYmMtZGVmX2doaSAtPiBhYmNEZWZHaGlcbnZhciAkYTYwMWZmMzBmNDgzZTkxNyR2YXIkY2FtZWxpemUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1fXShcXHcpL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaC5jaGFyQXQoMSkudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbn07XG4vLyBDcmVhdGVzIGFuIGVsZW1lbnQgZnJvbSBzdHJpbmdcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBzdHJpbmc7XG4gICAgcmV0dXJuIGRpdi5jaGlsZE5vZGVzWzBdO1xufTtcbi8vIFRlc3RzIGlmIGdpdmVuIGVsZW1lbnQgaXMgaW5zaWRlIChvciBzaW1wbHkgaXMpIHRoZSBjb250YWluZXJcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZWxlbWVudEluc2lkZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpIHJldHVybiB0cnVlO1xuICAgICAvLyBDb2ZmZWVzY3JpcHQgZG9lc24ndCBzdXBwb3J0IGRvL3doaWxlIGxvb3BzXG4gICAgd2hpbGUoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSl7XG4gICAgICAgIGlmIChlbGVtZW50ID09PSBjb250YWluZXIpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5nZXRFbGVtZW50ID0gZnVuY3Rpb24oZWwsIG5hbWUpIHtcbiAgICB2YXIgZWxlbWVudDtcbiAgICBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgZWxzZSBpZiAoZWwubm9kZVR5cGUgIT0gbnVsbCkgZWxlbWVudCA9IGVsO1xuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYFwiLmNvbmNhdChuYW1lLCBcImAgb3B0aW9uIHByb3ZpZGVkLiBQbGVhc2UgcHJvdmlkZSBhIENTUyBzZWxlY3RvciBvciBhIHBsYWluIEhUTUwgZWxlbWVudC5cIikpO1xuICAgIHJldHVybiBlbGVtZW50O1xufTtcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbihlbHMsIG5hbWUpIHtcbiAgICB2YXIgZWwsIGVsZW1lbnRzO1xuICAgIGlmIChlbHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBlbGVtZW50cyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBfaXRlcmF0b3IgPSBlbHNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgZWwgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmdldEVsZW1lbnQoZWwsIG5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlbGVtZW50cyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZWxlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvcih2YXIgX2l0ZXJhdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbHMpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgZWwgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgfSBmaW5hbGx5e1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxzLm5vZGVUeXBlICE9IG51bGwpIGVsZW1lbnRzID0gW1xuICAgICAgICBlbHNcbiAgICBdO1xuICAgIGlmIChlbGVtZW50cyA9PSBudWxsIHx8ICFlbGVtZW50cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYFwiLmNvbmNhdChuYW1lLCBcImAgb3B0aW9uIHByb3ZpZGVkLiBQbGVhc2UgcHJvdmlkZSBhIENTUyBzZWxlY3RvciwgYSBwbGFpbiBIVE1MIGVsZW1lbnQgb3IgYSBsaXN0IG9mIHRob3NlLlwiKSk7XG4gICAgcmV0dXJuIGVsZW1lbnRzO1xufTtcbi8vIEFza3MgdGhlIHVzZXIgdGhlIHF1ZXN0aW9uIGFuZCBjYWxscyBhY2NlcHRlZCBvciByZWplY3RlZCBhY2NvcmRpbmdseVxuLy9cbi8vIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGp1c3QgdXNlcyBgd2luZG93LmNvbmZpcm1gIGFuZCB0aGVuIGNhbGxzIHRoZVxuLy8gYXBwcm9wcmlhdGUgY2FsbGJhY2suXG4kYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmNvbmZpcm0gPSBmdW5jdGlvbihxdWVzdGlvbiwgYWNjZXB0ZWQsIHJlamVjdGVkKSB7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKHF1ZXN0aW9uKSkgcmV0dXJuIGFjY2VwdGVkKCk7XG4gICAgZWxzZSBpZiAocmVqZWN0ZWQgIT0gbnVsbCkgcmV0dXJuIHJlamVjdGVkKCk7XG59O1xuLy8gVmFsaWRhdGVzIHRoZSBtaW1lIHR5cGUgbGlrZSB0aGlzOlxuLy9cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9FbGVtZW50L2lucHV0I2F0dHItYWNjZXB0XG4kYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LmlzVmFsaWRGaWxlID0gZnVuY3Rpb24oZmlsZSwgYWNjZXB0ZWRGaWxlcykge1xuICAgIGlmICghYWNjZXB0ZWRGaWxlcykgcmV0dXJuIHRydWU7XG4gICAgIC8vIElmIHRoZXJlIGFyZSBubyBhY2NlcHRlZCBtaW1lIHR5cGVzLCBpdCdzIE9LXG4gICAgYWNjZXB0ZWRGaWxlcyA9IGFjY2VwdGVkRmlsZXMuc3BsaXQoXCIsXCIpO1xuICAgIHZhciBtaW1lVHlwZSA9IGZpbGUudHlwZTtcbiAgICB2YXIgYmFzZU1pbWVUeXBlID0gbWltZVR5cGUucmVwbGFjZSgvXFwvLiokLywgXCJcIik7XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlLCBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgICBmb3IodmFyIF9pdGVyYXRvciA9IGFjY2VwdGVkRmlsZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKXtcbiAgICAgICAgICAgIHZhciB2YWxpZFR5cGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIHZhbGlkVHlwZSA9IHZhbGlkVHlwZS50cmltKCk7XG4gICAgICAgICAgICBpZiAodmFsaWRUeXBlLmNoYXJBdCgwKSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWxpZFR5cGUudG9Mb3dlckNhc2UoKSwgZmlsZS5uYW1lLmxlbmd0aCAtIHZhbGlkVHlwZS5sZW5ndGgpICE9PSAtMSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9cXC9cXCokLy50ZXN0KHZhbGlkVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHNvbWV0aGluZyBsaWtlIGEgaW1hZ2UvKiBtaW1lIHR5cGVcbiAgICAgICAgICAgICAgICBpZiAoYmFzZU1pbWVUeXBlID09PSB2YWxpZFR5cGUucmVwbGFjZSgvXFwvLiokLywgXCJcIikpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobWltZVR5cGUgPT09IHZhbGlkVHlwZSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHl7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLy8gQXVnbWVudCBqUXVlcnlcbmlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeSAhPT0gbnVsbCkgalF1ZXJ5LmZuLmRyb3B6b25lID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOSh0aGlzLCBvcHRpb25zKTtcbiAgICB9KTtcbn07XG4vLyBEcm9wem9uZSBmaWxlIHN0YXR1cyBjb2Rlc1xuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5BRERFRCA9IFwiYWRkZWRcIjtcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuUVVFVUVEID0gXCJxdWV1ZWRcIjtcbi8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gTm93LCBpZiBhIGZpbGUgaXMgYWNjZXB0ZWQsIGl0J3MgZWl0aGVyIHF1ZXVlZFxuLy8gb3IgdXBsb2FkaW5nLlxuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5BQ0NFUFRFRCA9ICRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuUVVFVUVEO1xuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5VUExPQURJTkcgPSBcInVwbG9hZGluZ1wiO1xuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5QUk9DRVNTSU5HID0gJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5VUExPQURJTkc7IC8vIGFsaWFzXG4kYTYwMWZmMzBmNDgzZTkxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5LkNBTkNFTEVEID0gXCJjYW5jZWxlZFwiO1xuJGE2MDFmZjMwZjQ4M2U5MTckZXhwb3J0JDJlMmJjZDg3MzlhZTAzOS5FUlJPUiA9IFwiZXJyb3JcIjtcbiRhNjAxZmYzMGY0ODNlOTE3JGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkuU1VDQ0VTUyA9IFwic3VjY2Vzc1wiO1xuLypcblxuIEJ1Z2ZpeCBmb3IgaU9TIDYgYW5kIDdcbiBTb3VyY2U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE5MjkwOTkvaHRtbDUtY2FudmFzLWRyYXdpbWFnZS1yYXRpby1idWctaW9zXG4gYmFzZWQgb24gdGhlIHdvcmsgb2YgaHR0cHM6Ly9naXRodWIuY29tL3N0b21pdGEvaW9zLWltYWdlZmlsZS1tZWdhcGl4ZWxcblxuICovIC8vIERldGVjdGluZyB2ZXJ0aWNhbCBzcXVhc2ggaW4gbG9hZGVkIGltYWdlLlxuLy8gRml4ZXMgYSBidWcgd2hpY2ggc3F1YXNoIGltYWdlIHZlcnRpY2FsbHkgd2hpbGUgZHJhd2luZyBpbnRvIGNhbnZhcyBmb3Igc29tZSBpbWFnZXMuXG4vLyBUaGlzIGlzIGEgYnVnIGluIGlPUzYgZGV2aWNlcy4gVGhpcyBmdW5jdGlvbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zdG9taXRhL2lvcy1pbWFnZWZpbGUtbWVnYXBpeGVsXG52YXIgJGE2MDFmZjMwZjQ4M2U5MTckdmFyJGRldGVjdFZlcnRpY2FsU3F1YXNoID0gZnVuY3Rpb24gJGE2MDFmZjMwZjQ4M2U5MTckdmFyJGRldGVjdFZlcnRpY2FsU3F1YXNoKGltZykge1xuICAgIHZhciBpdyA9IGltZy5uYXR1cmFsV2lkdGg7XG4gICAgdmFyIGloID0gaW1nLm5hdHVyYWxIZWlnaHQ7XG4gICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgY2FudmFzLndpZHRoID0gMTtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaWg7XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuICAgIHZhciByZWYgPSBjdHguZ2V0SW1hZ2VEYXRhKDEsIDAsIDEsIGloKSwgZGF0YSA9IHJlZi5kYXRhO1xuICAgIC8vIHNlYXJjaCBpbWFnZSBlZGdlIHBpeGVsIHBvc2l0aW9uIGluIGNhc2UgaXQgaXMgc3F1YXNoZWQgdmVydGljYWxseS5cbiAgICB2YXIgc3kgPSAwO1xuICAgIHZhciBleSA9IGloO1xuICAgIHZhciBweSA9IGloO1xuICAgIHdoaWxlKHB5ID4gc3kpe1xuICAgICAgICB2YXIgYWxwaGEgPSBkYXRhWyhweSAtIDEpICogNCArIDNdO1xuICAgICAgICBpZiAoYWxwaGEgPT09IDApIGV5ID0gcHk7XG4gICAgICAgIGVsc2Ugc3kgPSBweTtcbiAgICAgICAgcHkgPSBleSArIHN5ID4+IDE7XG4gICAgfVxuICAgIHZhciByYXRpbyA9IHB5IC8gaWg7XG4gICAgaWYgKHJhdGlvID09PSAwKSByZXR1cm4gMTtcbiAgICBlbHNlIHJldHVybiByYXRpbztcbn07XG4vLyBBIHJlcGxhY2VtZW50IGZvciBjb250ZXh0LmRyYXdJbWFnZVxuLy8gKGFyZ3MgYXJlIGZvciBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uKS5cbnZhciAkYTYwMWZmMzBmNDgzZTkxNyR2YXIkZHJhd0ltYWdlSU9TRml4ID0gZnVuY3Rpb24gJGE2MDFmZjMwZjQ4M2U5MTckdmFyJGRyYXdJbWFnZUlPU0ZpeChjdHgsIGltZywgc3gsIHN5LCBzdywgc2gsIGR4LCBkeSwgZHcsIGRoKSB7XG4gICAgdmFyIHZlcnRTcXVhc2hSYXRpbyA9ICRhNjAxZmYzMGY0ODNlOTE3JHZhciRkZXRlY3RWZXJ0aWNhbFNxdWFzaChpbWcpO1xuICAgIHJldHVybiBjdHguZHJhd0ltYWdlKGltZywgc3gsIHN5LCBzdywgc2gsIGR4LCBkeSwgZHcsIGRoIC8gdmVydFNxdWFzaFJhdGlvKTtcbn07XG52YXIgJGE2MDFmZjMwZjQ4M2U5MTckdmFyJEV4aWZSZXN0b3JlID0gLy8gQmFzZWQgb24gTWluaWZ5SnBlZ1xuLy8gU291cmNlOiBodHRwOi8vd3d3LnBlcnJ5LmN6L2ZpbGVzL0V4aWZSZXN0b3Jlci5qc1xuLy8gaHR0cDovL2VsaWNvbi5ibG9nNTcuZmMyLmNvbS9ibG9nLWVudHJ5LTIwNi5odG1sXG4vKiNfX1BVUkVfXyovIGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uICRhNjAxZmYzMGY0ODNlOTE3JHZhciRFeGlmUmVzdG9yZSgpIHtcbiAgICAgICAgJDZtVTh3JHN3Y2hlbHBlcnMuY2xhc3NDYWxsQ2hlY2sodGhpcywgJGE2MDFmZjMwZjQ4M2U5MTckdmFyJEV4aWZSZXN0b3JlKTtcbiAgICB9XG4gICAgJDZtVTh3JHN3Y2hlbHBlcnMuY3JlYXRlQ2xhc3MoJGE2MDFmZjMwZjQ4M2U5MTckdmFyJEV4aWZSZXN0b3JlLCBudWxsLCBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJpbml0Q2xhc3NcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0Q2xhc3MoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5LRVlfU1RSID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiZW5jb2RlNjRcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNvZGU2NChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBjaHIxID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBjaHIyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBjaHIzID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgZW5jMSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgZW5jMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgZW5jMyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB2YXIgZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgICAgICAgICBjaHIxID0gaW5wdXRbaSsrXTtcbiAgICAgICAgICAgICAgICAgICAgY2hyMiA9IGlucHV0W2krK107XG4gICAgICAgICAgICAgICAgICAgIGNocjMgPSBpbnB1dFtpKytdO1xuICAgICAgICAgICAgICAgICAgICBlbmMxID0gY2hyMSA+PiAyO1xuICAgICAgICAgICAgICAgICAgICBlbmMyID0gKGNocjEgJiAzKSA8PCA0IHwgY2hyMiA+PiA0O1xuICAgICAgICAgICAgICAgICAgICBlbmMzID0gKGNocjIgJiAxNSkgPDwgMiB8IGNocjMgPj4gNjtcbiAgICAgICAgICAgICAgICAgICAgZW5jNCA9IGNocjMgJiA2MztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNocjIpKSBlbmMzID0gZW5jNCA9IDY0O1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc05hTihjaHIzKSkgZW5jNCA9IDY0O1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyB0aGlzLktFWV9TVFIuY2hhckF0KGVuYzEpICsgdGhpcy5LRVlfU1RSLmNoYXJBdChlbmMyKSArIHRoaXMuS0VZX1NUUi5jaGFyQXQoZW5jMykgKyB0aGlzLktFWV9TVFIuY2hhckF0KGVuYzQpO1xuICAgICAgICAgICAgICAgICAgICBjaHIxID0gY2hyMiA9IGNocjMgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBlbmMxID0gZW5jMiA9IGVuYzMgPSBlbmM0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA8IGlucHV0Lmxlbmd0aCkpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwicmVzdG9yZVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RvcmUob3JpZ0ZpbGVCYXNlNjQsIHJlc2l6ZWRGaWxlQmFzZTY0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcmlnRmlsZUJhc2U2NC5tYXRjaChcImRhdGE6aW1hZ2UvanBlZztiYXNlNjQsXCIpKSByZXR1cm4gcmVzaXplZEZpbGVCYXNlNjQ7XG4gICAgICAgICAgICAgICAgdmFyIHJhd0ltYWdlID0gdGhpcy5kZWNvZGU2NChvcmlnRmlsZUJhc2U2NC5yZXBsYWNlKFwiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCxcIiwgXCJcIikpO1xuICAgICAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IHRoaXMuc2xpY2UyU2VnbWVudHMocmF3SW1hZ2UpO1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IHRoaXMuZXhpZk1hbmlwdWxhdGlvbihyZXNpemVkRmlsZUJhc2U2NCwgc2VnbWVudHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBcImRhdGE6aW1hZ2UvanBlZztiYXNlNjQsXCIuY29uY2F0KHRoaXMuZW5jb2RlNjQoaW1hZ2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcImV4aWZNYW5pcHVsYXRpb25cIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBleGlmTWFuaXB1bGF0aW9uKHJlc2l6ZWRGaWxlQmFzZTY0LCBzZWdtZW50cykge1xuICAgICAgICAgICAgICAgIHZhciBleGlmQXJyYXkgPSB0aGlzLmdldEV4aWZBcnJheShzZWdtZW50cyk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0ltYWdlQXJyYXkgPSB0aGlzLmluc2VydEV4aWYocmVzaXplZEZpbGVCYXNlNjQsIGV4aWZBcnJheSk7XG4gICAgICAgICAgICAgICAgdmFyIGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShuZXdJbWFnZUFycmF5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYUJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcImdldEV4aWZBcnJheVwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEV4aWZBcnJheShzZWdtZW50cykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHggPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlKHggPCBzZWdtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICBzZWcgPSBzZWdtZW50c1t4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ1swXSA9PT0gMjU1ICYgc2VnWzFdID09PSAyMjUpIHJldHVybiBzZWc7XG4gICAgICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwiaW5zZXJ0RXhpZlwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEV4aWYocmVzaXplZEZpbGVCYXNlNjQsIGV4aWZBcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZURhdGEgPSByZXNpemVkRmlsZUJhc2U2NC5yZXBsYWNlKFwiZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCxcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IHRoaXMuZGVjb2RlNjQoaW1hZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdGVQb2ludCA9IGJ1Zi5pbmRleE9mKDI1NSwgMyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hZSA9IGJ1Zi5zbGljZSgwLCBzZXBhcmF0ZVBvaW50KTtcbiAgICAgICAgICAgICAgICB2YXIgYXRvID0gYnVmLnNsaWNlKHNlcGFyYXRlUG9pbnQpO1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG1hZTtcbiAgICAgICAgICAgICAgICBhcnJheSA9IGFycmF5LmNvbmNhdChleGlmQXJyYXkpO1xuICAgICAgICAgICAgICAgIGFycmF5ID0gYXJyYXkuY29uY2F0KGF0byk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwic2xpY2UyU2VnbWVudHNcIixcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzbGljZTJTZWdtZW50cyhyYXdJbWFnZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWQgPSAwO1xuICAgICAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIHdoaWxlKHRydWUpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3SW1hZ2VBcnJheVtoZWFkXSA9PT0gMjU1ICYgcmF3SW1hZ2VBcnJheVtoZWFkICsgMV0gPT09IDIxOCkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdJbWFnZUFycmF5W2hlYWRdID09PSAyNTUgJiByYXdJbWFnZUFycmF5W2hlYWQgKyAxXSA9PT0gMjE2KSBoZWFkICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gcmF3SW1hZ2VBcnJheVtoZWFkICsgMl0gKiAyNTYgKyByYXdJbWFnZUFycmF5W2hlYWQgKyAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRQb2ludCA9IGhlYWQgKyBsZW5ndGggKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHJhd0ltYWdlQXJyYXkuc2xpY2UoaGVhZCwgZW5kUG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChzZWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IGVuZFBvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkID4gcmF3SW1hZ2VBcnJheS5sZW5ndGgpIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCJkZWNvZGU2NFwiLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZTY0KGlucHV0KSB7XG4gICAgICAgICAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdmFyIGNocjEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNocjIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdmFyIGNocjMgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHZhciBlbmMxID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBlbmMyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBlbmMzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHZhciBlbmM0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgQS1aLCBhLXosIDAtOSwgKywgLywgb3IgPVxuICAgICAgICAgICAgICAgIHZhciBiYXNlNjR0ZXN0ID0gL1teQS1aYS16MC05XFwrXFwvXFw9XS9nO1xuICAgICAgICAgICAgICAgIGlmIChiYXNlNjR0ZXN0LmV4ZWMoaW5wdXQpKSBjb25zb2xlLndhcm4oXCJUaGVyZSB3ZXJlIGludmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgaW4gdGhlIGlucHV0IHRleHQuXFxuVmFsaWQgYmFzZTY0IGNoYXJhY3RlcnMgYXJlIEEtWiwgYS16LCAwLTksICcrJywgJy8nLGFuZCAnPSdcXG5FeHBlY3QgZXJyb3JzIGluIGRlY29kaW5nLlwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XFwrXFwvXFw9XS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICB3aGlsZSh0cnVlKXtcbiAgICAgICAgICAgICAgICAgICAgZW5jMSA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICAgICAgZW5jMiA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICAgICAgZW5jNCA9IHRoaXMuS0VZX1NUUi5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcbiAgICAgICAgICAgICAgICAgICAgY2hyMSA9IGVuYzEgPDwgMiB8IGVuYzIgPj4gNDtcbiAgICAgICAgICAgICAgICAgICAgY2hyMiA9IChlbmMyICYgMTUpIDw8IDQgfCBlbmMzID4+IDI7XG4gICAgICAgICAgICAgICAgICAgIGNocjMgPSAoZW5jMyAmIDMpIDw8IDYgfCBlbmM0O1xuICAgICAgICAgICAgICAgICAgICBidWYucHVzaChjaHIxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuYzMgIT09IDY0KSBidWYucHVzaChjaHIyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuYzQgIT09IDY0KSBidWYucHVzaChjaHIzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hyMSA9IGNocjIgPSBjaHIzID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgZW5jMSA9IGVuYzIgPSBlbmMzID0gZW5jNCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPCBpbnB1dC5sZW5ndGgpKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0pO1xuICAgIHJldHVybiAkYTYwMWZmMzBmNDgzZTkxNyR2YXIkRXhpZlJlc3RvcmU7XG59KCk7XG4kYTYwMWZmMzBmNDgzZTkxNyR2YXIkRXhpZlJlc3RvcmUuaW5pdENsYXNzKCk7XG4vKlxuICogY29udGVudGxvYWRlZC5qc1xuICpcbiAqIEF1dGhvcjogRGllZ28gUGVyaW5pIChkaWVnby5wZXJpbmkgYXQgZ21haWwuY29tKVxuICogU3VtbWFyeTogY3Jvc3MtYnJvd3NlciB3cmFwcGVyIGZvciBET01Db250ZW50TG9hZGVkXG4gKiBVcGRhdGVkOiAyMDEwMTAyMFxuICogTGljZW5zZTogTUlUXG4gKiBWZXJzaW9uOiAxLjJcbiAqXG4gKiBVUkw6XG4gKiBodHRwOi8vamF2YXNjcmlwdC5ud2JveC5jb20vQ29udGVudExvYWRlZC9cbiAqIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9Db250ZW50TG9hZGVkL01JVC1MSUNFTlNFXG4gKi8gLy8gQHdpbiB3aW5kb3cgcmVmZXJlbmNlXG4vLyBAZm4gZnVuY3Rpb24gcmVmZXJlbmNlXG52YXIgJGE2MDFmZjMwZjQ4M2U5MTckdmFyJGNvbnRlbnRMb2FkZWQgPSBmdW5jdGlvbiAkYTYwMWZmMzBmNDgzZTkxNyR2YXIkY29udGVudExvYWRlZCh3aW4sIGZuKSB7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICB2YXIgdG9wID0gdHJ1ZTtcbiAgICB2YXIgZG9jID0gd2luLmRvY3VtZW50O1xuICAgIHZhciByb290ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgYWRkID0gZG9jLmFkZEV2ZW50TGlzdGVuZXIgPyBcImFkZEV2ZW50TGlzdGVuZXJcIiA6IFwiYXR0YWNoRXZlbnRcIjtcbiAgICB2YXIgcmVtID0gZG9jLmFkZEV2ZW50TGlzdGVuZXIgPyBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIiA6IFwiZGV0YWNoRXZlbnRcIjtcbiAgICB2YXIgcHJlID0gZG9jLmFkZEV2ZW50TGlzdGVuZXIgPyBcIlwiIDogXCJvblwiO1xuICAgIHZhciBpbml0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBcInJlYWR5c3RhdGVjaGFuZ2VcIiAmJiBkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSByZXR1cm47XG4gICAgICAgIChlLnR5cGUgPT09IFwibG9hZFwiID8gd2luIDogZG9jKVtyZW1dKHByZSArIGUudHlwZSwgaW5pdCwgZmFsc2UpO1xuICAgICAgICBpZiAoIWRvbmUgJiYgKGRvbmUgPSB0cnVlKSkgcmV0dXJuIGZuLmNhbGwod2luLCBlLnR5cGUgfHwgZSk7XG4gICAgfTtcbiAgICB2YXIgcG9sbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcm9vdC5kb1Njcm9sbChcImxlZnRcIik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocG9sbCwgNTApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbml0KFwicG9sbFwiKTtcbiAgICB9O1xuICAgIGlmIChkb2MucmVhZHlTdGF0ZSAhPT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIGlmIChkb2MuY3JlYXRlRXZlbnRPYmplY3QgJiYgcm9vdC5kb1Njcm9sbCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0b3AgPSAhd2luLmZyYW1lRWxlbWVudDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9wKSBwb2xsKCk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jW2FkZF0ocHJlICsgXCJET01Db250ZW50TG9hZGVkXCIsIGluaXQsIGZhbHNlKTtcbiAgICAgICAgZG9jW2FkZF0ocHJlICsgXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGluaXQsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHdpblthZGRdKHByZSArIFwibG9hZFwiLCBpbml0LCBmYWxzZSk7XG4gICAgfVxufTtcbmZ1bmN0aW9uICRhNjAxZmYzMGY0ODNlOTE3JHZhciRfX2d1YXJkX18odmFsdWUsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsdWUgIT09IG51bGwgPyB0cmFuc2Zvcm0odmFsdWUpIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gJGE2MDFmZjMwZjQ4M2U5MTckdmFyJF9fZ3VhcmRNZXRob2RfXyhvYmosIG1ldGhvZE5hbWUsIHRyYW5zZm9ybSkge1xuICAgIGlmICh0eXBlb2Ygb2JqICE9PSBcInVuZGVmaW5lZFwiICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cmFuc2Zvcm0ob2JqLCBtZXRob2ROYW1lKTtcbiAgICBlbHNlIHJldHVybiB1bmRlZmluZWQ7XG59XG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcHpvbmUuanMubWFwXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZDtcblxuLypcbiAgdmFyIG9iaiA9IHthOiAzLCBiOiA1fTtcbiAgZXh0ZW5kKG9iaiwge2E6IDQsIGM6IDh9KTsgLy8ge2E6IDQsIGI6IDUsIGM6IDh9XG4gIG9iajsgLy8ge2E6IDQsIGI6IDUsIGM6IDh9XG5cbiAgdmFyIG9iaiA9IHthOiAzLCBiOiA1fTtcbiAgZXh0ZW5kKHt9LCBvYmosIHthOiA0LCBjOiA4fSk7IC8vIHthOiA0LCBiOiA1LCBjOiA4fVxuICBvYmo7IC8vIHthOiAzLCBiOiA1fVxuXG4gIHZhciBhcnIgPSBbMSwgMiwgM107XG4gIHZhciBvYmogPSB7YTogMywgYjogNX07XG4gIGV4dGVuZChvYmosIHtjOiBhcnJ9KTsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzXX1cbiAgYXJyLnB1c2goNCk7XG4gIG9iajsgLy8ge2E6IDMsIGI6IDUsIGM6IFsxLCAyLCAzLCA0XX1cblxuICB2YXIgYXJyID0gWzEsIDIsIDNdO1xuICB2YXIgb2JqID0ge2E6IDMsIGI6IDV9O1xuICBleHRlbmQodHJ1ZSwgb2JqLCB7YzogYXJyfSk7IC8vIHthOiAzLCBiOiA1LCBjOiBbMSwgMiwgM119XG4gIGFyci5wdXNoKDQpO1xuICBvYmo7IC8vIHthOiAzLCBiOiA1LCBjOiBbMSwgMiwgM119XG5cbiAgZXh0ZW5kKHthOiA0LCBiOiA1fSk7IC8vIHthOiA0LCBiOiA1fVxuICBleHRlbmQoe2E6IDQsIGI6IDV9LCAzKTsge2E6IDQsIGI6IDV9XG4gIGV4dGVuZCh7YTogNCwgYjogNX0sIHRydWUpOyB7YTogNCwgYjogNX1cbiAgZXh0ZW5kKCdoZWxsbycsIHthOiA0LCBiOiA1fSk7IC8vIHRocm93c1xuICBleHRlbmQoMywge2E6IDQsIGI6IDV9KTsgLy8gdGhyb3dzXG4qL1xuXG5mdW5jdGlvbiBleHRlbmQoLyogW2RlZXBdLCBvYmoxLCBvYmoyLCBbb2Jqbl0gKi8pIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIHZhciBkZWVwID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgYXJnc1swXSA9PSAnYm9vbGVhbicpIHtcbiAgICBkZWVwID0gYXJncy5zaGlmdCgpO1xuICB9XG4gIHZhciByZXN1bHQgPSBhcmdzWzBdO1xuICBpZiAoaXNVbmV4dGVuZGFibGUocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5kZWUgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIgZXh0ZW5kZXJzID0gYXJncy5zbGljZSgxKTtcbiAgdmFyIGxlbiA9IGV4dGVuZGVycy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgZXh0ZW5kZXIgPSBleHRlbmRlcnNbaV07XG4gICAgZm9yICh2YXIga2V5IGluIGV4dGVuZGVyKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4dGVuZGVyLCBrZXkpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGV4dGVuZGVyW2tleV07XG4gICAgICAgIGlmIChkZWVwICYmIGlzQ2xvbmVhYmxlKHZhbHVlKSkge1xuICAgICAgICAgIHZhciBiYXNlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gZXh0ZW5kKFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkgJiYgIWlzVW5leHRlbmRhYmxlKHJlc3VsdFtrZXldKVxuICAgICAgICAgICAgICA/IHJlc3VsdFtrZXldXG4gICAgICAgICAgICAgIDogYmFzZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzQ2xvbmVhYmxlKG9iaikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopIHx8IHt9LnRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNVbmV4dGVuZGFibGUodmFsKSB7XG4gIHJldHVybiAhdmFsIHx8ICh0eXBlb2YgdmFsICE9ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgIT0gJ2Z1bmN0aW9uJyk7XG59XG4iLCJpbXBvcnQgdW5BY3RpdmUgZnJvbSAnLi91bi1hY3RpdmUnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGFib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFib3V0Jyk7XG5cbiAgaWYgKGFib3V0KSB7XG4gICAgY29uc3QgYWJvdXRCdXR0b25zID0gYWJvdXQucXVlcnlTZWxlY3RvckFsbCgnLmFib3V0X19idXR0b24nKTtcbiAgICBjb25zdCBhYm91dENvbnRlbnRzID0gYWJvdXQucXVlcnlTZWxlY3RvckFsbCgnLmFib3V0X19jb250ZW50Jyk7XG5cbiAgICBhYm91dEJ1dHRvbnMuZm9yRWFjaCgoYWJvdXRCdXR0b24sIGkpID0+IHtcbiAgICAgIGFib3V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB1bkFjdGl2ZShhYm91dEJ1dHRvbnMsICdhY3RpdmUnKTtcbiAgICAgICAgYWJvdXRCdXR0b24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKGFib3V0Q29udGVudHNbaV0pIHtcbiAgICAgICAgICB1bkFjdGl2ZShhYm91dENvbnRlbnRzLCAnYWN0aXZlJyk7XG4gICAgICAgICAgYWJvdXRDb250ZW50c1tpXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGNhbGVuZGFyRXZlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyc19fZGF0ZXBpY2tlcicpO1xuICBjb25zdCBjaG9vc2VEYXRlRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyc19fY2hvb3NlLWRhdGUnKTtcbiAgY29uc3QgY3VzdG9tRGF5cyA9IFsn0JLRgScsICfQn9C9JywgJ9CS0YInLCAn0KHRgCcsICfQp9GCJywgJ9Cf0YInLCAn0KHQsSddO1xuICBjb25zdCBjdXN0b21Nb250aCA9IFtcbiAgICAn0K/QvdCy0LDRgNGMJyxcbiAgICAn0KTQtdCy0YDQsNC70YwnLFxuICAgICfQnNCw0YDRgicsXG4gICAgJ9CQ0L/RgNC10LvRjCcsXG4gICAgJ9Cc0LDQuScsXG4gICAgJ9CY0Y7QvdGMJyxcbiAgICAn0JjRjtC70YwnLFxuICAgICfQkNCy0LPRg9GB0YInLFxuICAgICfQodC10L3RgtGP0LHRgNGMJyxcbiAgICAn0J7QutGC0Y/QsdGA0YwnLFxuICAgICfQndC+0Y/QsdGA0YwnLFxuICAgICfQlNC10LrQsNCx0YDRjCcsXG4gIF07XG5cbiAgaWYgKGNhbGVuZGFyRXZlbnQpIHtcbiAgICBjb25zdCBkYXRlQ2hvaXNlID0gZGF0ZXBpY2tlcihjYWxlbmRhckV2ZW50LCB7XG4gICAgICBmb3JtYXR0ZXI6IChpbnB1dCwgZGF0ZSwgaW5zdGFuY2UpID0+IHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSAnYyAnICsgZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKTtcbiAgICAgIH0sXG4gICAgICBvblNlbGVjdDogKGluc3RhbmNlLCBkYXRlKSA9PiB7XG4gICAgICAgIC8vY2hvb3NlRGF0ZUZpZWxkLnRleHRDb250ZW50ID0gYCR7ZGF0ZS5nZXREYXRlKCl9ICR7Y3VzdG9tTW9udGhbZGF0ZS5nZXRNb250aCgpXX0gJHtkYXRlLmdldEZ1bGxZZWFyKCl9YDtcblx0XHRjaG9vc2VEYXRlRmllbGQudGV4dENvbnRlbnQgPSBcIlwiLmNvbmNhdChkYXRlLmdldERhdGUoKSwgXCIgXCIpLmNvbmNhdChjdXN0b21Nb250aFtkYXRlLmdldE1vbnRoKCldLCBcIiBcIikuY29uY2F0KGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgICAgY2hvb3NlRGF0ZUZpZWxkLnNldEF0dHJpYnV0ZShcImRhdGEtZGF0ZVwiLCBkYXRlLmdldERhdGUoKSk7XG4gICAgICAgICAgY2hvb3NlRGF0ZUZpZWxkLnNldEF0dHJpYnV0ZShcImRhdGEtbW9udGhcIiwgZGF0ZS5nZXRNb250aCgpKzEpOy8vYnVnLWZpeFxuICAgICAgICAgIGNob29zZURhdGVGaWVsZC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXllYXJcIiwgZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgICBldmVudHNSZWZyZXNoRmlsdGVyKCk7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZWREYXRlczogW1xuICAgICAgICBuZXcgRGF0ZSgyMDIxLCAxMCwgNSksXG4gICAgICAgIG5ldyBEYXRlKDIwMjEsIDEwLCA4KSxcbiAgICAgICAgbmV3IERhdGUoMjAyMSwgMTEsIDEwKSxcbiAgICAgICAgbmV3IERhdGUoMjAyMSwgMTAsIDExKSxcbiAgICAgICAgbmV3IERhdGUoMjAyMSwgMTAsIDE5KSxcbiAgICAgIF0sXG4gICAgICBhbHdheXNTaG93OiB0cnVlLFxuICAgICAgc2hvd0FsbERhdGVzOiB0cnVlLFxuICAgICAgc3RhcnREYXk6IDEsXG4gICAgICBjdXN0b21EYXlzOiBjdXN0b21EYXlzLFxuICAgICAgY3VzdG9tTW9udGhzOiBjdXN0b21Nb250aCxcbiAgICAgIG92ZXJsYXlCdXR0b246ICfQktGL0LHRgNCw0YLRjCcsXG4gICAgICBvdmVybGF5UGxhY2Vob2xkZXI6ICfQktCy0LXQtNC40YLQtSDQs9C+0LQnLFxuICAgICAgZGF0ZVNlbGVjdGVkOiBuZXcgRGF0ZSgpLFxuICAgICAgaWQ6IDEsXG4gICAgfSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBEcm9wem9uZSB9IGZyb20gJ2Ryb3B6b25lJztcblxuY29uc3QgZHpEZWxldGVJY29uID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZlcnNpb249XCIxLjFcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCI+PGcgdHJhbnNmb3JtPVwic2NhbGUoMilcIj48Y2lyY2xlIHN0eWxlPVwiZmlsbDojZjQ0MzM2XCIgY3g9XCI4XCIgY3k9XCI4XCIgcj1cIjdcIi8+PHJlY3Qgc3R5bGU9XCJmaWxsOiNmZmZmZmZcIiB3aWR0aD1cIjJcIiBoZWlnaHQ9XCIxMFwiIHg9XCItLjk4XCIgeT1cIi0xNi4yOVwiIHRyYW5zZm9ybT1cInJvdGF0ZSgxMzUpXCIvPjxyZWN0IHN0eWxlPVwiZmlsbDojZmZmZmZmXCIgd2lkdGg9XCIyXCIgaGVpZ2h0PVwiMTBcIiB4PVwiLTEyLjI5XCIgeT1cIi01LjAxXCIgdHJhbnNmb3JtPVwicm90YXRlKC0xMzUpXCIvPjwvZz48L3N2Zz4nO1xuXG5jb25zdCBpbml0RHJvcFpvbmUgPSAoKSA9PiB7XG4gIGNvbnN0IGRyb3Bab25lRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1kel0nKTtcbiAgdmFyIG15U3RvcFJlbG9hZCA9IGZhbHNlO1xuICBkcm9wWm9uZUVsZW1lbnRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBjb25zdCBpc0RvYyA9IGl0ZW0uaGFzQXR0cmlidXRlKCdkYXRhLWR6LXRleHQnKTtcbiAgICBjb25zdCBhZGRCdXR0b24gPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWR6LWFkZF0nKTtcbiAgICBjb25zdCBkcm9wem9uZSA9IG5ldyBEcm9wem9uZShpdGVtLCB7XG4gICAgICB1cmw6IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXVwbG9hZC1saW5rJyksXG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ1gtQ1NSRi1UT0tFTic6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKVxuICAgICAgfSxcbiAgICAgIGNsaWNrYWJsZTogYWRkQnV0dG9uLFxuICAgICAgYWRkUmVtb3ZlTGlua3M6IHRydWUsXG4gICAgICBkaWN0UmVtb3ZlRmlsZTogZHpEZWxldGVJY29uLFxuICAgICAgZGljdENhbmNlbFVwbG9hZDogJycsXG4gICAgICBtYXhGaWxlc2l6ZTogaXNEb2MgPyAyNSA6IDUsXG4gICAgICAvL2FjY2VwdGVkRmlsZXM6IGlzRG9jID8gJy5wZGYsIC5kb2MsIGRvY3gnIDogJy5qcGcsIC5wbmcsIGpwZWcnLFxuICAgICAgZGljdEZpbGVUb29CaWc6ICfQktGLINC/0YvRgtCw0LXRgtC10YHRjCDQt9Cw0LPRgNGD0LfQuNGC0Ywg0YHQu9GD0YjQutC+0Lwg0LHQvtC70YzRiNC+0Lkg0YTQsNC50LsgKHt7ZmlsZXNpemV9fU1iKS4g0JzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INGA0LDQt9C80LXRgDoge3ttYXhGaWxlc2l6ZX19TWIuJyxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMub24oJ2FkZGVkZmlsZScsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKCdyZW1vdmVkZmlsZScsIGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgICAgYWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9uKFwicXVldWVjb21wbGV0ZVwiLCBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgICAgaWYgKCFteVN0b3BSZWxvYWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbXlTdG9wUmVsb2FkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGZpbGUsIGVycm9yKSB7XG4gICAgICAgICAgICAgIGFkZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGR6Q3VzdG9tRGlzcGxheUVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIGR6Q3VzdG9tRGlzcGxheUVycm9yKGZpbGUsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICQoJy5kei1lcnJvcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgIG15U3RvcFJlbG9hZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAvL3dpbmRvdy5hbGVydChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHsgaW5pdERyb3Bab25lIH07XG4iLCJpbXBvcnQgdW5BY3RpdmUgZnJvbSAnLi91bi1hY3RpdmUnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIGNvbnN0IGZhbGFnSW5wdXRGaWVsZHMgPSBbXTtcbiAgY29uc3QgZm9ybUlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb3JtX19maWVsZCBpbnB1dCcpO1xuXG4gIGZvcm1JbnB1dHMuZm9yRWFjaCgoZm9ybUlucHV0LCBpKSA9PiB7XG4gICAgaWYgKGZvcm1JbnB1dC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LmFkZCgnZmlsbGVkJyk7XG4gICAgfVxuXG4gICAgZm9ybUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgaWYgKGZvcm1JbnB1dC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpO1xuICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LmFkZCgndmFsaWQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmYWxhZ0lucHV0RmllbGRzW2ldKSB7XG4gICAgICAgIGZvcm1JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKGZvcm1JbnB1dC52YWxpZGl0eS52YWxpZCkge1xuICAgICAgICAgICAgZm9ybUlucHV0LmNsb3Nlc3QoJy5mb3JtX19maWVsZCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIGZvcm1JbnB1dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QuYWRkKCd2YWxpZCcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWZvcm1JbnB1dC52YWxpZGl0eS52YWxpZCAmJiBmb3JtSW5wdXQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9ybUlucHV0LmNsb3Nlc3QoJy5mb3JtX19maWVsZCcpLmNsYXNzTGlzdC5hZGQoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIGZvcm1JbnB1dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QucmVtb3ZlKCd2YWxpZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpO1xuICAgICAgICAgICAgZm9ybUlucHV0LmNsb3Nlc3QoJy5mb3JtX19maWVsZCcpLmNsYXNzTGlzdC5yZW1vdmUoJ3ZhbGlkJyk7XG4gICAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgnZmlsbGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3JtSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgICAgICBpZiAoZm9ybUlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpO1xuICAgICAgICAgICAgZm9ybUlucHV0LmNsb3Nlc3QoJy5mb3JtX19maWVsZCcpLmNsYXNzTGlzdC5hZGQoJ3ZhbGlkJyk7XG4gICAgICAgICAgfSBlbHNlIGlmICghZm9ybUlucHV0LnZhbGlkaXR5LnZhbGlkICYmIGZvcm1JbnB1dC52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LmFkZCgnaW52YWxpZCcpO1xuICAgICAgICAgICAgZm9ybUlucHV0LmNsb3Nlc3QoJy5mb3JtX19maWVsZCcpLmNsYXNzTGlzdC5yZW1vdmUoJ3ZhbGlkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcm1JbnB1dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QucmVtb3ZlKCdpbnZhbGlkJyk7XG4gICAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgndmFsaWQnKTtcbiAgICAgICAgICAgIGZvcm1JbnB1dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QucmVtb3ZlKCdmaWxsZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvcm1JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICAgICAgICBmb3JtSW5wdXQuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykuY2xhc3NMaXN0LnJlbW92ZSgnaW52YWxpZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmYWxhZ0lucHV0RmllbGRzW2ldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgY29uc3QgcGFzc3dvcmRUb2dnbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm1fX3Nob3ctcGFzc3dvcmQnKTtcblxuICBwYXNzd29yZFRvZ2dsZXMuZm9yRWFjaCgocGFzc3dvcmRUb2dnbGUpID0+IHtcbiAgICBjb25zdCBwYXNzd29yZElucHV0ID0gcGFzc3dvcmRUb2dnbGUuY2xvc2VzdCgnLmZvcm1fX2ZpZWxkJykucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInBhc3N3b3JkXCInKTtcblxuICAgIGlmIChwYXNzd29yZElucHV0KSB7XG4gICAgICBwYXNzd29yZFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKHBhc3N3b3JkVG9nZ2xlLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgICAgICBwYXNzd29yZFRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgICAgIHBhc3N3b3JkSW5wdXQudHlwZSA9ICdwYXNzd29yZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFzc3dvcmRUb2dnbGUuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAgICAgICBwYXNzd29yZElucHV0LnR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgZm9ybVNlbGVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9fZmllbGQtLXNlbGVjdCcpO1xuXG4gIGNvbnN0IGZvcm1TZWxlY3RPcmdhbmlzYXRpb25Sb3dzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm1fX3Jvdy0tb3JnYW5pc2F0aW9uJyk7XG5cbiAgY29uc3Qgb3JnYW5pc2F0aW9uRmllbGRUb2dnbGUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IDMpIHtcbiAgICAgIGZvcm1TZWxlY3RPcmdhbmlzYXRpb25Sb3dzLmZvckVhY2goKGZvcm1TZWxlY3RPcmdhbmlzYXRpb25Sb3cpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXRGaWVsZCA9IGZvcm1TZWxlY3RPcmdhbmlzYXRpb25Sb3cucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgICAgaW5wdXRGaWVsZC52YWx1ZSA9ICcnO1xuICAgICAgICBpbnB1dEZpZWxkLnJlcXVpcmVkID0gdHJ1ZTtcblxuICAgICAgICBmb3JtU2VsZWN0T3JnYW5pc2F0aW9uUm93LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtU2VsZWN0T3JnYW5pc2F0aW9uUm93cy5mb3JFYWNoKChmb3JtU2VsZWN0T3JnYW5pc2F0aW9uUm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGlucHV0RmllbGQgPSBmb3JtU2VsZWN0T3JnYW5pc2F0aW9uUm93LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgICAgIGlucHV0RmllbGQudmFsdWUgPSAnJztcbiAgICAgICAgaW5wdXRGaWVsZC5yZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvcm1TZWxlY3RPcmdhbmlzYXRpb25Sb3cuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1TZWxlY3RzLmZvckVhY2goKGZvcm1TZWxlY3QpID0+IHtcbiAgICBjb25zdCBmb3JtU2VsZWN0SW5wdXRUZXh0ID0gZm9ybVNlbGVjdC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xuICAgIGNvbnN0IGZvcm1TZWxlY3RJbnB1dElkID0gZm9ybVNlbGVjdC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiaGlkZGVuXCJdJyk7XG5cbiAgICBjb25zdCBzZXRWYWx1ZUlucHV0cyA9ICh0ZXh0LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKGZvcm1TZWxlY3RJbnB1dFRleHQgJiYgZm9ybVNlbGVjdElucHV0SWQpIHtcbiAgICAgICAgZm9ybVNlbGVjdElucHV0VGV4dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QuYWRkKCd2YWxpZCcpO1xuICAgICAgICBmb3JtU2VsZWN0SW5wdXRUZXh0LnZhbHVlID0gdGV4dDtcbiAgICAgICAgZm9ybVNlbGVjdElucHV0SWQudmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgc2V0QWN0aXZlSXRlbSA9IChlbGVtZW50LCBlbGVtZW50cykgPT4ge1xuICAgICAgdW5BY3RpdmUoZWxlbWVudHMsICdhY3RpdmUnKTtcblxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblxuICAgICAgc2V0VmFsdWVJbnB1dHMoZWxlbWVudC50ZXh0Q29udGVudCwgZWxlbWVudC5kYXRhc2V0LnZhbHVlKTtcblxuICAgICAgZm9ybVNlbGVjdElucHV0VGV4dC5jbG9zZXN0KCcuZm9ybV9fZmllbGQnKS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuXG4gICAgICBvcmdhbmlzYXRpb25GaWVsZFRvZ2dsZShwYXJzZUludChmb3JtU2VsZWN0SW5wdXRJZC52YWx1ZSwgMTApKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZm9ybVNlbGVjdExpc3QgPSBmb3JtU2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19zZWxlY3QnKTtcbiAgICBjb25zdCBmb3JtU2VsZWN0TGlzdEl0ZW1zID0gZm9ybVNlbGVjdExpc3Q/LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG5cbiAgICBpZiAoZm9ybVNlbGVjdElucHV0SWQudmFsdWUpIHtcbiAgICAgIGNvbnN0IGZvcm1TZWxlY3RMaXN0SXRlbSA9IFtdXG4gICAgICAgIC5maWx0ZXJcbiAgICAgICAgLmNhbGwoZm9ybVNlbGVjdExpc3RJdGVtcywgKGl0KSA9PiBpdC5kYXRhc2V0LnZhbHVlID09PSBmb3JtU2VsZWN0SW5wdXRJZC52YWx1ZSlbMF07XG5cbiAgICAgIHNldEFjdGl2ZUl0ZW0oZm9ybVNlbGVjdExpc3RJdGVtLCBmb3JtU2VsZWN0TGlzdEl0ZW1zKTtcbiAgICB9XG5cbiAgICBmb3JtU2VsZWN0TGlzdEl0ZW1zLmZvckVhY2goKGZvcm1TZWxlY3RMaXN0SXRlbSkgPT4ge1xuICAgICAgZm9ybVNlbGVjdExpc3RJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBzZXRBY3RpdmVJdGVtKGZvcm1TZWxlY3RMaXN0SXRlbSwgZm9ybVNlbGVjdExpc3RJdGVtcyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGZvcm1TZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBmb3JtU2VsZWN0LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuXG4gICAgICBmb3JtU2VsZWN0TGlzdD8uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG4gICAgfSk7XG4gIH0pO1xufTtcbiIsImltcG9ydCB7IEFjY29yZGlvbnMgfSBmcm9tICcuL3ZlbmRvci9hY2NvcmRpb25zJztcblxubGV0IGFjY29yZGlvbnM7XG5cbmNvbnN0IGluaXRBY2NvcmRpb25zID0gKCkgPT4ge1xuICBhY2NvcmRpb25zID0gbmV3IEFjY29yZGlvbnMoKTtcbiAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDQsiDRgNCw0LfRgNCw0LHQvtGC0LrQtSDRjdC60YHQv9C+0YDRgtC40YDRg9C10LzRg9GOINC/0LXRgNC10LzQtdC90L3Rg9GOIGFjY29yZGlvbnMsIHdpbmRvdyDRgdC00LXQu9Cw0L0g0LTQu9GPINCx0Y3QutGN0L3QtNCwXG4gIHdpbmRvdy5hY2NvcmRpb25zID0gYWNjb3JkaW9ucztcbn07XG5cbmV4cG9ydCB7IGluaXRBY2NvcmRpb25zLCBhY2NvcmRpb25zIH07XG4iLCJpbXBvcnQgZGF0ZVBpY2tlciBmcm9tICcuL2RhdGUtcGlja2VyJztcbmltcG9ydCB1c2VyIGZyb20gJy4vdXNlcic7XG4vLyBpbXBvcnQgdXNlciBmcm9tICcuL3VzZXInO1xuaW1wb3J0IGFib3V0IGZyb20gJy4vYWJvdXQnO1xuLy8gaW1wb3J0IGZhcSBmcm9tICcuL2ZhcSc7XG5pbXBvcnQgcmFuZ2UgZnJvbSAnLi9yYW5nZSc7XG5pbXBvcnQgZm9ybSBmcm9tICcuL2Zvcm0nO1xuaW1wb3J0IHsgaW5pdERyb3Bab25lIH0gZnJvbSAnLi9kcm9wem9uZSc7XG5pbXBvcnQgeyBpbml0QWNjb3JkaW9ucyB9IGZyb20gJy4vaW5pdC1hY2NvcmRpb25zJztcbmltcG9ydCB7IGluaXRTYW5kd2ljaE1lbnUgfSBmcm9tICcuL3NhbmR3aWNoJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgLy8gdXNlcigpO1xuICAvLyBhYm91dCgpO1xuICBkYXRlUGlja2VyKCk7XG4gIHVzZXIoKTtcbiAgLy8gZmFxKCk7XG4gIHJhbmdlKCk7XG4gIGZvcm0oKTtcbiAgaW5pdERyb3Bab25lKCk7XG4gIGluaXRBY2NvcmRpb25zKCk7XG4gIGluaXRTYW5kd2ljaE1lbnUoKTtcbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCByYW5nZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmFuZ2UnKTtcblxuICBpZiAocmFuZ2VzLmxlbmd0aCA+IDApIHtcbiAgICByYW5nZXMuZm9yRWFjaCgocmFuZ2UpID0+IHtcbiAgICAgIGNvbnN0IHJhbmdlSW5wdXQgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCcucmFuZ2VfX2lucHV0Jyk7XG4gICAgICBjb25zdCByYW5nZVByb2dyZXNzID0gcmFuZ2UucXVlcnlTZWxlY3RvcignLnJhbmdlX19wcm9ncmVzcycpO1xuICAgICAgY29uc3QgcmFuZ2VPdXRwdXQgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCcucmFuZ2VfX291dHB1dCBpbnB1dCcpO1xuXG4gICAgICBjb25zdCBuaWNlVGhvdXNhbmQgPSAoc3RyaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0cmluZyA9IE51bWJlci5pc05hTihzdHJpbmcpID8gJycgOiBzdHJpbmc7XG5cbiAgICAgICAgcmV0dXJuIG5ld1N0cmluZy50b1N0cmluZygpXG4gICAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAubWFwKChjaGFyLCBpKSA9PiBjaGFyICsgKGkgJSAzID8gJycgOiAnICcpKVxuICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAuam9pbignJylcbiAgICAgICAgICAudHJpbSgpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHJhbmdlSW5wdXQgJiYgcmFuZ2VQcm9ncmVzcyAmJiByYW5nZU91dHB1dCkge1xuICAgICAgICBjb25zdCB6MSA9IHBhcnNlSW50KHJhbmdlSW5wdXQubWluLCAxMCk7XG4gICAgICAgIGNvbnN0IHoyID0gcGFyc2VJbnQocmFuZ2VJbnB1dC5tYXgsIDEwKTtcbiAgICAgICAgY29uc3QgeCA9IDEwMCAvICh6MiAtIHoxKTtcbiAgICAgICAgY29uc3QgeSA9ICgtejEgKiAxMDApIC8gKHoyIC0gejEpO1xuXG4gICAgICAgIGNvbnN0IGRyYXdQcm9ncmVzcyA9ICh2YWx1ZSwgdHlwZSA9ICdyYW5nZScpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWVJbm5lciA9IHZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlID09PSAncmFuZ2UnKSB7XG4gICAgICAgICAgICByYW5nZU91dHB1dC52YWx1ZSA9IHZhbHVlSW5uZXI7XG5cbiAgICAgICAgICAgIHJhbmdlT3V0cHV0LmNsb3Nlc3QoJy5yYW5nZV9fb3V0cHV0JykuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3InKTtcblxuICAgICAgICAgICAgcmFuZ2VPdXRwdXQudmFsdWUgPSBuaWNlVGhvdXNhbmQodmFsdWVJbm5lcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlSW5uZXIgPSBwYXJzZUludCh2YWx1ZUlubmVyLnJlcGxhY2UoL1xccy9nLCAnJyksIDEwKTtcblxuICAgICAgICAgICAgaWYgKHoyID49IHZhbHVlSW5uZXIgJiYgejEgPD0gdmFsdWVJbm5lcikge1xuICAgICAgICAgICAgICByYW5nZUlucHV0LnZhbHVlID0gdmFsdWVJbm5lcjtcblxuICAgICAgICAgICAgICByYW5nZU91dHB1dC5jbG9zZXN0KCcucmFuZ2VfX291dHB1dCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2Vycm9yJyk7XG5cbiAgICAgICAgICAgICAgcmFuZ2VPdXRwdXQudmFsdWUgPSBuaWNlVGhvdXNhbmQodmFsdWVJbm5lcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByYW5nZU91dHB1dC5jbG9zZXN0KCcucmFuZ2VfX291dHB1dCcpLmNsYXNzTGlzdC5hZGQoJ2Vycm9yJyk7XG5cbiAgICAgICAgICAgICAgcmFuZ2VPdXRwdXQudmFsdWUgPSBuaWNlVGhvdXNhbmQodmFsdWVJbm5lcik7XG5cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh2YWx1ZUlubmVyID4gejEpIHtcbiAgICAgICAgICAgIHJhbmdlUHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHsodmFsdWVJbm5lciAqIHgpICsgeX0lYDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VQcm9ncmVzcy5zdHlsZS53aWR0aCA9ICcwJSc7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGRyYXdQcm9ncmVzcyhyYW5nZUlucHV0LnZhbHVlLCAncmFuZ2UnKTtcblxuICAgICAgICByYW5nZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgIGRyYXdQcm9ncmVzcyhyYW5nZUlucHV0LnZhbHVlLCAncmFuZ2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmFuZ2VPdXRwdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgICAgZHJhd1Byb2dyZXNzKHJhbmdlT3V0cHV0LnZhbHVlLCAndGV4dCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldnQpID0+ICgvWzAtOVxcc10vLnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShldnQua2V5KSkpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcbiIsImltcG9ydCB7IFNjcm9sbExvY2sgfSBmcm9tICcuL3ZlbmRvci9zY3JvbGwtbG9jayc7XG5cbmNvbnN0IGJyZWFrcG9pbnRNZCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOjEwMjRweCknKTtcbmNvbnN0IGhlYWRlckxvZ28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1oZWFkZXItbG9nb10nKTtcbmNvbnN0IHNhbmR3aWNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2FuZHdpY2hdJyk7XG5jb25zdCBuYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tYWluLW5hdl0nKTtcbmNvbnN0IHNjcm9sbExvY2sgPSBuZXcgU2Nyb2xsTG9jaygpO1xuXG5jb25zdCBvcGVuTWVudSA9ICgpID0+IHtcbiAgc2Nyb2xsTG9jay5kaXNhYmxlU2Nyb2xsaW5nKCk7XG4gIHNhbmR3aWNoLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICBzYW5kd2ljaC5hcmlhUHJlc3NlZCA9ICd0cnVlJztcbiAgbmF2LmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICBoZWFkZXJMb2dvLmNsYXNzTGlzdC5hZGQoJ2lzLW1lbnUnKTtcbiAgLy8gbmF2SXRlbS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAvLyAgIGl0ZW0uc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gYCR7MC4zICsgaW5kZXggKiAwLjJ9c2A7XG4gIC8vIH0pO1xufTtcblxuY29uc3QgY2xvc2VNZW51ID0gKCkgPT4ge1xuICBzY3JvbGxMb2NrLmVuYWJsZVNjcm9sbGluZygpO1xuICBzYW5kd2ljaC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTtcbiAgc2FuZHdpY2guYXJpYVByZXNzZWQgPSAnZmFsc2UnO1xuICBuYXYuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gIGhlYWRlckxvZ28uY2xhc3NMaXN0LnJlbW92ZSgnaXMtbWVudScpO1xuICAvLyBuYXZJdGVtLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgLy8gICBpdGVtLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9ICcnO1xuICAvLyB9KTtcbn07XG5cbmNvbnN0IGJyZWFrcG9pbnRDaGVja2VyID0gKCkgPT4ge1xuICBpZiAoYnJlYWtwb2ludE1kLm1hdGNoZXMpIHtcbiAgICBpZiAobmF2LmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpIHtcbiAgICAgIGNsb3NlTWVudSgpO1xuICAgIH1cbiAgfVxuICBicmVha3BvaW50TWQuYWRkTGlzdGVuZXIoYnJlYWtwb2ludENoZWNrZXIpO1xufTtcblxuY29uc3QgaW5pdFNhbmR3aWNoTWVudSA9ICgpID0+IHtcbiAgaWYgKHNhbmR3aWNoKSB7XG4gICAgc2FuZHdpY2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoc2FuZHdpY2guYXJpYVByZXNzZWQgPT09ICd0cnVlJykge1xuICAgICAgICBjbG9zZU1lbnUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZW5NZW51KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYnJlYWtwb2ludENoZWNrZXIoKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgaW5pdFNhbmR3aWNoTWVudSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgKGVsZW1lbnRzLCBhY3RpdmVDbGFzcywgcmVtb3ZlUGFyZW50QWN0aXZlKSA9PiB7XG4gIGVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoYWN0aXZlQ2xhc3MpKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoYWN0aXZlQ2xhc3MpO1xuXG4gICAgICBpZiAocmVtb3ZlUGFyZW50QWN0aXZlKSB7XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKGFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbiIsIi8vIGV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbi8vICAgY29uc3QgdXNlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLWhlYWRlcl9fdXNlcicpO1xuLy9cbi8vICAgaWYgKHVzZXIpIHtcbi8vICAgICBjb25zdCB1c2VyVG9nZ2xlID0gdXNlci5xdWVyeVNlbGVjdG9yKCcudXNlcl9fdG9nZ2xlJyk7XG4vLyAgICAgY29uc3QgdXNlckxpc3QgPSB1c2VyLnF1ZXJ5U2VsZWN0b3IoJy51c2VyX19saXN0Jyk7XG4vL1xuLy8gICAgIGNvbnN0IG9uVXNlclRvZ2dsZU1vdXNlRW50ZXIgPSAoKSA9PiB7XG4vLyAgICAgICB1c2VyVG9nZ2xlLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuLy8gICAgICAgdXNlckxpc3QuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4vL1xuLy8gICAgICAgdXNlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Vc2VyTW91c2VMZWF2ZSk7XG4vLyAgICAgICB1c2VyVG9nZ2xlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBvblVzZXJUb2dnbGVNb3VzZUVudGVyKTtcbi8vICAgICB9O1xuLy9cbi8vICAgICBjb25zdCBvblVzZXJNb3VzZUxlYXZlID0gKCkgPT4ge1xuLy8gICAgICAgdXNlclRvZ2dsZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbi8vICAgICAgIHVzZXJMaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuLy9cbi8vICAgICAgIHVzZXJUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9uVXNlclRvZ2dsZU1vdXNlRW50ZXIpO1xuLy8gICAgICAgdXNlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Vc2VyTW91c2VMZWF2ZSk7XG4vLyAgICAgfTtcbi8vXG4vLyAgICAgdXNlclRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25Vc2VyVG9nZ2xlTW91c2VFbnRlcik7XG4vLyAgICAgdXNlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Vc2VyTW91c2VMZWF2ZSk7XG4vLyAgIH1cbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgbGV0IGN1cnJlbnRUYXJnZXQ7XG4gIGNvbnN0IHVzZXJCdXR0b25DbGlja0hhbmRsZXIgPSAoZSkgPT4ge1xuICAgIGNvbnN0IG1lbnVJdGVtID0gZS50YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIGlmIChtZW51SXRlbSAmJiBtZW51SXRlbS5tYXRjaGVzKCcuX2pzLXVzZXItbGlzdC5hY3RpdmUnKSkge1xuICAgICAgbWVudUl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIG1lbnVJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFRhcmdldCkge1xuICAgICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCcuX2pzLXVzZXItbGlzdCcpKSB7XG4gICAgICAgIGN1cnJlbnRUYXJnZXQucHJldmlvdXNFbGVtZW50U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1lbnVJdGVtICYmIG1lbnVJdGVtLm1hdGNoZXMoJy5fanMtdXNlci1saXN0JykpIHtcbiAgICAgIG1lbnVJdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICBtZW51SXRlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgIGN1cnJlbnRUYXJnZXQgPSBtZW51SXRlbTtcbiAgICB9XG4gIH07XG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1c2VyQnV0dG9uQ2xpY2tIYW5kbGVyKTtcbn07XG4iLCJleHBvcnQgY2xhc3MgQWNjb3JkaW9ucyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX29wZW5IZWlnaHQgPSAwO1xuICAgIHRoaXMuX3dpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5fZG9jdW1lbnRDbGlja0hhbmRsZXIgPSB0aGlzLl9kb2N1bWVudENsaWNrSGFuZGxlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZUhhbmRsZXIgPSB0aGlzLl93aW5kb3dSZXNpemVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faW5pdCgpO1xuICB9XG5cbiAgX2luaXQoKSB7XG4gICAgdGhpcy5mdWxsVXBkYXRlKCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9kb2N1bWVudENsaWNrSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3dpbmRvd1Jlc2l6ZUhhbmRsZXIpO1xuICB9XG5cbiAgX2RvY3VtZW50Q2xpY2tIYW5kbGVyKGV2dCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2dC50YXJnZXQ7XG4gICAgaWYgKCF0YXJnZXQuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uPVwiYnV0dG9uXCJdJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBlbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbj1cImVsZW1lbnRcIl0nKTtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLmNsb3NlQWNjb3JkaW9uKGVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm9wZW5BY2NvcmRpb24oZWxlbWVudCk7XG4gIH1cblxuICBfd2luZG93UmVzaXplSGFuZGxlcigpIHtcbiAgICBpZiAodGhpcy5fd2luZG93V2lkdGggPT09IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3dpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy51cGRhdGVBY2NvcmRpb25zSGVpZ2h0KCk7XG4gIH1cblxuICBjbG9zZUFsbEFjY29yZGlvbihwYXJlbnQpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1hY2NvcmRpb249XCJlbGVtZW50XCJdJyk7XG4gICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFBhcmVudCA9IGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uPVwicGFyZW50XCJdJyk7XG4gICAgICBpZiAoY3VycmVudFBhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICAgIHRoaXMuY2xvc2VBY2NvcmRpb24oZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVBY2NvcmRpb25zSGVpZ2h0KGVsZW1lbnQgPSBudWxsKSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFjY29yZGlvbj1cImNvbnRlbnRcIl0nKTtcbiAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICAgIGNvbnRlbnQuc3R5bGUubWF4SGVpZ2h0ID0gYCR7Y29udGVudC5zY3JvbGxIZWlnaHR9cHhgO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgb3BlbkVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYWNjb3JkaW9uPVwiZWxlbWVudFwiXS5pcy1hY3RpdmUnKTtcbiAgICBvcGVuRWxlbWVudHMuZm9yRWFjaCgob3BlbkVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBvcGVuRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hY2NvcmRpb249XCJjb250ZW50XCJdJyk7XG4gICAgICBjb250ZW50LnN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSc7XG4gICAgICBjb250ZW50LnN0eWxlLm1heEhlaWdodCA9IGAke2NvbnRlbnQuc2Nyb2xsSGVpZ2h0fXB4YDtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb250ZW50LnN0eWxlLnRyYW5zaXRpb24gPSBudWxsO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdWxsVXBkYXRlKHBhcmVudCA9IG51bGwsIHRyYW5zaXRpb24gPSBmYWxzZSkge1xuICAgIGxldCBvcGVuRWxlbWVudHM7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgb3BlbkVsZW1lbnRzID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFjY29yZGlvbj1cImVsZW1lbnRcIl0uaXMtYWN0aXZlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wZW5FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWFjY29yZGlvbj1cImVsZW1lbnRcIl0uaXMtYWN0aXZlJyk7XG4gICAgfVxuICAgIG9wZW5FbGVtZW50cy5mb3JFYWNoKChvcGVuRWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgaW5uZXJQYXJlbnQgPSBvcGVuRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hY2NvcmRpb249XCJwYXJlbnRcIl0nKTtcbiAgICAgIGlmIChpbm5lclBhcmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm9wZW5BY2NvcmRpb24ob3BlbkVsZW1lbnQsIHRyYW5zaXRpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlbkFjY29yZGlvbihlbGVtZW50LCB0cmFuc2l0aW9uID0gdHJ1ZSkge1xuICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbj1cInBhcmVudFwiXScpO1xuICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hY2NvcmRpb249XCJjb250ZW50XCJdJyk7XG4gICAgdGhpcy5fb3BlbkhlaWdodCArPSBjb250ZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cbiAgICBpZiAocGFyZW50RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtc2luZ2xlJykpIHtcbiAgICAgIHRoaXMuY2xvc2VBbGxBY2NvcmRpb24ocGFyZW50RWxlbWVudCk7XG4gICAgfVxuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTtcbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgY29udGVudEVsZW1lbnQuc3R5bGUubWF4SGVpZ2h0ID0gYCR7dGhpcy5fb3BlbkhlaWdodH1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLnRyYW5zaXRpb24gPSAnbm9uZSc7XG4gICAgICBjb250ZW50RWxlbWVudC5zdHlsZS5tYXhIZWlnaHQgPSBgJHt0aGlzLl9vcGVuSGVpZ2h0fXB4YDtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnRFbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLWFjY29yZGlvbj1cImVsZW1lbnRcIl0nKSkge1xuICAgICAgdGhpcy5vcGVuQWNjb3JkaW9uKHBhcmVudEVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtYWNjb3JkaW9uPVwiZWxlbWVudFwiXScpLCB0cmFuc2l0aW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9vcGVuSGVpZ2h0ID0gMDtcbiAgfVxuXG4gIGNsb3NlQWNjb3JkaW9uKGVsZW1lbnQsIHRyYW5zaXRpb24gPSB0cnVlKSB7XG4gICAgY29uc3QgY29udGVudEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFjY29yZGlvbj1cImNvbnRlbnRcIl0nKTtcbiAgICBpZiAoIWNvbnRlbnRFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLm1heEhlaWdodCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudEVsZW1lbnQuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLm1heEhlaWdodCA9ICcwJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGlvc0NoZWNrZXIgPSAoKSA9PiBbXG4gICdpUGFkIFNpbXVsYXRvcicsXG4gICdpUGhvbmUgU2ltdWxhdG9yJyxcbiAgJ2lQb2QgU2ltdWxhdG9yJyxcbiAgJ2lQYWQnLFxuICAnaVBob25lJyxcbiAgJ2lQb2QnLFxuXS5pbmNsdWRlcyhuYXZpZ2F0b3IucGxhdGZvcm0pXG4gICAgLy8gaVBhZCBvbiBpT1MgMTMgZGV0ZWN0aW9uXG4gICAgfHwgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ01hYycpICYmICdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCk7XG4iLCJpbXBvcnQgeyBpb3NDaGVja2VyIH0gZnJvbSAnLi9pb3NDaGVja2VyJztcblxuZXhwb3J0IGNsYXNzIFNjcm9sbExvY2sge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pb3NDaGVja2VyID0gaW9zQ2hlY2tlcjtcbiAgICB0aGlzLl9sb2NrQ2xhc3MgPSB0aGlzLl9pb3NDaGVja2VyKCkgPyAnc2Nyb2xsLWxvY2staW9zJyA6ICdzY3JvbGwtbG9jayc7XG4gICAgdGhpcy5fc2Nyb2xsVG9wID0gbnVsbDtcbiAgICB0aGlzLl9maXhlZEJsb2NrRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1maXgtYmxvY2tdJyk7XG4gIH1cblxuICBfZ2V0U2Nyb2xsYmFyV2lkdGgoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgX2dldEJvZHlTY3JvbGxUb3AoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHNlbGYucGFnZVlPZmZzZXQgfHxcbiAgICAgIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LlNjcm9sbFRvcCkgfHxcbiAgICAgIChkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKVxuICAgICk7XG4gIH1cblxuICBkaXNhYmxlU2Nyb2xsaW5nKCkge1xuICAgIHRoaXMuX3Njcm9sbFRvcCA9IGRvY3VtZW50LmJvZHkuZGF0YXNldC5zY3JvbGwgPSBkb2N1bWVudC5ib2R5LmRhdGFzZXQuc2Nyb2xsID8gZG9jdW1lbnQuYm9keS5kYXRhc2V0LnNjcm9sbCA6IHRoaXMuX2dldEJvZHlTY3JvbGxUb3AoKTtcbiAgICBpZiAodGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHt0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpfXB4YDtcbiAgICAgIHRoaXMuX2ZpeGVkQmxvY2tFbGVtZW50cy5mb3JFYWNoKChibG9jaykgPT4ge1xuICAgICAgICBibG9jay5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHt0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpfXB4YDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IGAtJHt0aGlzLl9zY3JvbGxUb3B9cHhgO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCh0aGlzLl9sb2NrQ2xhc3MpO1xuICB9XG5cbiAgZW5hYmxlU2Nyb2xsaW5nKCkge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9sb2NrQ2xhc3MpO1xuICAgIHdpbmRvdy5zY3JvbGxUbygwLCArZG9jdW1lbnQuYm9keS5kYXRhc2V0LnNjcm9sbCk7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBudWxsO1xuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gbnVsbDtcbiAgICB0aGlzLl9maXhlZEJsb2NrRWxlbWVudHMuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgIGJsb2NrLnN0eWxlLnBhZGRpbmdSaWdodCA9IG51bGw7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc2Nyb2xsJyk7XG4gICAgdGhpcy5fc2Nyb2xsVG9wID0gbnVsbDtcbiAgfVxufVxuXG53aW5kb3cuc2Nyb2xsTG9jayA9IG5ldyBTY3JvbGxMb2NrKCk7XG4iXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmWVhCd2JIbGZaR1ZqYjNKaGRHVmtYMlJsYzJOeWFYQjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmWVhKeVlYbGZkMmwwYUY5b2IyeGxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTloY25KaGVWOTNhWFJvYjNWMFgyaHZiR1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDJGemMyVnlkRjkwYUdselgybHVhWFJwWVd4cGVtVmtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMkZ6ZVc1algyZGxibVZ5WVhSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOWhjM2x1WTE5blpXNWxjbUYwYjNKZlpHVnNaV2RoZEdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZllYTjVibU5mYVhSbGNtRjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmWVhONWJtTmZkRzlmWjJWdVpYSmhkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDJGM1lXbDBYMkZ6ZVc1algyZGxibVZ5WVhSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOWhkMkZwZEY5MllXeDFaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTlqYkdGemMxOWpZV3hzWDJOb1pXTnJMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMk5zWVhOelgyNWhiV1ZmZEdSNlgyVnljbTl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDJOc1lYTnpYM0J5YVhaaGRHVmZabWxsYkdSZloyVjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMk5zWVhOelgzQnlhWFpoZEdWZlptbGxiR1JmYkc5dmMyVmZZbUZ6WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDE5amJHRnpjMTl3Y21sMllYUmxYMlpwWld4a1gzTmxkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTlqYkdGemMxOXdjbWwyWVhSbFgyMWxkR2h2WkY5blpYUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZZMnhoYzNOZmNISnBkbUYwWlY5dFpYUm9iMlJmYzJWMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyTnNZWE56WDNOMFlYUnBZMTl3Y21sMllYUmxYMlpwWld4a1gzTndaV05mWjJWMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyTnNZWE56WDNOMFlYUnBZMTl3Y21sMllYUmxYMlpwWld4a1gzTndaV05mYzJWMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyTnZibk4wY25WamRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOWpjbVZoZEdWZlkyeGhjM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmWTNKbFlYUmxYM04xY0dWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyUmxZMjl5WVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyUmxabUYxYkhSekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyUmxabWx1WlY5bGJuVnRaWEpoWW14bFgzQnliM0JsY25ScFpYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZaR1ZtYVc1bFgzQnliM0JsY25SNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgyVjRkR1Z1WkhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZloyVjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMmRsZEY5d2NtOTBiM1I1Y0dWZmIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZhVzVvWlhKcGRITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZhVzVvWlhKcGRITmZiRzl2YzJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmFXNXBkR2xoYkdsNlpYSmZaR1ZtYVc1bFgzQnliM0JsY25SNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgybHVhWFJwWVd4cGVtVnlYM2RoY201cGJtZGZhR1ZzY0dWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwwQnpkMk12YUdWc2NHVnljeTlzYVdJdlgybHVjM1JoYm1ObGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZhVzUwWlhKdmNGOXlaWEYxYVhKbFgyUmxabUYxYkhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmFXNTBaWEp2Y0Y5eVpYRjFhWEpsWDNkcGJHUmpZWEprTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDJselgyNWhkR2wyWlY5bWRXNWpkR2x2Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDE5cGMxOXVZWFJwZG1WZmNtVm1iR1ZqZEY5amIyNXpkSEoxWTNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmFYUmxjbUZpYkdWZmRHOWZZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmFYUmxjbUZpYkdWZmRHOWZZWEp5WVhsZmJHbHRhWFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmYVhSbGNtRmliR1ZmZEc5ZllYSnlZWGxmYkdsdGFYUmZiRzl2YzJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmFuTjRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMjVsZDE5aGNuSnZkMTlqYUdWamF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOXViMjVmYVhSbGNtRmliR1ZmY21WemRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOXViMjVmYVhSbGNtRmliR1ZmYzNCeVpXRmtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYMjlpYW1WamRGOXpjSEpsWVdRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlFITjNZeTlvWld4d1pYSnpMMnhwWWk5ZmIySnFaV04wWDNkcGRHaHZkWFJmY0hKdmNHVnlkR2xsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDE5dlltcGxZM1JmZDJsMGFHOTFkRjl3Y205d1pYSjBhV1Z6WDJ4dmIzTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYM0J2YzNOcFlteGxYMk52Ym5OMGNuVmpkRzl5WDNKbGRIVnliaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTl5WldGa1gyOXViSGxmWlhKeWIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZjMlYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDNObGRGOXdjbTkwYjNSNWNHVmZiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmYzJ0cGNGOW1hWEp6ZEY5blpXNWxjbUYwYjNKZmJtVjRkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTl6YkdsalpXUmZkRzlmWVhKeVlYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZRSE4zWXk5b1pXeHdaWEp6TDJ4cFlpOWZjMnhwWTJWa1gzUnZYMkZ5Y21GNVgyeHZiM05sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDBCemQyTXZhR1ZzY0dWeWN5OXNhV0l2WDNOMWNHVnlYM0J5YjNCZlltRnpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTkwWVdkblpXUmZkR1Z0Y0d4aGRHVmZiR2wwWlhKaGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOTBZV2RuWldSZmRHVnRjR3hoZEdWZmJHbDBaWEpoYkY5c2IyOXpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTkwYUhKdmR5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOTBiMTloY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OUFjM2RqTDJobGJIQmxjbk12YkdsaUwxOTBiMTlqYjI1emRXMWhZbXhsWDJGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMEJ6ZDJNdmFHVnNjR1Z5Y3k5c2FXSXZYM1J2WDNCeWFXMXBkR2wyWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDE5MGIxOXdjbTl3WlhKMGVWOXJaWGt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12UUhOM1l5OW9aV3h3WlhKekwyeHBZaTlmZEhsd1pWOXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlBYzNkakwyaGxiSEJsY25NdmJHbGlMMTkzY21Gd1gyRnplVzVqWDJkbGJtVnlZWFJ2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDE5M2NtRndYMjVoZEdsMlpWOXpkWEJsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5QWMzZGpMMmhsYkhCbGNuTXZiR2xpTDJsdVpHVjRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMlJ5YjNCNmIyNWxMMlJwYzNRdlpISnZjSHB2Ym1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmFuVnpkQzFsZUhSbGJtUXZhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVXZhbk12WVdKdmRYUXVhbk1pTENKemIzVnlZMlV2YW5NdlpHRjBaUzF3YVdOclpYSXVhbk1pTENKemIzVnlZMlV2YW5NdlpISnZjSHB2Ym1VdWFuTWlMQ0p6YjNWeVkyVXZhbk12Wm05eWJTNXFjeUlzSW5OdmRYSmpaUzlxY3k5cGJtbDBMV0ZqWTI5eVpHbHZibk11YW5NaUxDSnpiM1Z5WTJVdmFuTXZiV0ZwYmk1cWN5SXNJbk52ZFhKalpTOXFjeTl5WVc1blpTNXFjeUlzSW5OdmRYSmpaUzlxY3k5ellXNWtkMmxqYUM1cWN5SXNJbk52ZFhKalpTOXFjeTkxYmkxaFkzUnBkbVV1YW5NaUxDSnpiM1Z5WTJVdmFuTXZkWE5sY2k1cWN5SXNJbk52ZFhKalpTOXFjeTkyWlc1a2IzSXZZV05qYjNKa2FXOXVjeTVxY3lJc0luTnZkWEpqWlM5cWN5OTJaVzVrYjNJdmFXOXpRMmhsWTJ0bGNpNXFjeUlzSW5OdmRYSmpaUzlxY3k5MlpXNWtiM0l2YzJOeWIyeHNMV3h2WTJzdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETjBKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnVSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF5OURRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMjVDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOcVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnlRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU51UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNMVZrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNNVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM2hDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU51UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6VkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE4wTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpWQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOdVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRiRVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRhRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNME5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNaa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE5TOUdRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPMEZEZUVWQk96czdPMlZCUldVc2IwSkJRVTA3UVVGRGJrSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRVlFzUTBGQmRVSXNVVUZCZGtJc1EwRkJaRHM3UVVGRlFTeE5RVUZKTEV0QlFVb3NSVUZCVnp0QlFVTlVMRkZCUVUwc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlF5eG5Ra0ZCVGl4RFFVRjFRaXhuUWtGQmRrSXNRMEZCY2tJN1FVRkRRU3hSUVVGTkxHRkJRV0VzUjBGQlJ5eExRVUZMTEVOQlFVTXNaMEpCUVU0c1EwRkJkVUlzYVVKQlFYWkNMRU5CUVhSQ08wRkJSVUVzU1VGQlFTeFpRVUZaTEVOQlFVTXNUMEZCWWl4RFFVRnhRaXhWUVVGRExGZEJRVVFzUlVGQll5eERRVUZrTEVWQlFXOUNPMEZCUTNaRExFMUJRVUVzVjBGQlZ5eERRVUZETEdkQ1FVRmFMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRmxCUVUwN1FVRkRNVU1zSzBKQlFWTXNXVUZCVkN4RlFVRjFRaXhSUVVGMlFqdEJRVU5CTEZGQlFVRXNWMEZCVnl4RFFVRkRMRk5CUVZvc1EwRkJjMElzUjBGQmRFSXNRMEZCTUVJc1VVRkJNVUk3TzBGQlJVRXNXVUZCU1N4aFFVRmhMRU5CUVVNc1EwRkJSQ3hEUVVGcVFpeEZRVUZ6UWp0QlFVTndRaXhwUTBGQlV5eGhRVUZVTEVWQlFYZENMRkZCUVhoQ08wRkJRMEVzVlVGQlFTeGhRVUZoTEVOQlFVTXNRMEZCUkN4RFFVRmlMRU5CUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRWRCUVROQ0xFTkJRU3RDTEZGQlFTOUNPMEZCUTBRN1FVRkRSaXhQUVZKRU8wRkJVMFFzUzBGV1JEdEJRVmRFTzBGQlEwWXNRenM3T3pzN096czdPenM3TzJWRGNrSmpMRzlDUVVGTk8wRkJRMjVDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEhOQ1FVRjJRaXhEUVVGMFFqdEJRVU5CTEUxQlFVMHNaVUZCWlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEhWQ1FVRjJRaXhEUVVGNFFqdEJRVU5CTEUxQlFVMHNWVUZCVlN4SFFVRkhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeEpRVUZpTEVWQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q0xFbEJRUzlDTEVWQlFYRkRMRWxCUVhKRExFTkJRVzVDTzBGQlEwRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1EwRkRiRUlzVVVGRWEwSXNSVUZGYkVJc1UwRkdhMElzUlVGSGJFSXNUVUZJYTBJc1JVRkpiRUlzVVVGS2EwSXNSVUZMYkVJc1MwRk1hMElzUlVGTmJFSXNUVUZPYTBJc1JVRlBiRUlzVFVGUWEwSXNSVUZSYkVJc1VVRlNhMElzUlVGVGJFSXNWVUZVYTBJc1JVRlZiRUlzVTBGV2EwSXNSVUZYYkVJc1VVRllhMElzUlVGWmJFSXNVMEZhYTBJc1EwRkJjRUk3TzBGQlpVRXNUVUZCU1N4aFFVRktMRVZCUVcxQ08wRkJRMnBDTEZGQlFVMHNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJReXhoUVVGRUxFVkJRV2RDTzBGQlF6TkRMRTFCUVVFc1UwRkJVeXhGUVVGRkxHMUNRVUZETEV0QlFVUXNSVUZCVVN4SlFVRlNMRVZCUVdNc1VVRkJaQ3hGUVVFeVFqdEJRVU53UXl4UlFVRkJMRXRCUVVzc1EwRkJReXhMUVVGT0xFZEJRV01zVDBGQlR5eEpRVUZKTEVOQlFVTXNhMEpCUVV3c1JVRkJja0k3UVVGRFJDeFBRVWd3UXp0QlFVa3pReXhOUVVGQkxGRkJRVkVzUlVGQlJTeHJRa0ZCUXl4UlFVRkVMRVZCUVZjc1NVRkJXQ3hGUVVGdlFqdEJRVU0xUWp0QlFVTk9MRkZCUVVFc1pVRkJaU3hEUVVGRExGZEJRV2hDTEVkQlFUaENMRWRCUVVjc1RVRkJTQ3hEUVVGVkxFbEJRVWtzUTBGQlF5eFBRVUZNTEVWQlFWWXNSVUZCTUVJc1IwRkJNVUlzUlVGQkswSXNUVUZCTDBJc1EwRkJjME1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVVRc1EwRkJha1FzUlVGQmIwVXNSMEZCY0VVc1JVRkJlVVVzVFVGQmVrVXNRMEZCWjBZc1NVRkJTU3hEUVVGRExGZEJRVXdzUlVGQmFFWXNRMEZCT1VJN1FVRkRVU3hSUVVGQkxHVkJRV1VzUTBGQlF5eFpRVUZvUWl4RFFVRTJRaXhYUVVFM1FpeEZRVUV3UXl4SlFVRkpMRU5CUVVNc1QwRkJUQ3hGUVVFeFF6dEJRVU5CTEZGQlFVRXNaVUZCWlN4RFFVRkRMRmxCUVdoQ0xFTkJRVFpDTEZsQlFUZENMRVZCUVRKRExFbEJRVWtzUTBGQlF5eFJRVUZNTEV0QlFXZENMRU5CUVRORUxFVkJTakJDTEVOQlNXOURPenRCUVVNNVJDeFJRVUZCTEdWQlFXVXNRMEZCUXl4WlFVRm9RaXhEUVVFMlFpeFhRVUUzUWl4RlFVRXdReXhKUVVGSkxFTkJRVU1zVjBGQlRDeEZRVUV4UXp0QlFVTkJMRkZCUVVFc2JVSkJRVzFDTzBGQlEzUkNMRTlCV0RCRE8wRkJXVE5ETEUxQlFVRXNZVUZCWVN4RlFVRkZMRU5CUTJJc1NVRkJTU3hKUVVGS0xFTkJRVk1zU1VGQlZDeEZRVUZsTEVWQlFXWXNSVUZCYlVJc1EwRkJia0lzUTBGRVlTeEZRVVZpTEVsQlFVa3NTVUZCU2l4RFFVRlRMRWxCUVZRc1JVRkJaU3hGUVVGbUxFVkJRVzFDTEVOQlFXNUNMRU5CUm1Fc1JVRkhZaXhKUVVGSkxFbEJRVW9zUTBGQlV5eEpRVUZVTEVWQlFXVXNSVUZCWml4RlFVRnRRaXhGUVVGdVFpeERRVWhoTEVWQlNXSXNTVUZCU1N4SlFVRktMRU5CUVZNc1NVRkJWQ3hGUVVGbExFVkJRV1lzUlVGQmJVSXNSVUZCYmtJc1EwRktZU3hGUVV0aUxFbEJRVWtzU1VGQlNpeERRVUZUTEVsQlFWUXNSVUZCWlN4RlFVRm1MRVZCUVcxQ0xFVkJRVzVDTEVOQlRHRXNRMEZhTkVJN1FVRnRRak5ETEUxQlFVRXNWVUZCVlN4RlFVRkZMRWxCYmtJclFqdEJRVzlDTTBNc1RVRkJRU3haUVVGWkxFVkJRVVVzU1VGd1FqWkNPMEZCY1VJelF5eE5RVUZCTEZGQlFWRXNSVUZCUlN4RFFYSkNhVU03UVVGelFqTkRMRTFCUVVFc1ZVRkJWU3hGUVVGRkxGVkJkRUlyUWp0QlFYVkNNME1zVFVGQlFTeFpRVUZaTEVWQlFVVXNWMEYyUWpaQ08wRkJkMEl6UXl4TlFVRkJMR0ZCUVdFc1JVRkJSU3hUUVhoQ05FSTdRVUY1UWpORExFMUJRVUVzYTBKQlFXdENMRVZCUVVVc1lVRjZRblZDTzBGQk1FSXpReXhOUVVGQkxGbEJRVmtzUlVGQlJTeEpRVUZKTEVsQlFVb3NSVUV4UWpaQ08wRkJNa0l6UXl4TlFVRkJMRVZCUVVVc1JVRkJSVHRCUVROQ2RVTXNTMEZCYUVJc1EwRkJOMEk3UVVFMlFrUTdRVUZEUml4RE96czdPenM3T3pzN096czdRVU5zUkVRN08wRkJSVUVzU1VGQlRTeFpRVUZaTEVkQlFVY3NjVmhCUVhKQ096dEJRVVZCTEVsQlFVMHNXVUZCV1N4SFFVRkhMRk5CUVdZc1dVRkJaU3hIUVVGTk8wRkJRM3BDTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRlVMRU5CUVRCQ0xGZEJRVEZDTEVOQlFYcENPMEZCUTBFc1RVRkJTU3haUVVGWkxFZEJRVWNzUzBGQmJrSTdRVUZEUVN4RlFVRkJMR2RDUVVGblFpeERRVUZETEU5QlFXcENMRU5CUVhsQ0xGVkJRVU1zU1VGQlJDeEZRVUZWTzBGQlEycERMRkZCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZNTEVOQlFXdENMR05CUVd4Q0xFTkJRV1E3UVVGRFFTeFJRVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hEUVVGdFFpeGxRVUZ1UWl4RFFVRnNRanRCUVVOQkxGRkJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NhMEpCUVVvc1EwRkJZU3hKUVVGaUxFVkJRVzFDTzBGQlEyeERMRTFCUVVFc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZNTEVOQlFXdENMR3RDUVVGc1FpeERRVVEyUWp0QlFVVnNReXhOUVVGQkxFMUJRVTBzUlVGQlJTeE5RVVl3UWp0QlFVZHNReXhOUVVGQkxFOUJRVThzUlVGQlJUdEJRVU5RTEhkQ1FVRm5RaXhSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4NVFrRkJka0lzUlVGQmEwUXNXVUZCYkVRc1EwRkJLMFFzVTBGQkwwUTdRVUZFVkN4UFFVaDVRanRCUVUxc1F5eE5RVUZCTEZOQlFWTXNSVUZCUlN4VFFVNTFRanRCUVU5c1F5eE5RVUZCTEdOQlFXTXNSVUZCUlN4SlFWQnJRanRCUVZGc1F5eE5RVUZCTEdOQlFXTXNSVUZCUlN4WlFWSnJRanRCUVZOc1F5eE5RVUZCTEdkQ1FVRm5RaXhGUVVGRkxFVkJWR2RDTzBGQlZXeERMRTFCUVVFc1YwRkJWeXhGUVVGRkxFdEJRVXNzUjBGQlJ5eEZRVUZJTEVkQlFWRXNRMEZXVVR0QlFWZHNRenRCUVVOQkxFMUJRVUVzWTBGQll5eEZRVUZGTEhWSFFWcHJRanRCUVdGc1F5eE5RVUZCTEVsQlFVa3NSVUZCUlN4VFFVRlRMRWxCUVZRc1IwRkJaMEk3UVVGRGNFSXNZVUZCU3l4RlFVRk1MRU5CUVZFc1YwRkJVaXhGUVVGeFFpeFZRVUZWTEVsQlFWWXNSVUZCWjBJN1FVRkRia01zVlVGQlFTeFRRVUZUTEVOQlFVTXNTMEZCVml4RFFVRm5RaXhQUVVGb1FpeEhRVUV3UWl4TlFVRXhRanRCUVVORUxGTkJSa1E3UVVGSFFTeGhRVUZMTEVWQlFVd3NRMEZCVVN4aFFVRlNMRVZCUVhWQ0xGVkJRVlVzU1VGQlZpeEZRVUZuUWp0QlFVTnlReXhWUVVGQkxGTkJRVk1zUTBGQlF5eExRVUZXTEVOQlFXZENMRTlCUVdoQ0xFZEJRVEJDTEUxQlFURkNPMEZCUTBRc1UwRkdSRHRCUVVkQkxHRkJRVXNzUlVGQlRDeERRVUZSTEdWQlFWSXNSVUZCZVVJc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTzBGQlEzSkRMR05CUVVrc1EwRkJReXhaUVVGTUxFVkJRVzFDTzBGQlEyWXNXVUZCUVN4UlFVRlJMRU5CUVVNc1RVRkJWRHRCUVVOSUxGZEJSa1FzVFVGRlR6dEJRVU5JTEZsQlFVRXNXVUZCV1N4SFFVRkhMRXRCUVdZN1FVRkRTRHRCUVVWS0xGTkJVRVE3UVVGVFJTeGhRVUZMTEVWQlFVd3NRMEZCVVN4UFFVRlNMRVZCUVdsQ0xGVkJRVk1zU1VGQlZDeEZRVUZsTEV0QlFXWXNSVUZCYzBJN1FVRkRia01zVlVGQlFTeFRRVUZUTEVOQlFVTXNTMEZCVml4RFFVRm5RaXhQUVVGb1FpeEhRVUV3UWl4TlFVRXhRanM3UVVGRFFTeGpRVUZKTEU5QlFVOHNiMEpCUVZBc1MwRkJaME1zVlVGQmNFTXNSVUZCWjBRN1FVRkROVU1zV1VGQlFTeHZRa0ZCYjBJc1EwRkJReXhKUVVGRUxFVkJRVThzUzBGQlVDeERRVUZ3UWp0QlFVTkJMRmxCUVVFc1EwRkJReXhEUVVGRExGZEJRVVFzUTBGQlJDeERRVUZsTEVsQlFXWTdRVUZEUVN4WlFVRkJMRmxCUVZrc1IwRkJSeXhKUVVGbU8wRkJRMGdzVjBGT2EwTXNRMEZSYmtNN1FVRkRRVHM3UVVGRFNDeFRRVlpFTzBGQldVZzdRVUY2UTJsRExFdEJRVzVDTEVOQlFXcENPMEZCTWtORUxFZEJPVU5FTzBGQkswTkVMRU5CYkVSRU96czdPenM3T3pzN096czdRVU5LUVRzN096dGxRVVZsTEc5Q1FVRk5PMEZCUTI1Q0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1JVRkJla0k3UVVGRFFTeE5RVUZOTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNiMEpCUVRGQ0xFTkJRVzVDTzBGQlJVRXNSVUZCUVN4VlFVRlZMRU5CUVVNc1QwRkJXQ3hEUVVGdFFpeFZRVUZETEZOQlFVUXNSVUZCV1N4RFFVRmFMRVZCUVd0Q08wRkJRMjVETEZGQlFVa3NVMEZCVXl4RFFVRkRMRXRCUVZZc1EwRkJaMElzVFVGQmFFSXNSMEZCZVVJc1EwRkJOMElzUlVGQlowTTdRVUZET1VJc1RVRkJRU3hUUVVGVExFTkJRVU1zVDBGQlZpeERRVUZyUWl4alFVRnNRaXhGUVVGclF5eFRRVUZzUXl4RFFVRTBReXhIUVVFMVF5eERRVUZuUkN4UlFVRm9SRHRCUVVORU96dEJRVVZFTEVsQlFVRXNVMEZCVXl4RFFVRkRMR2RDUVVGV0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExGbEJRVTA3UVVGRGVFTXNWVUZCU1N4VFFVRlRMRU5CUVVNc1VVRkJWaXhEUVVGdFFpeExRVUYyUWl4RlFVRTRRanRCUVVNMVFpeFJRVUZCTEZOQlFWTXNRMEZCUXl4UFFVRldMRU5CUVd0Q0xHTkJRV3hDTEVWQlFXdERMRk5CUVd4RExFTkJRVFJETEUxQlFUVkRMRU5CUVcxRUxGTkJRVzVFTzBGQlEwRXNVVUZCUVN4VFFVRlRMRU5CUVVNc1QwRkJWaXhEUVVGclFpeGpRVUZzUWl4RlFVRnJReXhUUVVGc1F5eERRVUUwUXl4SFFVRTFReXhEUVVGblJDeFBRVUZvUkR0QlFVTkVPenRCUVVWRUxGVkJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRUxFTkJRWEpDTEVWQlFUQkNPMEZCUTNoQ0xGRkJRVUVzVTBGQlV5eERRVUZETEdkQ1FVRldMRU5CUVRKQ0xGRkJRVE5DTEVWQlFYRkRMRmxCUVUwN1FVRkRla01zWTBGQlNTeFRRVUZUTEVOQlFVTXNVVUZCVml4RFFVRnRRaXhMUVVGMlFpeEZRVUU0UWp0QlFVTTFRaXhaUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZXTEVOQlFXdENMR05CUVd4Q0xFVkJRV3RETEZOQlFXeERMRU5CUVRSRExFMUJRVFZETEVOQlFXMUVMRk5CUVc1RU8wRkJRMEVzV1VGQlFTeFRRVUZUTEVOQlFVTXNUMEZCVml4RFFVRnJRaXhqUVVGc1FpeEZRVUZyUXl4VFFVRnNReXhEUVVFMFF5eEhRVUUxUXl4RFFVRm5SQ3hQUVVGb1JEdEJRVU5FTEZkQlNFUXNUVUZIVHl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVllzUTBGQmJVSXNTMEZCY0VJc1NVRkJOa0lzVTBGQlV5eERRVUZETEV0QlFWWXNRMEZCWjBJc1RVRkJhRUlzUjBGQmVVSXNRMEZCTVVRc1JVRkJOa1E3UVVGRGJFVXNXVUZCUVN4VFFVRlRMRU5CUVVNc1QwRkJWaXhEUVVGclFpeGpRVUZzUWl4RlFVRnJReXhUUVVGc1F5eERRVUUwUXl4SFFVRTFReXhEUVVGblJDeFRRVUZvUkR0QlFVTkJMRmxCUVVFc1UwRkJVeXhEUVVGRExFOUJRVllzUTBGQmEwSXNZMEZCYkVJc1JVRkJhME1zVTBGQmJFTXNRMEZCTkVNc1RVRkJOVU1zUTBGQmJVUXNUMEZCYmtRN1FVRkRSQ3hYUVVoTkxFMUJSMEU3UVVGRFRDeFpRVUZCTEZOQlFWTXNRMEZCUXl4UFFVRldMRU5CUVd0Q0xHTkJRV3hDTEVWQlFXdERMRk5CUVd4RExFTkJRVFJETEUxQlFUVkRMRU5CUVcxRUxGTkJRVzVFTzBGQlEwRXNXVUZCUVN4VFFVRlRMRU5CUVVNc1QwRkJWaXhEUVVGclFpeGpRVUZzUWl4RlFVRnJReXhUUVVGc1F5eERRVUUwUXl4TlFVRTFReXhEUVVGdFJDeFBRVUZ1UkR0QlFVTkJMRmxCUVVFc1UwRkJVeXhEUVVGRExFOUJRVllzUTBGQmEwSXNZMEZCYkVJc1JVRkJhME1zVTBGQmJFTXNRMEZCTkVNc1RVRkJOVU1zUTBGQmJVUXNVVUZCYmtRN1FVRkRSRHRCUVVOR0xGTkJXa1E3UVVGalFTeFJRVUZCTEZOQlFWTXNRMEZCUXl4blFrRkJWaXhEUVVFeVFpeE5RVUV6UWl4RlFVRnRReXhaUVVGTk8wRkJRM1pETEdOQlFVa3NVMEZCVXl4RFFVRkRMRkZCUVZZc1EwRkJiVUlzUzBGQmRrSXNSVUZCT0VJN1FVRkROVUlzV1VGQlFTeFRRVUZUTEVOQlFVTXNUMEZCVml4RFFVRnJRaXhqUVVGc1FpeEZRVUZyUXl4VFFVRnNReXhEUVVFMFF5eE5RVUUxUXl4RFFVRnRSQ3hUUVVGdVJEdEJRVU5CTEZsQlFVRXNVMEZCVXl4RFFVRkRMRTlCUVZZc1EwRkJhMElzWTBGQmJFSXNSVUZCYTBNc1UwRkJiRU1zUTBGQk5FTXNSMEZCTlVNc1EwRkJaMFFzVDBGQmFFUTdRVUZEUkN4WFFVaEVMRTFCUjA4c1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZXTEVOQlFXMUNMRXRCUVhCQ0xFbEJRVFpDTEZOQlFWTXNRMEZCUXl4TFFVRldMRU5CUVdkQ0xFMUJRV2hDTEVkQlFYbENMRU5CUVRGRUxFVkJRVFpFTzBGQlEyeEZMRmxCUVVFc1UwRkJVeXhEUVVGRExFOUJRVllzUTBGQmEwSXNZMEZCYkVJc1JVRkJhME1zVTBGQmJFTXNRMEZCTkVNc1IwRkJOVU1zUTBGQlowUXNVMEZCYUVRN1FVRkRRU3haUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZXTEVOQlFXdENMR05CUVd4Q0xFVkJRV3RETEZOQlFXeERMRU5CUVRSRExFMUJRVFZETEVOQlFXMUVMRTlCUVc1RU8wRkJRMFFzVjBGSVRTeE5RVWRCTzBGQlEwd3NXVUZCUVN4VFFVRlRMRU5CUVVNc1QwRkJWaXhEUVVGclFpeGpRVUZzUWl4RlFVRnJReXhUUVVGc1F5eERRVUUwUXl4TlFVRTFReXhEUVVGdFJDeFRRVUZ1UkR0QlFVTkJMRmxCUVVFc1UwRkJVeXhEUVVGRExFOUJRVllzUTBGQmEwSXNZMEZCYkVJc1JVRkJhME1zVTBGQmJFTXNRMEZCTkVNc1RVRkJOVU1zUTBGQmJVUXNUMEZCYmtRN1FVRkRRU3haUVVGQkxGTkJRVk1zUTBGQlF5eFBRVUZXTEVOQlFXdENMR05CUVd4Q0xFVkJRV3RETEZOQlFXeERMRU5CUVRSRExFMUJRVFZETEVOQlFXMUVMRkZCUVc1RU8wRkJRMFE3UVVGRFJpeFRRVnBFTzBGQlkwRXNVVUZCUVN4VFFVRlRMRU5CUVVNc1owSkJRVllzUTBGQk1rSXNUMEZCTTBJc1JVRkJiME1zV1VGQlRUdEJRVU40UXl4VlFVRkJMRk5CUVZNc1EwRkJReXhQUVVGV0xFTkJRV3RDTEdOQlFXeENMRVZCUVd0RExGTkJRV3hETEVOQlFUUkRMRTFCUVRWRExFTkJRVzFFTEZOQlFXNUVPMEZCUTBRc1UwRkdSRHRCUVVsQkxGRkJRVUVzWjBKQlFXZENMRU5CUVVNc1EwRkJSQ3hEUVVGb1FpeEhRVUZ6UWl4SlFVRjBRanRCUVVORU8wRkJRMFlzUzBGNlEwUTdRVUV3UTBRc1IwRXZRMFE3UVVGcFJFRXNUVUZCVFN4bFFVRmxMRWRCUVVjc1VVRkJVU3hEUVVGRExHZENRVUZVTEVOQlFUQkNMSE5DUVVFeFFpeERRVUY0UWp0QlFVVkJMRVZCUVVFc1pVRkJaU3hEUVVGRExFOUJRV2hDTEVOQlFYZENMRlZCUVVNc1kwRkJSQ3hGUVVGdlFqdEJRVU14UXl4UlFVRk5MR0ZCUVdFc1IwRkJSeXhqUVVGakxFTkJRVU1zVDBGQlppeERRVUYxUWl4alFVRjJRaXhGUVVGMVF5eGhRVUYyUXl4RFFVRnhSQ3gxUWtGQmNrUXNRMEZCZEVJN08wRkJSVUVzVVVGQlNTeGhRVUZLTEVWQlFXMUNPMEZCUTJwQ0xFMUJRVUVzWTBGQll5eERRVUZETEdkQ1FVRm1MRU5CUVdkRExFOUJRV2hETEVWQlFYbERMRmxCUVUwN1FVRkROME1zV1VGQlNTeGpRVUZqTEVOQlFVTXNVMEZCWml4RFFVRjVRaXhSUVVGNlFpeERRVUZyUXl4UlFVRnNReXhEUVVGS0xFVkJRV2xFTzBGQlF5OURMRlZCUVVFc1kwRkJZeXhEUVVGRExGTkJRV1lzUTBGQmVVSXNUVUZCZWtJc1EwRkJaME1zVVVGQmFFTTdRVUZGUVN4VlFVRkJMR0ZCUVdFc1EwRkJReXhKUVVGa0xFZEJRWEZDTEZWQlFYSkNPMEZCUTBRc1UwRktSQ3hOUVVsUE8wRkJRMHdzVlVGQlFTeGpRVUZqTEVOQlFVTXNVMEZCWml4RFFVRjVRaXhIUVVGNlFpeERRVUUyUWl4UlFVRTNRanRCUVVWQkxGVkJRVUVzWVVGQllTeERRVUZETEVsQlFXUXNSMEZCY1VJc1RVRkJja0k3UVVGRFJEdEJRVU5HTEU5QlZrUTdRVUZYUkR0QlFVTkdMRWRCYUVKRU8wRkJhMEpCTEUxQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4elFrRkJNVUlzUTBGQmNFSTdRVUZGUVN4TlFVRk5MREJDUVVFd1FpeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJWQ3hEUVVFd1Fpd3dRa0ZCTVVJc1EwRkJia003TzBGQlJVRXNUVUZCVFN4MVFrRkJkVUlzUjBGQlJ5eFRRVUV4UWl4MVFrRkJNRUlzUTBGQlF5eExRVUZFTEVWQlFWYzdRVUZEZWtNc1VVRkJTU3hMUVVGTExFdEJRVXNzUTBGQlpDeEZRVUZwUWp0QlFVTm1MRTFCUVVFc01FSkJRVEJDTEVOQlFVTXNUMEZCTTBJc1EwRkJiVU1zVlVGQlF5eDVRa0ZCUkN4RlFVRXJRanRCUVVOb1JTeFpRVUZOTEZWQlFWVXNSMEZCUnl4NVFrRkJlVUlzUTBGQlF5eGhRVUV4UWl4RFFVRjNReXhQUVVGNFF5eERRVUZ1UWp0QlFVTkJMRkZCUVVFc1ZVRkJWU3hEUVVGRExFdEJRVmdzUjBGQmJVSXNSVUZCYmtJN1FVRkRRU3hSUVVGQkxGVkJRVlVzUTBGQlF5eFJRVUZZTEVkQlFYTkNMRWxCUVhSQ08wRkJSVUVzVVVGQlFTeDVRa0ZCZVVJc1EwRkJReXhUUVVFeFFpeERRVUZ2UXl4SFFVRndReXhEUVVGM1F5eE5RVUY0UXp0QlFVTkVMRTlCVGtRN1FVRlBSQ3hMUVZKRUxFMUJVVTg3UVVGRFRDeE5RVUZCTERCQ1FVRXdRaXhEUVVGRExFOUJRVE5DTEVOQlFXMURMRlZCUVVNc2VVSkJRVVFzUlVGQkswSTdRVUZEYUVVc1dVRkJUU3hWUVVGVkxFZEJRVWNzZVVKQlFYbENMRU5CUVVNc1lVRkJNVUlzUTBGQmQwTXNUMEZCZUVNc1EwRkJia0k3UVVGRFFTeFJRVUZCTEZWQlFWVXNRMEZCUXl4TFFVRllMRWRCUVcxQ0xFVkJRVzVDTzBGQlEwRXNVVUZCUVN4VlFVRlZMRU5CUVVNc1VVRkJXQ3hIUVVGelFpeExRVUYwUWp0QlFVVkJMRkZCUVVFc2VVSkJRWGxDTEVOQlFVTXNVMEZCTVVJc1EwRkJiME1zVFVGQmNFTXNRMEZCTWtNc1RVRkJNME03UVVGRFJDeFBRVTVFTzBGQlQwUTdRVUZEUml4SFFXeENSRHM3UVVGdlFrRXNSVUZCUVN4WFFVRlhMRU5CUVVNc1QwRkJXaXhEUVVGdlFpeFZRVUZETEZWQlFVUXNSVUZCWjBJN1FVRkRiRU1zVVVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhWUVVGVkxFTkJRVU1zWVVGQldDeERRVUY1UWl4dlFrRkJla0lzUTBGQk5VSTdRVUZEUVN4UlFVRk5MR2xDUVVGcFFpeEhRVUZITEZWQlFWVXNRMEZCUXl4aFFVRllMRU5CUVhsQ0xITkNRVUY2UWl4RFFVRXhRanM3UVVGRlFTeFJRVUZOTEdOQlFXTXNSMEZCUnl4VFFVRnFRaXhqUVVGcFFpeERRVUZETEVsQlFVUXNSVUZCVHl4TFFVRlFMRVZCUVdsQ08wRkJRM1JETEZWQlFVa3NiVUpCUVcxQ0xFbEJRVWtzYVVKQlFUTkNMRVZCUVRoRE8wRkJRelZETEZGQlFVRXNiVUpCUVcxQ0xFTkJRVU1zVDBGQmNFSXNRMEZCTkVJc1kwRkJOVUlzUlVGQk5FTXNVMEZCTlVNc1EwRkJjMFFzUjBGQmRFUXNRMEZCTUVRc1QwRkJNVVE3UVVGRFFTeFJRVUZCTEcxQ1FVRnRRaXhEUVVGRExFdEJRWEJDTEVkQlFUUkNMRWxCUVRWQ08wRkJRMEVzVVVGQlFTeHBRa0ZCYVVJc1EwRkJReXhMUVVGc1FpeEhRVUV3UWl4TFFVRXhRanRCUVVORU8wRkJRMFlzUzBGT1JEczdRVUZSUVN4UlFVRk5MR0ZCUVdFc1IwRkJSeXhUUVVGb1FpeGhRVUZuUWl4RFFVRkRMRTlCUVVRc1JVRkJWU3hSUVVGV0xFVkJRWFZDTzBGQlF6TkRMRFpDUVVGVExGRkJRVlFzUlVGQmJVSXNVVUZCYmtJN1FVRkZRU3hOUVVGQkxFOUJRVThzUTBGQlF5eFRRVUZTTEVOQlFXdENMRWRCUVd4Q0xFTkJRWE5DTEZGQlFYUkNPMEZCUlVFc1RVRkJRU3hqUVVGakxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWUXNSVUZCYzBJc1QwRkJUeXhEUVVGRExFOUJRVklzUTBGQlowSXNTMEZCZEVNc1EwRkJaRHRCUVVWQkxFMUJRVUVzYlVKQlFXMUNMRU5CUVVNc1QwRkJjRUlzUTBGQk5FSXNZMEZCTlVJc1JVRkJORU1zVTBGQk5VTXNRMEZCYzBRc1IwRkJkRVFzUTBGQk1FUXNWVUZCTVVRN1FVRkZRU3hOUVVGQkxIVkNRVUYxUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRnVRaXhGUVVFd1FpeEZRVUV4UWl4RFFVRlVMRU5CUVhaQ08wRkJRMFFzUzBGV1JEczdRVUZaUVN4UlFVRk5MR05CUVdNc1IwRkJSeXhWUVVGVkxFTkJRVU1zWVVGQldDeERRVUY1UWl4bFFVRjZRaXhEUVVGMlFqdEJRVU5CTEZGQlFVMHNiVUpCUVcxQ0xFZEJRVWNzWTBGQlNDeGhRVUZITEdOQlFVZ3NkVUpCUVVjc1kwRkJZeXhEUVVGRkxHZENRVUZvUWl4RFFVRnBReXhKUVVGcVF5eERRVUUxUWpzN1FVRkZRU3hSUVVGSkxHbENRVUZwUWl4RFFVRkRMRXRCUVhSQ0xFVkJRVFpDTzBGQlF6TkNMRlZCUVUwc2EwSkJRV3RDTEVkQlFVY3NSMEZEZUVJc1RVRkVkMElzUTBGRmVFSXNTVUZHZDBJc1EwRkZia0lzYlVKQlJtMUNMRVZCUlVVc1ZVRkJReXhGUVVGRU8wRkJRVUVzWlVGQlVTeEZRVUZGTEVOQlFVTXNUMEZCU0N4RFFVRlhMRXRCUVZnc1MwRkJjVUlzYVVKQlFXbENMRU5CUVVNc1MwRkJMME03UVVGQlFTeFBRVVpHTEVWQlJYZEVMRU5CUm5oRUxFTkJRVE5DTzBGQlNVRXNUVUZCUVN4aFFVRmhMRU5CUVVNc2EwSkJRVVFzUlVGQmNVSXNiVUpCUVhKQ0xFTkJRV0k3UVVGRFJEczdRVUZGUkN4SlFVRkJMRzFDUVVGdFFpeERRVUZETEU5QlFYQkNMRU5CUVRSQ0xGVkJRVU1zYTBKQlFVUXNSVUZCZDBJN1FVRkRiRVFzVFVGQlFTeHJRa0ZCYTBJc1EwRkJReXhuUWtGQmJrSXNRMEZCYjBNc1QwRkJjRU1zUlVGQk5rTXNXVUZCVFR0QlFVTnFSQ3hSUVVGQkxHRkJRV0VzUTBGQlF5eHJRa0ZCUkN4RlFVRnhRaXh0UWtGQmNrSXNRMEZCWWp0QlFVTkVMRTlCUmtRN1FVRkhSQ3hMUVVwRU8wRkJUVUVzU1VGQlFTeFZRVUZWTEVOQlFVTXNaMEpCUVZnc1EwRkJORUlzVDBGQk5VSXNSVUZCY1VNc1dVRkJUVHRCUVVONlF5eE5RVUZCTEZWQlFWVXNRMEZCUXl4VFFVRllMRU5CUVhGQ0xFMUJRWEpDTEVOQlFUUkNMRkZCUVRWQ08wRkJSVUVzVFVGQlFTeGpRVUZqTEZOQlFXUXNTVUZCUVN4alFVRmpMRmRCUVdRc1dVRkJRU3hqUVVGakxFTkJRVVVzVTBGQmFFSXNRMEZCTUVJc1RVRkJNVUlzUTBGQmFVTXNVVUZCYWtNN1FVRkRSQ3hMUVVwRU8wRkJTMFFzUjBFNVEwUTdRVUVyUTBRc1F6czdPenM3T3pzN096czdPMEZEYkVwRU96dEJRVVZCTEVsQlFVa3NWVUZCU2pzN08wRkJSVUVzU1VGQlRTeGpRVUZqTEVkQlFVY3NVMEZCYWtJc1kwRkJhVUlzUjBGQlRUdEJRVU16UWl4MVFrRkJRU3hWUVVGVkxFZEJRVWNzU1VGQlNTeHpRa0ZCU2l4RlFVRmlMRU5CUkRKQ0xFTkJSVE5DT3p0QlFVTkJMRVZCUVVFc1RVRkJUU3hEUVVGRExGVkJRVkFzUjBGQmIwSXNWVUZCY0VJN1FVRkRSQ3hEUVVwRU96czdPenM3TzBGRFNrRTdPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN096czdRVUZRUVR0QlFVVkJPMEZCVDBFc1VVRkJVU3hEUVVGRExHZENRVUZVTEVOQlFUQkNMR3RDUVVFeFFpeEZRVUU0UXl4WlFVRk5PMEZCUTJ4RU8wRkJRMEU3UVVGRFFUdEJRVU5CTEhWQ1FVcHJSQ3hEUVV0c1JEczdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMFFzUTBGWVJEczdPenM3T3pzN096dGxRMWhsTEc5Q1FVRk5PMEZCUTI1Q0xFMUJRVTBzVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXl4blFrRkJWQ3hEUVVFd1FpeFJRVUV4UWl4RFFVRm1PenRCUVVWQkxFMUJRVWtzVFVGQlRTeERRVUZETEUxQlFWQXNSMEZCWjBJc1EwRkJjRUlzUlVGQmRVSTdRVUZEY2tJc1NVRkJRU3hOUVVGTkxFTkJRVU1zVDBGQlVDeERRVUZsTEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTNoQ0xGVkJRVTBzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4aFFVRk9MRU5CUVc5Q0xHVkJRWEJDTEVOQlFXNUNPMEZCUTBFc1ZVRkJUU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEdGQlFVNHNRMEZCYjBJc2EwSkJRWEJDTEVOQlFYUkNPMEZCUTBFc1ZVRkJUU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEdGQlFVNHNRMEZCYjBJc2MwSkJRWEJDTEVOQlFYQkNPenRCUVVWQkxGVkJRVTBzV1VGQldTeEhRVUZITEZOQlFXWXNXVUZCWlN4RFFVRkRMRTFCUVVRc1JVRkJXVHRCUVVNdlFpeFpRVUZOTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJVQ3hEUVVGaExFMUJRV0lzU1VGQmRVSXNSVUZCZGtJc1IwRkJORUlzVFVGQk9VTTdRVUZGUVN4bFFVRlBMRk5CUVZNc1EwRkJReXhSUVVGV0xFZEJRMG9zUzBGRVNTeERRVU5GTEVWQlJFWXNSVUZGU2l4UFFVWkpMRWRCUjBvc1IwRklTU3hEUVVkQkxGVkJRVU1zUzBGQlJDeEZRVUZQTEVOQlFWQTdRVUZCUVN4cFFrRkJZU3hMUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVb3NSMEZCVVN4RlFVRlNMRWRCUVdFc1IwRkJha0lzUTBGQmFrSTdRVUZCUVN4VFFVaEJMRVZCU1Vvc1QwRktTU3hIUVV0S0xFbEJURWtzUTBGTFF5eEZRVXhFTEVWQlRVb3NTVUZPU1N4RlFVRlFPMEZCVDBRc1QwRldSRHM3UVVGWlFTeFZRVUZKTEZWQlFWVXNTVUZCU1N4aFFVRmtMRWxCUVN0Q0xGZEJRVzVETEVWQlFXZEVPMEZCUXpsRExGbEJRVTBzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJXaXhGUVVGcFFpeEZRVUZxUWl4RFFVRnVRanRCUVVOQkxGbEJRVTBzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1IwRkJXaXhGUVVGcFFpeEZRVUZxUWl4RFFVRnVRanRCUVVOQkxGbEJRVTBzUTBGQlF5eEhRVUZITEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVZvc1EwRkJWanRCUVVOQkxGbEJRVTBzUTBGQlF5eEhRVUZKTEVOQlFVTXNSVUZCUkN4SFFVRk5MRWRCUVZBc1NVRkJaU3hGUVVGRkxFZEJRVWNzUlVGQmNFSXNRMEZCVmpzN1FVRkZRU3haUVVGTkxGbEJRVmtzUjBGQlJ5eFRRVUZtTEZsQlFXVXNRMEZCUXl4TFFVRkVMRVZCUVRKQ08wRkJRVUVzWTBGQmJrSXNTVUZCYlVJc2RVVkJRVm9zVDBGQldUdEJRVU01UXl4alFVRkpMRlZCUVZVc1IwRkJSeXhMUVVGcVFqczdRVUZEUVN4alFVRkpMRWxCUVVrc1MwRkJTeXhQUVVGaUxFVkJRWE5DTzBGQlEzQkNMRmxCUVVFc1YwRkJWeXhEUVVGRExFdEJRVm9zUjBGQmIwSXNWVUZCY0VJN1FVRkZRU3haUVVGQkxGZEJRVmNzUTBGQlF5eFBRVUZhTEVOQlFXOUNMR2RDUVVGd1FpeEZRVUZ6UXl4VFFVRjBReXhEUVVGblJDeE5RVUZvUkN4RFFVRjFSQ3hQUVVGMlJEdEJRVVZCTEZsQlFVRXNWMEZCVnl4RFFVRkRMRXRCUVZvc1IwRkJiMElzV1VGQldTeERRVUZETEZWQlFVUXNRMEZCYUVNN1FVRkRSQ3hYUVU1RUxFMUJUVTg3UVVGRFRDeFpRVUZCTEZWQlFWVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVmdzUTBGQmJVSXNTMEZCYmtJc1JVRkJNRUlzUlVGQk1VSXNRMEZCUkN4RlFVRm5ReXhGUVVGb1F5eERRVUZ5UWpzN1FVRkZRU3huUWtGQlNTeEZRVUZGTEVsQlFVa3NWVUZCVGl4SlFVRnZRaXhGUVVGRkxFbEJRVWtzVlVGQk9VSXNSVUZCTUVNN1FVRkRlRU1zWTBGQlFTeFZRVUZWTEVOQlFVTXNTMEZCV0N4SFFVRnRRaXhWUVVGdVFqdEJRVVZCTEdOQlFVRXNWMEZCVnl4RFFVRkRMRTlCUVZvc1EwRkJiMElzWjBKQlFYQkNMRVZCUVhORExGTkJRWFJETEVOQlFXZEVMRTFCUVdoRUxFTkJRWFZFTEU5QlFYWkVPMEZCUlVFc1kwRkJRU3hYUVVGWExFTkJRVU1zUzBGQldpeEhRVUZ2UWl4WlFVRlpMRU5CUVVNc1ZVRkJSQ3hEUVVGb1F6dEJRVU5FTEdGQlRrUXNUVUZOVHp0QlFVTk1MR05CUVVFc1YwRkJWeXhEUVVGRExFOUJRVm9zUTBGQmIwSXNaMEpCUVhCQ0xFVkJRWE5ETEZOQlFYUkRMRU5CUVdkRUxFZEJRV2hFTEVOQlFXOUVMRTlCUVhCRU8wRkJSVUVzWTBGQlFTeFhRVUZYTEVOQlFVTXNTMEZCV2l4SFFVRnZRaXhaUVVGWkxFTkJRVU1zVlVGQlJDeERRVUZvUXp0QlFVVkJPMEZCUTBRN1FVRkRSanM3UVVGRlJDeGpRVUZKTEZWQlFWVXNSMEZCUnl4RlFVRnFRaXhGUVVGeFFqdEJRVU51UWl4WlFVRkJMR0ZCUVdFc1EwRkJReXhMUVVGa0xFTkJRVzlDTEV0QlFYQkNMR0ZCUVdkRExGVkJRVlVzUjBGQlJ5eERRVUZrTEVkQlFXMUNMRU5CUVd4RU8wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NXVUZCUVN4aFFVRmhMRU5CUVVNc1MwRkJaQ3hEUVVGdlFpeExRVUZ3UWl4SFFVRTBRaXhKUVVFMVFqdEJRVU5FTzBGQlEwWXNVMEV2UWtRN08wRkJhVU5CTEZGQlFVRXNXVUZCV1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGYUxFVkJRVzFDTEU5QlFXNUNMRU5CUVZvN1FVRkZRU3hSUVVGQkxGVkJRVlVzUTBGQlF5eG5Ra0ZCV0N4RFFVRTBRaXhQUVVFMVFpeEZRVUZ4UXl4WlFVRk5PMEZCUTNwRExGVkJRVUVzV1VGQldTeERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRmFMRVZCUVcxQ0xFOUJRVzVDTEVOQlFWbzdRVUZEUkN4VFFVWkVPMEZCU1VFc1VVRkJRU3hYUVVGWExFTkJRVU1zWjBKQlFWb3NRMEZCTmtJc1QwRkJOMElzUlVGQmMwTXNXVUZCVFR0QlFVTXhReXhWUVVGQkxGbEJRVmtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCWWl4RlFVRnZRaXhOUVVGd1FpeERRVUZhTzBGQlEwUXNVMEZHUkR0QlFVbEJMRkZCUVVFc1VVRkJVU3hEUVVGRExHZENRVUZVTEVOQlFUQkNMRlZCUVRGQ0xFVkJRWE5ETEZWQlFVTXNSMEZCUkR0QlFVRkJMR2xDUVVGVkxGVkJRVlVzU1VGQlZpeERRVUZsTEUxQlFVMHNRMEZCUXl4WlFVRlFMRU5CUVc5Q0xFZEJRVWNzUTBGQlF5eEhRVUY0UWl4RFFVRm1MRU5CUVZZN1FVRkJRU3hUUVVGMFF6dEJRVU5FTzBGQlEwWXNTMEZ3UlVRN1FVRnhSVVE3UVVGRFJpeERPenM3T3pzN096czdPenM3UVVNeFJVUTdPMEZCUlVFc1NVRkJUU3haUVVGWkxFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWQXNRMEZCYTBJc2IwSkJRV3hDTEVOQlFYSkNPMEZCUTBFc1NVRkJUU3hWUVVGVkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFWUXNRMEZCZFVJc2IwSkJRWFpDTEVOQlFXNUNPMEZCUTBFc1NVRkJUU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFWUXNRMEZCZFVJc2FVSkJRWFpDTEVOQlFXcENPMEZCUTBFc1NVRkJUU3hIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEdGQlFWUXNRMEZCZFVJc2FVSkJRWFpDTEVOQlFWbzdRVUZEUVN4SlFVRk5MRlZCUVZVc1IwRkJSeXhKUVVGSkxITkNRVUZLTEVWQlFXNUNPenRCUVVWQkxFbEJRVTBzVVVGQlVTeEhRVUZITEZOQlFWZ3NVVUZCVnl4SFFVRk5PMEZCUTNKQ0xFVkJRVUVzVlVGQlZTeERRVUZETEdkQ1FVRllPMEZCUTBFc1JVRkJRU3hSUVVGUkxFTkJRVU1zVTBGQlZDeERRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeFhRVUYyUWp0QlFVTkJMRVZCUVVFc1VVRkJVU3hEUVVGRExGZEJRVlFzUjBGQmRVSXNUVUZCZGtJN1FVRkRRU3hGUVVGQkxFZEJRVWNzUTBGQlF5eFRRVUZLTEVOQlFXTXNSMEZCWkN4RFFVRnJRaXhYUVVGc1FqdEJRVU5CTEVWQlFVRXNWVUZCVlN4RFFVRkRMRk5CUVZnc1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc1UwRkJla0lzUlVGTWNVSXNRMEZOY2tJN1FVRkRRVHRCUVVOQk8wRkJRMFFzUTBGVVJEczdRVUZYUVN4SlFVRk5MRk5CUVZNc1IwRkJSeXhUUVVGYUxGTkJRVmtzUjBGQlRUdEJRVU4wUWl4RlFVRkJMRlZCUVZVc1EwRkJReXhsUVVGWU8wRkJRMEVzUlVGQlFTeFJRVUZSTEVOQlFVTXNVMEZCVkN4RFFVRnRRaXhOUVVGdVFpeERRVUV3UWl4WFFVRXhRanRCUVVOQkxFVkJRVUVzVVVGQlVTeERRVUZETEZkQlFWUXNSMEZCZFVJc1QwRkJka0k3UVVGRFFTeEZRVUZCTEVkQlFVY3NRMEZCUXl4VFFVRktMRU5CUVdNc1RVRkJaQ3hEUVVGeFFpeFhRVUZ5UWp0QlFVTkJMRVZCUVVFc1ZVRkJWU3hEUVVGRExGTkJRVmdzUTBGQmNVSXNUVUZCY2tJc1EwRkJORUlzVTBGQk5VSXNSVUZNYzBJc1EwRk5kRUk3UVVGRFFUdEJRVU5CTzBGQlEwUXNRMEZVUkRzN1FVRlhRU3hKUVVGTkxHbENRVUZwUWl4SFFVRkhMRk5CUVhCQ0xHbENRVUZ2UWl4SFFVRk5PMEZCUXpsQ0xFMUJRVWtzV1VGQldTeERRVUZETEU5QlFXcENMRVZCUVRCQ08wRkJRM2hDTEZGQlFVa3NSMEZCUnl4RFFVRkRMRk5CUVVvc1EwRkJZeXhSUVVGa0xFTkJRWFZDTEZkQlFYWkNMRU5CUVVvc1JVRkJlVU03UVVGRGRrTXNUVUZCUVN4VFFVRlRPMEZCUTFZN1FVRkRSanM3UVVGRFJDeEZRVUZCTEZsQlFWa3NRMEZCUXl4WFFVRmlMRU5CUVhsQ0xHbENRVUY2UWp0QlFVTkVMRU5CVUVRN08wRkJVMEVzU1VGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhUUVVGdVFpeG5Ra0ZCYlVJc1IwRkJUVHRCUVVNM1FpeE5RVUZKTEZGQlFVb3NSVUZCWXp0QlFVTmFMRWxCUVVFc1VVRkJVU3hEUVVGRExHZENRVUZVTEVOQlFUQkNMRTlCUVRGQ0xFVkJRVzFETEZsQlFVMDdRVUZEZGtNc1ZVRkJTU3hSUVVGUkxFTkJRVU1zVjBGQlZDeExRVUY1UWl4TlFVRTNRaXhGUVVGeFF6dEJRVU51UXl4UlFVRkJMRk5CUVZNN1FVRkRWaXhQUVVaRUxFMUJSVTg3UVVGRFRDeFJRVUZCTEZGQlFWRTdRVUZEVkR0QlFVTkdMRXRCVGtRN1FVRlBRU3hKUVVGQkxHbENRVUZwUWp0QlFVTnNRanRCUVVOR0xFTkJXRVE3T3pzN096czdPenM3T3p0bFEzWkRaU3hyUWtGQlF5eFJRVUZFTEVWQlFWY3NWMEZCV0N4RlFVRjNRaXhyUWtGQmVFSXNSVUZCSzBNN1FVRkROVVFzUlVGQlFTeFJRVUZSTEVOQlFVTXNUMEZCVkN4RFFVRnBRaXhWUVVGRExFOUJRVVFzUlVGQllUdEJRVU0xUWl4UlFVRkpMRTlCUVU4c1EwRkJReXhUUVVGU0xFTkJRV3RDTEZGQlFXeENMRU5CUVRKQ0xGZEJRVE5DTEVOQlFVb3NSVUZCTmtNN1FVRkRNME1zVFVGQlFTeFBRVUZQTEVOQlFVTXNVMEZCVWl4RFFVRnJRaXhOUVVGc1FpeERRVUY1UWl4WFFVRjZRanM3UVVGRlFTeFZRVUZKTEd0Q1FVRktMRVZCUVhkQ08wRkJRM1JDTEZGQlFVRXNUMEZCVHl4RFFVRkRMRlZCUVZJc1EwRkJiVUlzVTBGQmJrSXNRMEZCTmtJc1RVRkJOMElzUTBGQmIwTXNWMEZCY0VNN1FVRkRSRHRCUVVOR08wRkJRMFlzUjBGU1JEdEJRVk5FTEVNN096czdPenM3T3pzN096dEJRMVpFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdGxRVVZsTEc5Q1FVRk5PMEZCUTI1Q0xFMUJRVWtzWVVGQlNqczdRVUZEUVN4TlFVRk5MSE5DUVVGelFpeEhRVUZITEZOQlFYcENMSE5DUVVGNVFpeERRVUZETEVOQlFVUXNSVUZCVHp0QlFVTndReXhSUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCUml4RFFVRlRMR3RDUVVFeFFqczdRVUZEUVN4UlFVRkpMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlZDeERRVUZwUWl4MVFrRkJha0lzUTBGQmFFSXNSVUZCTWtRN1FVRkRla1FzVFVGQlFTeFJRVUZSTEVOQlFVTXNjMEpCUVZRc1EwRkJaME1zVTBGQmFFTXNRMEZCTUVNc1RVRkJNVU1zUTBGQmFVUXNVVUZCYWtRN1FVRkRRU3hOUVVGQkxGRkJRVkVzUTBGQlF5eFRRVUZVTEVOQlFXMUNMRTFCUVc1Q0xFTkJRVEJDTEZGQlFURkNPMEZCUTBFN1FVRkRSRHM3UVVGRFJDeFJRVUZKTEdGQlFVb3NSVUZCYlVJN1FVRkRha0lzVlVGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRkdMRU5CUVZNc1QwRkJWQ3hEUVVGcFFpeG5Ra0ZCYWtJc1EwRkJUQ3hGUVVGNVF6dEJRVU4yUXl4UlFVRkJMR0ZCUVdFc1EwRkJReXh6UWtGQlpDeERRVUZ4UXl4VFFVRnlReXhEUVVFclF5eE5RVUV2UXl4RFFVRnpSQ3hSUVVGMFJEdEJRVU5CTEZGQlFVRXNZVUZCWVN4RFFVRkRMRk5CUVdRc1EwRkJkMElzVFVGQmVFSXNRMEZCSzBJc1VVRkJMMEk3UVVGRFJEdEJRVU5HT3p0QlFVTkVMRkZCUVVrc1VVRkJVU3hKUVVGSkxGRkJRVkVzUTBGQlF5eFBRVUZVTEVOQlFXbENMR2RDUVVGcVFpeERRVUZvUWl4RlFVRnZSRHRCUVVOc1JDeE5RVUZCTEZGQlFWRXNRMEZCUXl4elFrRkJWQ3hEUVVGblF5eFRRVUZvUXl4RFFVRXdReXhIUVVFeFF5eERRVUU0UXl4UlFVRTVRenRCUVVOQkxFMUJRVUVzVVVGQlVTeERRVUZETEZOQlFWUXNRMEZCYlVJc1IwRkJia0lzUTBGQmRVSXNVVUZCZGtJN1FVRkRRU3hOUVVGQkxHRkJRV0VzUjBGQlJ5eFJRVUZvUWp0QlFVTkVPMEZCUTBZc1IwRnNRa1E3TzBGQmJVSkJMRVZCUVVFc1VVRkJVU3hEUVVGRExFbEJRVlFzUTBGQll5eG5Ra0ZCWkN4RFFVRXJRaXhQUVVFdlFpeEZRVUYzUXl4elFrRkJlRU03UVVGRFJDeERPenM3T3pzN096czdPenM3T3pzN096czdTVU5zUkZrc1ZUdEJRVU5ZTEhkQ1FVRmpPMEZCUVVFN08wRkJRMW9zVTBGQlN5eFhRVUZNTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEVzVTBGQlN5eFpRVUZNTEVkQlFXOUNMRTFCUVUwc1EwRkJReXhWUVVFelFqdEJRVU5CTEZOQlFVc3NjVUpCUVV3c1IwRkJOa0lzUzBGQlN5eHhRa0ZCVEN4RFFVRXlRaXhKUVVFelFpeERRVUZuUXl4SlFVRm9ReXhEUVVFM1FqdEJRVU5CTEZOQlFVc3NiMEpCUVV3c1IwRkJORUlzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhKUVVFeFFpeERRVUVyUWl4SlFVRXZRaXhEUVVFMVFqczdRVUZEUVN4VFFVRkxMRXRCUVV3N1FVRkRSRHM3T3p0WFFVVkVMR2xDUVVGUk8wRkJRMDRzVjBGQlN5eFZRVUZNTzBGQlEwRXNUVUZCUVN4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNUMEZCTVVJc1JVRkJiVU1zUzBGQlN5eHhRa0ZCZUVNN1FVRkRRU3hOUVVGQkxFMUJRVTBzUTBGQlF5eG5Ra0ZCVUN4RFFVRjNRaXhSUVVGNFFpeEZRVUZyUXl4TFFVRkxMRzlDUVVGMlF6dEJRVU5FT3pzN1YwRkZSQ3dyUWtGQmMwSXNSMEZCZEVJc1JVRkJNa0k3UVVGRGVrSXNWVUZCVFN4TlFVRk5MRWRCUVVjc1IwRkJSeXhEUVVGRExFMUJRVzVDT3p0QlFVTkJMRlZCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlVDeERRVUZsTERKQ1FVRm1MRU5CUVV3c1JVRkJhMFE3UVVGRGFFUTdRVUZEUkRzN1FVRkZSQ3hOUVVGQkxFZEJRVWNzUTBGQlF5eGpRVUZLTzBGQlEwRXNWVUZCVFN4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFOUJRVkFzUTBGQlpTdzBRa0ZCWml4RFFVRm9RanM3UVVGRFFTeFZRVUZKTEU5QlFVOHNRMEZCUXl4VFFVRlNMRU5CUVd0Q0xGRkJRV3hDTEVOQlFUSkNMRmRCUVROQ0xFTkJRVW9zUlVGQk5rTTdRVUZETTBNc1lVRkJTeXhqUVVGTUxFTkJRVzlDTEU5QlFYQkNPMEZCUTBFN1FVRkRSRHM3UVVGRFJDeFhRVUZMTEdGQlFVd3NRMEZCYlVJc1QwRkJia0k3UVVGRFJEczdPMWRCUlVRc1owTkJRWFZDTzBGQlEzSkNMRlZCUVVrc1MwRkJTeXhaUVVGTUxFdEJRWE5DTEUxQlFVMHNRMEZCUXl4VlFVRnFReXhGUVVFMlF6dEJRVU16UXp0QlFVTkVPenRCUVVORUxGZEJRVXNzV1VGQlRDeEhRVUZ2UWl4TlFVRk5MRU5CUVVNc1ZVRkJNMEk3UVVGRFFTeFhRVUZMTEhOQ1FVRk1PMEZCUTBRN096dFhRVVZFTERKQ1FVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVRkJPenRCUVVONFFpeFZRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRVkFzUTBGQmQwSXNORUpCUVhoQ0xFTkJRV3BDTzBGQlEwRXNUVUZCUVN4UlFVRlJMRU5CUVVNc1QwRkJWQ3hEUVVGcFFpeFZRVUZETEU5QlFVUXNSVUZCWVR0QlFVTTFRaXhaUVVGTkxHRkJRV0VzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUMEZCVWl4RFFVRm5RaXd5UWtGQmFFSXNRMEZCZEVJN08wRkJRMEVzV1VGQlNTeGhRVUZoTEV0QlFVc3NUVUZCZEVJc1JVRkJPRUk3UVVGRE5VSXNWVUZCUVN4TFFVRkpMRU5CUVVNc1kwRkJUQ3hEUVVGdlFpeFBRVUZ3UWp0QlFVTkVPMEZCUTBZc1QwRk1SRHRCUVUxRU96czdWMEZGUkN4clEwRkJkVU03UVVGQlFTeFZRVUZvUWl4UFFVRm5RaXgxUlVGQlRpeEpRVUZOT3p0QlFVTnlReXhWUVVGSkxFOUJRVW9zUlVGQllUdEJRVU5ZTEZsQlFVMHNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhoUVVGU0xFTkJRWE5DTERSQ1FVRjBRaXhEUVVGb1FqdEJRVU5CTEZGQlFVRXNUMEZCVHl4RFFVRkRMRXRCUVZJc1EwRkJZeXhWUVVGa0xFZEJRVEpDTEUxQlFUTkNPMEZCUTBFc1VVRkJRU3hQUVVGUExFTkJRVU1zUzBGQlVpeERRVUZqTEZOQlFXUXNZVUZCTmtJc1QwRkJUeXhEUVVGRExGbEJRWEpETzBGQlEwRXNVVUZCUVN4VlFVRlZMRU5CUVVNc1dVRkJUVHRCUVVObUxGVkJRVUVzVDBGQlR5eERRVUZETEV0QlFWSXNRMEZCWXl4VlFVRmtMRWRCUVRKQ0xFbEJRVE5DTzBGQlEwUXNVMEZHVXl4RFFVRldPMEZCUjBFN1FVRkRSRHM3UVVGRFJDeFZRVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNjME5CUVRGQ0xFTkJRWEpDTzBGQlEwRXNUVUZCUVN4WlFVRlpMRU5CUVVNc1QwRkJZaXhEUVVGeFFpeFZRVUZETEZkQlFVUXNSVUZCYVVJN1FVRkRjRU1zV1VGQlRTeFBRVUZQTEVkQlFVY3NWMEZCVnl4RFFVRkRMR0ZCUVZvc1EwRkJNRUlzTkVKQlFURkNMRU5CUVdoQ08wRkJRMEVzVVVGQlFTeFBRVUZQTEVOQlFVTXNTMEZCVWl4RFFVRmpMRlZCUVdRc1IwRkJNa0lzVFVGQk0wSTdRVUZEUVN4UlFVRkJMRTlCUVU4c1EwRkJReXhMUVVGU0xFTkJRV01zVTBGQlpDeGhRVUUyUWl4UFFVRlBMRU5CUVVNc1dVRkJja003UVVGRFFTeFJRVUZCTEZWQlFWVXNRMEZCUXl4WlFVRk5PMEZCUTJZc1ZVRkJRU3hQUVVGUExFTkJRVU1zUzBGQlVpeERRVUZqTEZWQlFXUXNSMEZCTWtJc1NVRkJNMEk3UVVGRFJDeFRRVVpUTEVOQlFWWTdRVUZIUkN4UFFWQkVPMEZCVVVRN096dFhRVVZFTEhOQ1FVRTRRenRCUVVGQk96dEJRVUZCTEZWQlFXNURMRTFCUVcxRExIVkZRVUV4UWl4SlFVRXdRanRCUVVGQkxGVkJRWEJDTEZWQlFXOUNMSFZGUVVGUUxFdEJRVTg3UVVGRE5VTXNWVUZCU1N4WlFVRktPenRCUVVOQkxGVkJRVWtzVFVGQlNpeEZRVUZaTzBGQlExWXNVVUZCUVN4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZRTEVOQlFYZENMSE5EUVVGNFFpeERRVUZtTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1VVRkJRU3haUVVGWkxFZEJRVWNzVVVGQlVTeERRVUZETEdkQ1FVRlVMRU5CUVRCQ0xITkRRVUV4UWl4RFFVRm1PMEZCUTBRN08wRkJRMFFzVFVGQlFTeFpRVUZaTEVOQlFVTXNUMEZCWWl4RFFVRnhRaXhWUVVGRExGZEJRVVFzUlVGQmFVSTdRVUZEY0VNc1dVRkJUU3hYUVVGWExFZEJRVWNzVjBGQlZ5eERRVUZETEdGQlFWb3NRMEZCTUVJc01rSkJRVEZDTEVOQlFYQkNPenRCUVVOQkxGbEJRVWtzVjBGQlNpeEZRVUZwUWp0QlFVTm1PMEZCUTBRN08wRkJRMFFzVVVGQlFTeE5RVUZKTEVOQlFVTXNZVUZCVEN4RFFVRnRRaXhYUVVGdVFpeEZRVUZuUXl4VlFVRm9RenRCUVVORUxFOUJUa1E3UVVGUFJEczdPMWRCUlVRc2RVSkJRV01zVDBGQlpDeEZRVUV3UXp0QlFVRkJMRlZCUVc1Q0xGVkJRVzFDTEhWRlFVRk9MRWxCUVUwN1FVRkRlRU1zVlVGQlRTeGhRVUZoTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVZJc1EwRkJaMElzTWtKQlFXaENMRU5CUVhSQ08wRkJRMEVzVlVGQlRTeGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMR0ZCUVZJc1EwRkJjMElzTkVKQlFYUkNMRU5CUVhaQ08wRkJRMEVzVjBGQlN5eFhRVUZNTEVsQlFXOUNMR05CUVdNc1EwRkJReXhaUVVGdVF6czdRVUZGUVN4VlFVRkpMR0ZCUVdFc1EwRkJReXhaUVVGa0xFTkJRVEpDTEdGQlFUTkNMRU5CUVVvc1JVRkJLME03UVVGRE4wTXNZVUZCU3l4cFFrRkJUQ3hEUVVGMVFpeGhRVUYyUWp0QlFVTkVPenRCUVVWRUxFMUJRVUVzVDBGQlR5eERRVUZETEZOQlFWSXNRMEZCYTBJc1IwRkJiRUlzUTBGQmMwSXNWMEZCZEVJN08wRkJRMEVzVlVGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc1VVRkJRU3hqUVVGakxFTkJRVU1zUzBGQlppeERRVUZ4UWl4VFFVRnlRaXhoUVVGdlF5eExRVUZMTEZkQlFYcERPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzVVVGQlFTeGpRVUZqTEVOQlFVTXNTMEZCWml4RFFVRnhRaXhWUVVGeVFpeEhRVUZyUXl4TlFVRnNRenRCUVVOQkxGRkJRVUVzWTBGQll5eERRVUZETEV0QlFXWXNRMEZCY1VJc1UwRkJja0lzWVVGQmIwTXNTMEZCU3l4WFFVRjZRenRCUVVOQkxGRkJRVUVzVlVGQlZTeERRVUZETEZsQlFVMDdRVUZEWml4VlFVRkJMR05CUVdNc1EwRkJReXhMUVVGbUxFTkJRWEZDTEZWQlFYSkNMRWRCUVd0RExFbEJRV3hETzBGQlEwUXNVMEZHVXl4RFFVRldPMEZCUjBRN08wRkJSVVFzVlVGQlNTeGhRVUZoTEVOQlFVTXNUMEZCWkN4RFFVRnpRaXcwUWtGQmRFSXNRMEZCU2l4RlFVRjVSRHRCUVVOMlJDeGhRVUZMTEdGQlFVd3NRMEZCYlVJc1lVRkJZU3hEUVVGRExFOUJRV1FzUTBGQmMwSXNORUpCUVhSQ0xFTkJRVzVDTEVWQlFYZEZMRlZCUVhoRk8wRkJRMEU3UVVGRFJEczdRVUZGUkN4WFFVRkxMRmRCUVV3c1IwRkJiVUlzUTBGQmJrSTdRVUZEUkRzN08xZEJSVVFzZDBKQlFXVXNUMEZCWml4RlFVRXlRenRCUVVGQkxGVkJRVzVDTEZWQlFXMUNMSFZGUVVGT0xFbEJRVTA3UVVGRGVrTXNWVUZCVFN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExHRkJRVklzUTBGQmMwSXNORUpCUVhSQ0xFTkJRWFpDT3p0QlFVTkJMRlZCUVVrc1EwRkJReXhqUVVGTUxFVkJRWEZDTzBGQlEyNUNPMEZCUTBRN08wRkJRMFFzVFVGQlFTeFBRVUZQTEVOQlFVTXNVMEZCVWl4RFFVRnJRaXhOUVVGc1FpeERRVUY1UWl4WFFVRjZRanM3UVVGRFFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3hSUVVGQkxHTkJRV01zUTBGQlF5eExRVUZtTEVOQlFYRkNMRk5CUVhKQ0xFZEJRV2xETEVkQlFXcERPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzVVVGQlFTeGpRVUZqTEVOQlFVTXNTMEZCWml4RFFVRnhRaXhWUVVGeVFpeEhRVUZyUXl4TlFVRnNRenRCUVVOQkxGRkJRVUVzWTBGQll5eERRVUZETEV0QlFXWXNRMEZCY1VJc1UwRkJja0lzUjBGQmFVTXNSMEZCYWtNN1FVRkRRU3hSUVVGQkxGVkJRVlVzUTBGQlF5eFpRVUZOTzBGQlEyWXNWVUZCUVN4alFVRmpMRU5CUVVNc1MwRkJaaXhEUVVGeFFpeFZRVUZ5UWl4SFFVRnJReXhKUVVGc1F6dEJRVU5FTEZOQlJsTXNRMEZCVmp0QlFVZEVPMEZCUTBZN096czdPenM3T3pzN096czdPenM3UVVOb1NVa3NTVUZCVFN4VlFVRlZMRWRCUVVjc1UwRkJZaXhWUVVGaE8wRkJRVUVzVTBGQlRTeERRVU01UWl4blFrRkVPRUlzUlVGRk9VSXNhMEpCUmpoQ0xFVkJSemxDTEdkQ1FVZzRRaXhGUVVrNVFpeE5RVW80UWl4RlFVczVRaXhSUVV3NFFpeEZRVTA1UWl4TlFVNDRRaXhGUVU4NVFpeFJRVkE0UWl4RFFVOXlRaXhUUVVGVExFTkJRVU1zVVVGUVZ5eEZRVkUxUWp0QlFWSTBRaXhMUVZONFFpeFRRVUZUTEVOQlFVTXNVMEZCVml4RFFVRnZRaXhSUVVGd1FpeERRVUUyUWl4TFFVRTNRaXhMUVVGMVF5eG5Ra0ZCWjBJc1VVRlVja003UVVGQlFTeERRVUZ1UWpzN096czdPenM3T3pzN08wRkRRVkE3T3pzN096czdPMGxCUldFc1ZUdEJRVU5ZTEhkQ1FVRmpPMEZCUVVFN08wRkJRMW9zVTBGQlN5eFhRVUZNTEVkQlFXMUNMSE5DUVVGdVFqdEJRVU5CTEZOQlFVc3NWVUZCVEN4SFFVRnJRaXhMUVVGTExGZEJRVXdzUzBGQmNVSXNhVUpCUVhKQ0xFZEJRWGxETEdGQlFUTkVPMEZCUTBFc1UwRkJTeXhWUVVGTUxFZEJRV3RDTEVsQlFXeENPMEZCUTBFc1UwRkJTeXh0UWtGQlRDeEhRVUV5UWl4UlFVRlJMRU5CUVVNc1owSkJRVlFzUTBGQk1FSXNhMEpCUVRGQ0xFTkJRVE5DTzBGQlEwUTdPenM3VjBGRlJDdzRRa0ZCY1VJN1FVRkRia0lzWVVGQlR5eE5RVUZOTEVOQlFVTXNWVUZCVUN4SFFVRnZRaXhSUVVGUkxFTkJRVU1zWlVGQlZDeERRVUY1UWl4WFFVRndSRHRCUVVORU96czdWMEZGUkN3MlFrRkJiMEk3UVVGRGJFSXNZVUZEUlN4SlFVRkpMRU5CUVVNc1YwRkJUQ3hKUVVORExGRkJRVkVzUTBGQlF5eGxRVUZVTEVsQlFUUkNMRkZCUVZFc1EwRkJReXhsUVVGVUxFTkJRWGxDTEZOQlJIUkVMRWxCUlVNc1VVRkJVU3hEUVVGRExFbEJRVlFzU1VGQmFVSXNVVUZCVVN4RFFVRkRMRWxCUVZRc1EwRkJZeXhUUVVoc1F6dEJRVXRFT3pzN1YwRkZSQ3cwUWtGQmJVSTdRVUZCUVRzN1FVRkRha0lzVjBGQlN5eFZRVUZNTEVkQlFXdENMRkZCUVZFc1EwRkJReXhKUVVGVUxFTkJRV01zVDBGQlpDeERRVUZ6UWl4TlFVRjBRaXhIUVVFclFpeFJRVUZSTEVOQlFVTXNTVUZCVkN4RFFVRmpMRTlCUVdRc1EwRkJjMElzVFVGQmRFSXNSMEZCSzBJc1VVRkJVU3hEUVVGRExFbEJRVlFzUTBGQll5eFBRVUZrTEVOQlFYTkNMRTFCUVhKRUxFZEJRVGhFTEV0QlFVc3NhVUpCUVV3c1JVRkJMMGM3TzBGQlEwRXNWVUZCU1N4TFFVRkxMR3RDUVVGTUxFVkJRVW9zUlVGQkswSTdRVUZETjBJc1VVRkJRU3hSUVVGUkxFTkJRVU1zU1VGQlZDeERRVUZqTEV0QlFXUXNRMEZCYjBJc1dVRkJjRUlzWVVGQmMwTXNTMEZCU3l4clFrRkJUQ3hGUVVGMFF6czdRVUZEUVN4aFFVRkxMRzFDUVVGTUxFTkJRWGxDTEU5QlFYcENMRU5CUVdsRExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlF6RkRMRlZCUVVFc1MwRkJTeXhEUVVGRExFdEJRVTRzUTBGQldTeFpRVUZhTEdGQlFUaENMRXRCUVVrc1EwRkJReXhyUWtGQlRDeEZRVUU1UWp0QlFVTkVMRk5CUmtRN1FVRkhSRHM3UVVGRFJDeE5RVUZCTEZGQlFWRXNRMEZCUXl4SlFVRlVMRU5CUVdNc1MwRkJaQ3hEUVVGdlFpeEhRVUZ3UWl4alFVRTRRaXhMUVVGTExGVkJRVzVETzBGQlEwRXNUVUZCUVN4UlFVRlJMRU5CUVVNc1NVRkJWQ3hEUVVGakxGTkJRV1FzUTBGQmQwSXNSMEZCZUVJc1EwRkJORUlzUzBGQlN5eFZRVUZxUXp0QlFVTkVPenM3VjBGRlJDd3lRa0ZCYTBJN1FVRkRhRUlzVFVGQlFTeFJRVUZSTEVOQlFVTXNTVUZCVkN4RFFVRmpMRk5CUVdRc1EwRkJkMElzVFVGQmVFSXNRMEZCSzBJc1MwRkJTeXhWUVVGd1F6dEJRVU5CTEUxQlFVRXNUVUZCVFN4RFFVRkRMRkZCUVZBc1EwRkJaMElzUTBGQmFFSXNSVUZCYlVJc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlZDeERRVUZqTEU5QlFXUXNRMEZCYzBJc1RVRkJNVU03UVVGRFFTeE5RVUZCTEZGQlFWRXNRMEZCUXl4SlFVRlVMRU5CUVdNc1MwRkJaQ3hEUVVGdlFpeFpRVUZ3UWl4SFFVRnRReXhKUVVGdVF6dEJRVU5CTEUxQlFVRXNVVUZCVVN4RFFVRkRMRWxCUVZRc1EwRkJZeXhMUVVGa0xFTkJRVzlDTEVkQlFYQkNMRWRCUVRCQ0xFbEJRVEZDT3p0QlFVTkJMRmRCUVVzc2JVSkJRVXdzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZETVVNc1VVRkJRU3hMUVVGTExFTkJRVU1zUzBGQlRpeERRVUZaTEZsQlFWb3NSMEZCTWtJc1NVRkJNMEk3UVVGRFJDeFBRVVpFT3p0QlFVZEJMRTFCUVVFc1VVRkJVU3hEUVVGRExFbEJRVlFzUTBGQll5eGxRVUZrTEVOQlFUaENMR0ZCUVRsQ08wRkJRMEVzVjBGQlN5eFZRVUZNTEVkQlFXdENMRWxCUVd4Q08wRkJRMFE3T3pzN096czdRVUZIU0N4TlFVRk5MRU5CUVVNc1ZVRkJVQ3hIUVVGdlFpeEpRVUZKTEZWQlFVb3NSVUZCY0VJaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUhJb1pTeHVMSFFwZTJaMWJtTjBhVzl1SUc4b2FTeG1LWHRwWmlnaGJsdHBYU2w3YVdZb0lXVmJhVjBwZTNaaGNpQmpQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVU3YVdZb0lXWW1KbU1wY21WMGRYSnVJR01vYVN3aE1DazdhV1lvZFNseVpYUjFjbTRnZFNocExDRXdLVHQyWVhJZ1lUMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsya3JYQ0luWENJcE8zUm9jbTkzSUdFdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4aGZYWmhjaUJ3UFc1YmFWMDllMlY0Y0c5eWRITTZlMzE5TzJWYmFWMWJNRjB1WTJGc2JDaHdMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9jaWw3ZG1GeUlHNDlaVnRwWFZzeFhWdHlYVHR5WlhSMWNtNGdieWh1Zkh4eUtYMHNjQ3h3TG1WNGNHOXlkSE1zY2l4bExHNHNkQ2w5Y21WMGRYSnVJRzViYVYwdVpYaHdiM0owYzMxbWIzSW9kbUZ5SUhVOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjbVZ4ZFdseVpTWW1jbVZ4ZFdseVpTeHBQVEE3YVR4MExteGxibWQwYUR0cEt5c3BieWgwVzJsZEtUdHlaWFIxY200Z2IzMXlaWFIxY200Z2NuMHBLQ2tpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5aGNIQnNlVVJsWTI5eVlYUmxaRVJsYzJOeWFYQjBiM0k3WEc1bWRXNWpkR2x2YmlCZllYQndiSGxFWldOdmNtRjBaV1JFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGtzSUdSbFkyOXlZWFJ2Y25Nc0lHUmxjMk55YVhCMGIzSXNJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQjJZWElnWkdWell5QTlJSHRjYmlBZ0lDQjlPMXh1SUNBZ0lFOWlhbVZqZEZzbmEyVW5JQ3NnSjNsekoxMG9aR1Z6WTNKcGNIUnZjaWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNBZ0lDQWdaR1Z6WTF0clpYbGRJRDBnWkdWelkzSnBjSFJ2Y2x0clpYbGRPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHUmxjMk11Wlc1MWJXVnlZV0pzWlNBOUlDRWhaR1Z6WXk1bGJuVnRaWEpoWW14bE8xeHVJQ0FnSUdSbGMyTXVZMjl1Wm1sbmRYSmhZbXhsSUQwZ0lTRmtaWE5qTG1OdmJtWnBaM1Z5WVdKc1pUdGNiaUFnSUNCcFppQW9KM1poYkhWbEp5QnBiaUJrWlhOaklIeDhJR1JsYzJNdWFXNXBkR2xoYkdsNlpYSXBJSHRjYmlBZ0lDQWdJQ0FnWkdWell5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJR1JsYzJNZ1BTQmtaV052Y21GMGIzSnpMbk5zYVdObEtDa3VjbVYyWlhKelpTZ3BMbkpsWkhWalpTaG1kVzVqZEdsdmJpaGtaWE5qTVN3Z1pHVmpiM0poZEc5eUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV052Y21GMGIzSWdQeUJrWldOdmNtRjBiM0lvZEdGeVoyVjBMQ0J3Y205d1pYSjBlU3dnWkdWell6RXBJSHg4SUdSbGMyTXhJRG9nWkdWell6RTdYRzRnSUNBZ2ZTd2daR1Z6WXlrN1hHNGdJQ0FnYVdZZ0tHTnZiblJsZUhRZ0ppWWdaR1Z6WXk1cGJtbDBhV0ZzYVhwbGNpQWhQVDBnZG05cFpDQXdLU0I3WEc0Z0lDQWdJQ0FnSUdSbGMyTXVkbUZzZFdVZ1BTQmtaWE5qTG1sdWFYUnBZV3hwZW1WeUlEOGdaR1Z6WXk1cGJtbDBhV0ZzYVhwbGNpNWpZV3hzS0dOdmJuUmxlSFFwSURvZ2RtOXBaQ0F3TzF4dUlDQWdJQ0FnSUNCa1pYTmpMbWx1YVhScFlXeHBlbVZ5SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1pHVnpZeTVwYm1sMGFXRnNhWHBsY2lBOVBUMGdkbTlwWkNBd0tTQjdYRzRnSUNBZ0lDQWdJRTlpYW1WamRGc25aR1ZtYVc1bEp5QXJJQ2RRY205d1pYSjBlU2RkS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGtzSUdSbGMyTXBPMXh1SUNBZ0lDQWdJQ0JrWlhOaklEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHUmxjMk03WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjloY25KaGVWZHBkR2hJYjJ4bGN6dGNibVoxYm1OMGFXOXVJRjloY25KaGVWZHBkR2hJYjJ4bGN5aGhjbklwSUh0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hoY25JcEtTQnlaWFIxY200Z1lYSnlPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZZWEp5WVhsWGFYUm9iM1YwU0c5c1pYTTdYRzVtZFc1amRHbHZiaUJmWVhKeVlYbFhhWFJvYjNWMFNHOXNaWE1vWVhKeUtTQjdYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1lYSnlLU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdMQ0JoY25JeUlEMGdibVYzSUVGeWNtRjVLR0Z5Y2k1c1pXNW5kR2dwT3lCcElEd2dZWEp5TG14bGJtZDBhRHNnYVNzcktYdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNqSmJhVjBnUFNCaGNuSmJhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNqSTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtPMXh1Wm5WdVkzUnBiMjRnWDJGemMyVnlkRlJvYVhOSmJtbDBhV0ZzYVhwbFpDaHpaV3htS1NCN1hHNGdJQ0FnYVdZZ0tITmxiR1lnUFQwOUlIWnZhV1FnTUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSjBhR2x6SUdoaGMyNG5kQ0JpWldWdUlHbHVhWFJwWVd4cGMyVmtJQzBnYzNWd1pYSW9LU0JvWVhOdUozUWdZbVZsYmlCallXeHNaV1JjSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnpaV3htTzF4dWZWeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JCYzNsdVkwZGxibVZ5WVhSdmNqdGNiblpoY2lCZllYZGhhWFJXWVd4MVpTQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYMkYzWVdsMFgzWmhiSFZsWENJcEtUdGNibVoxYm1OMGFXOXVJRjlwYm5OMFlXNWpaVzltS0d4bFpuUXNJSEpwWjJoMEtTQjdYRzRnSUNBZ2FXWWdLSEpwWjJoMElDRTlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlGTjViV0p2YkNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQnlhV2RvZEZ0VGVXMWliMnd1YUdGelNXNXpkR0Z1WTJWZEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlhV2RvZEZ0VGVXMWliMnd1YUdGelNXNXpkR0Z1WTJWZEtHeGxablFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNaV1owSUdsdWMzUmhibU5sYjJZZ2NtbG5hSFE3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2UxeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnZZbXBjYmlBZ0lDQjlPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1FYTjVibU5IWlc1bGNtRjBiM0lvWjJWdUtTQjdYRzRnSUNBZ2RtRnlJSE5sYm1RZ1BTQm1kVzVqZEdsdmJpQnpaVzVrS0d0bGVTd2dZWEpuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWEYxWlhOMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ2EyVjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnpvZ1lYSm5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVTZJSEpsYzI5c2RtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOME9pQnlaV3BsWTNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRG9nYm5Wc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GamF5QTlJR0poWTJzdWJtVjRkQ0E5SUhKbGNYVmxjM1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjUwSUQwZ1ltRmpheUE5SUhKbGNYVmxjM1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXMWxLR3RsZVN3Z1lYSm5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnYzJWMGRHeGxJRDBnWm5WdVkzUnBiMjRnYzJWMGRHeGxLSFI1Y0dVc0lIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNoMGVYQmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKeVpYUjFjbTVjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXVkQzV5WlhOdmJIWmxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUhaaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyNWxPaUIwY25WbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lkR2h5YjNkY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl1ZEM1eVpXcGxZM1FvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dWRDNXlaWE52YkhabEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjI1bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnliMjUwSUQwZ1puSnZiblF1Ym1WNGREdGNiaUFnSUNBZ0lDQWdhV1lnS0daeWIyNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYldVb1puSnZiblF1YTJWNUxDQm1jbTl1ZEM1aGNtY3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ltRmpheUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lIWmhjaUJtY205dWRDd2dZbUZqYXp0Y2JpQWdJQ0JtZFc1amRHbHZiaUJ5WlhOMWJXVW9hMlY1TENCaGNtY3BJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQm5aVzViYTJWNVhTaGhjbWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnY21WemRXeDBMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIZHlZWEJ3WldSQmQyRnBkQ0E5SUY5cGJuTjBZVzVqWlc5bUtIWmhiSFZsTENCZllYZGhhWFJXWVd4MVpTNWtaV1poZFd4MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1Y21WemIyeDJaU2gzY21Gd2NHVmtRWGRoYVhRZ1B5QjJZV3gxWlM1M2NtRndjR1ZrSURvZ2RtRnNkV1VwTG5Sb1pXNG9ablZ1WTNScGIyNG9ZWEpuTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzY21Gd2NHVmtRWGRoYVhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXMWxLRndpYm1WNGRGd2lMQ0JoY21jeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGJHVW9jbVZ6ZFd4MExtUnZibVVnUHlCY0luSmxkSFZ5Ymx3aUlEb2dYQ0p1YjNKdFlXeGNJaXdnWVhKbk1TazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQm1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiV1VvWENKMGFISnZkMXdpTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHeGxLRndpZEdoeWIzZGNJaXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbDlwYm5admEyVWdQU0J6Wlc1a08xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1oyVnVMbkpsZEhWeWJpQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVjBkWEp1SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JuMWNibWxtSUNoMGVYQmxiMllnVTNsdFltOXNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJcElIdGNiaUFnSUNCQmMzbHVZMGRsYm1WeVlYUnZjaTV3Y205MGIzUjVjR1ZiVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwN1hHNTlYRzVCYzNsdVkwZGxibVZ5WVhSdmNpNXdjbTkwYjNSNWNHVXVibVY0ZENBOUlHWjFibU4wYVc5dUtHRnlaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuWnZhMlVvWENKdVpYaDBYQ0lzSUdGeVp5azdYRzU5TzF4dVFYTjVibU5IWlc1bGNtRjBiM0l1Y0hKdmRHOTBlWEJsTG5Sb2NtOTNJRDBnWm5WdVkzUnBiMjRvWVhKbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1ZG05clpTaGNJblJvY205M1hDSXNJR0Z5WnlrN1hHNTlPMXh1UVhONWJtTkhaVzVsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbkpsZEhWeWJpQTlJR1oxYm1OMGFXOXVLR0Z5WnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBiblp2YTJVb1hDSnlaWFIxY201Y0lpd2dZWEpuS1R0Y2JuMDdYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5aGMzbHVZMGRsYm1WeVlYUnZja1JsYkdWbllYUmxPMXh1Wm5WdVkzUnBiMjRnWDJGemVXNWpSMlZ1WlhKaGRHOXlSR1ZzWldkaGRHVW9hVzV1WlhJc0lHRjNZV2wwVjNKaGNDa2dlMXh1SUNBZ0lIWmhjaUJ3ZFcxd0lEMGdablZ1WTNScGIyNGdjSFZ0Y0NoclpYa3NJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSGRoYVhScGJtY2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FXNXVaWEpiYTJWNVhTaDJZV3gxWlNrcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZibVU2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdGM1lXbDBWM0poY0NoMllXeDFaU2xjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCcGRHVnlJRDBnZTF4dUlDQWdJSDBzSUhkaGFYUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQTdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQlRlVzFpYjJ3dWFYUmxjbUYwYjNJcElIdGNiaUFnSUNBZ0lDQWdhWFJsY2x0VGVXMWliMnd1YVhSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2FYUmxjaTV1WlhoMElEMGdablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hkaGFYUnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRoYVhScGJtY2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSFZ0Y0NoY0ltNWxlSFJjSWl3Z2RtRnNkV1VwTzF4dUlDQWdJSDA3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJwYm01bGNpNTBhSEp2ZHlBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNBZ0lHbDBaWEl1ZEdoeWIzY2dQU0JtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRoYVhScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzWVdsMGFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0hWdGNDaGNJblJvY205M1hDSXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnBibTVsY2k1eVpYUjFjbTRnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnSUNCcGRHVnlMbkpsZEhWeWJpQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0hWdGNDaGNJbkpsZEhWeWJsd2lMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCcGRHVnlPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZZWE41Ym1OSmRHVnlZWFJ2Y2p0Y2JtWjFibU4wYVc5dUlGOWhjM2x1WTBsMFpYSmhkRzl5S0dsMFpYSmhZbXhsS1NCN1hHNGdJQ0FnZG1GeUlHMWxkR2h2WkR0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdhWFJsY21GaWJHVmJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxbGRHaHZaQ0FoUFNCdWRXeHNLU0J5WlhSMWNtNGdiV1YwYUc5a0xtTmhiR3dvYVhSbGNtRmliR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hUZVcxaWIyd3VhWFJsY21GMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOUlHbDBaWEpoWW14bFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUNFOUlHNTFiR3dwSUhKbGRIVnliaUJ0WlhSb2IyUXVZMkZzYkNocGRHVnlZV0pzWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrOWlhbVZqZENCcGN5QnViM1FnWVhONWJtTWdhWFJsY21GaWJHVmNJaWs3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjloYzNsdVkxUnZSMlZ1WlhKaGRHOXlPMXh1Wm5WdVkzUnBiMjRnWVhONWJtTkhaVzVsY21GMGIzSlRkR1Z3S0dkbGJpd2djbVZ6YjJ4MlpTd2djbVZxWldOMExDQmZibVY0ZEN3Z1gzUm9jbTkzTENCclpYa3NJR0Z5WnlrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtWnZJRDBnWjJWdVcydGxlVjBvWVhKbktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnYVc1bWJ5NTJZV3gxWlR0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGJtWnZMbVJ2Ym1VcElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSFpoYkhWbEtTNTBhR1Z1S0Y5dVpYaDBMQ0JmZEdoeWIzY3BPMXh1SUNBZ0lIMWNibjFjYm1aMWJtTjBhVzl1SUY5aGMzbHVZMVJ2UjJWdVpYSmhkRzl5S0dadUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJWc1ppQTlJSFJvYVhNc0lHRnlaM01nUFNCaGNtZDFiV1Z1ZEhNN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm5aVzRnUFNCbWJpNWhjSEJzZVNoelpXeG1MQ0JoY21kektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUY5dVpYaDBLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE41Ym1OSFpXNWxjbUYwYjNKVGRHVndLR2RsYml3Z2NtVnpiMngyWlN3Z2NtVnFaV04wTENCZmJtVjRkQ3dnWDNSb2NtOTNMQ0JjSW01bGVIUmNJaXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnWDNSb2NtOTNLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnplVzVqUjJWdVpYSmhkRzl5VTNSbGNDaG5aVzRzSUhKbGMyOXNkbVVzSUhKbGFtVmpkQ3dnWDI1bGVIUXNJRjkwYUhKdmR5d2dYQ0owYUhKdmQxd2lMQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYMjVsZUhRb2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMkYzWVdsMFFYTjVibU5IWlc1bGNtRjBiM0k3WEc1MllYSWdYMkYzWVdsMFZtRnNkV1VnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLSEpsY1hWcGNtVW9YQ0l1TDE5aGQyRnBkRjkyWVd4MVpWd2lLU2s3WEc1bWRXNWpkR2x2YmlCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN1hHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRNklHOWlhbHh1SUNBZ0lIMDdYRzU5WEc1bWRXNWpkR2x2YmlCZllYZGhhWFJCYzNsdVkwZGxibVZ5WVhSdmNpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1gyRjNZV2wwVm1Gc2RXVXVaR1ZtWVhWc2RDaDJZV3gxWlNrN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5QmQyRnBkRlpoYkhWbE8xeHVablZ1WTNScGIyNGdYMEYzWVdsMFZtRnNkV1VvZG1Gc2RXVXBJSHRjYmlBZ0lDQjBhR2x6TG5keVlYQndaV1FnUFNCMllXeDFaVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMk5zWVhOelEyRnNiRU5vWldOck8xeHVablZ1WTNScGIyNGdYMmx1YzNSaGJtTmxiMllvYkdWbWRDd2djbWxuYUhRcElIdGNiaUFnSUNCcFppQW9jbWxuYUhRZ0lUMGdiblZzYkNBbUppQjBlWEJsYjJZZ1UzbHRZbTlzSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUNZbUlISnBaMmgwVzFONWJXSnZiQzVvWVhOSmJuTjBZVzVqWlYwcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISnBaMmgwVzFONWJXSnZiQzVvWVhOSmJuTjBZVzVqWlYwb2JHVm1kQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeGxablFnYVc1emRHRnVZMlZ2WmlCeWFXZG9kRHRjYmlBZ0lDQjlYRzU5WEc1bWRXNWpkR2x2YmlCZlkyeGhjM05EWVd4c1EyaGxZMnNvYVc1emRHRnVZMlVzSUVOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ2FXWWdLQ0ZmYVc1emRHRnVZMlZ2WmlocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1kyRnNiQ0JoSUdOc1lYTnpJR0Z6SUdFZ1puVnVZM1JwYjI1Y0lpazdYRzRnSUNBZ2ZWeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZlkyeGhjM05PWVcxbFZFUmFSWEp5YjNJN1hHNW1kVzVqZEdsdmJpQmZZMnhoYzNOT1lXMWxWRVJhUlhKeWIzSW9ibUZ0WlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtOc1lYTnpJRnhjWENKY0lpQXJJRzVoYldVZ0t5QmNJbHhjWENJZ1kyRnVibTkwSUdKbElISmxabVZ5Wlc1alpXUWdhVzRnWTI5dGNIVjBaV1FnY0hKdmNHVnlkSGtnYTJWNWN5NWNJaWs3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjlqYkdGemMxQnlhWFpoZEdWR2FXVnNaRWRsZER0Y2JtWjFibU4wYVc5dUlGOWpiR0Z6YzFCeWFYWmhkR1ZHYVdWc1pFZGxkQ2h5WldObGFYWmxjaXdnY0hKcGRtRjBaVTFoY0NrZ2UxeHVJQ0FnSUdsbUlDZ2hjSEpwZG1GMFpVMWhjQzVvWVhNb2NtVmpaV2wyWlhJcEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKaGRIUmxiWEIwWldRZ2RHOGdaMlYwSUhCeWFYWmhkR1VnWm1sbGJHUWdiMjRnYm05dUxXbHVjM1JoYm1ObFhDSXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnY0hKcGRtRjBaVTFoY0M1blpYUW9jbVZqWldsMlpYSXBMblpoYkhWbE8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZlkyeGhjM05RY21sMllYUmxSbWxsYkdSQ1lYTmxPMXh1Wm5WdVkzUnBiMjRnWDJOc1lYTnpVSEpwZG1GMFpVWnBaV3hrUW1GelpTaHlaV05sYVhabGNpd2djSEpwZG1GMFpVdGxlU2tnZTF4dUlDQWdJR2xtSUNnaFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tISmxZMlZwZG1WeUxDQndjbWwyWVhSbFMyVjVLU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lZWFIwWlcxd2RHVmtJSFJ2SUhWelpTQndjbWwyWVhSbElHWnBaV3hrSUc5dUlHNXZiaTFwYm5OMFlXNWpaVndpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISmxZMlZwZG1WeU8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZlkyeGhjM05RY21sMllYUmxSbWxsYkdSVFpYUTdYRzVtZFc1amRHbHZiaUJmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JUWlhRb2NtVmpaV2wyWlhJc0lIQnlhWFpoZEdWTllYQXNJSFpoYkhWbEtTQjdYRzRnSUNBZ2FXWWdLQ0Z3Y21sMllYUmxUV0Z3TG1oaGN5aHlaV05sYVhabGNpa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0ltRjBkR1Z0Y0hSbFpDQjBieUJ6WlhRZ2NISnBkbUYwWlNCbWFXVnNaQ0J2YmlCdWIyNHRhVzV6ZEdGdVkyVmNJaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NISnBkbUYwWlUxaGNDNW5aWFFvY21WalpXbDJaWElwTzF4dUlDQWdJR2xtSUNnaFpHVnpZM0pwY0hSdmNpNTNjbWwwWVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVlYUjBaVzF3ZEdWa0lIUnZJSE5sZENCeVpXRmtJRzl1YkhrZ2NISnBkbUYwWlNCbWFXVnNaRndpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdaR1Z6WTNKcGNIUnZjaTUyWVd4MVpTQTlJSFpoYkhWbE8xeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyTnNZWE56VUhKcGRtRjBaVTFsZEdodlpFZGxkRHRjYm1aMWJtTjBhVzl1SUY5amJHRnpjMUJ5YVhaaGRHVk5aWFJvYjJSSFpYUW9jbVZqWldsMlpYSXNJSEJ5YVhaaGRHVlRaWFFzSUdadUtTQjdYRzRnSUNBZ2FXWWdLQ0Z3Y21sMllYUmxVMlYwTG1oaGN5aHlaV05sYVhabGNpa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0ltRjBkR1Z0Y0hSbFpDQjBieUJuWlhRZ2NISnBkbUYwWlNCbWFXVnNaQ0J2YmlCdWIyNHRhVzV6ZEdGdVkyVmNJaWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbWJqdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyTnNZWE56VUhKcGRtRjBaVTFsZEdodlpGTmxkRHRjYm1aMWJtTjBhVzl1SUY5amJHRnpjMUJ5YVhaaGRHVk5aWFJvYjJSVFpYUW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSW1GMGRHVnRjSFJsWkNCMGJ5QnlaV0Z6YzJsbmJpQndjbWwyWVhSbElHMWxkR2h2WkZ3aUtUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyTnNZWE56VTNSaGRHbGpVSEpwZG1GMFpVWnBaV3hrVTNCbFkwZGxkRHRjYm1aMWJtTjBhVzl1SUY5amJHRnpjMU4wWVhScFkxQnlhWFpoZEdWR2FXVnNaRk53WldOSFpYUW9jbVZqWldsMlpYSXNJR05zWVhOelEyOXVjM1J5ZFdOMGIzSXNJR1JsYzJOeWFYQjBiM0lwSUh0Y2JpQWdJQ0JwWmlBb2NtVmpaV2wyWlhJZ0lUMDlJR05zWVhOelEyOXVjM1J5ZFdOMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lsQnlhWFpoZEdVZ2MzUmhkR2xqSUdGalkyVnpjeUJ2WmlCM2NtOXVaeUJ3Y205MlpXNWhibU5sWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaR1Z6WTNKcGNIUnZjaTUyWVd4MVpUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyTnNZWE56VTNSaGRHbGpVSEpwZG1GMFpVWnBaV3hrVTNCbFkxTmxkRHRjYm1aMWJtTjBhVzl1SUY5amJHRnpjMU4wWVhScFkxQnlhWFpoZEdWR2FXVnNaRk53WldOVFpYUW9jbVZqWldsMlpYSXNJR05zWVhOelEyOXVjM1J5ZFdOMGIzSXNJR1JsYzJOeWFYQjBiM0lzSUhaaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0hKbFkyVnBkbVZ5SUNFOVBTQmpiR0Z6YzBOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUWNtbDJZWFJsSUhOMFlYUnBZeUJoWTJObGMzTWdiMllnZDNKdmJtY2djSEp2ZG1WdVlXNWpaVndpS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGa1pYTmpjbWx3ZEc5eUxuZHlhWFJoWW14bEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKaGRIUmxiWEIwWldRZ2RHOGdjMlYwSUhKbFlXUWdiMjVzZVNCd2NtbDJZWFJsSUdacFpXeGtYQ0lwTzF4dUlDQWdJSDFjYmlBZ0lDQmtaWE5qY21sd2RHOXlMblpoYkhWbElEMGdkbUZzZFdVN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZlkyOXVjM1J5ZFdOME8xeHVablZ1WTNScGIyNGdhWE5PWVhScGRtVlNaV1pzWldOMFEyOXVjM1J5ZFdOMEtDa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdVbVZtYkdWamRDQTlQVDBnWENKMWJtUmxabWx1WldSY0lpQjhmQ0FoVW1WbWJHVmpkQzVqYjI1emRISjFZM1FwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCcFppQW9VbVZtYkdWamRDNWpiMjV6ZEhKMVkzUXVjMmhoYlNrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdVSEp2ZUhrZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnUkdGMFpTNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoU1pXWnNaV04wTG1OdmJuTjBjblZqZENoRVlYUmxMQ0JiWFN3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dWZWeHVablZ1WTNScGIyNGdZMjl1YzNSeWRXTjBLRkJoY21WdWRDd2dZWEpuY3l3Z1EyeGhjM01wSUh0Y2JpQWdJQ0JwWmlBb2FYTk9ZWFJwZG1WU1pXWnNaV04wUTI5dWMzUnlkV04wS0NrcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNSeWRXTjBJRDBnVW1WbWJHVmpkQzVqYjI1emRISjFZM1E3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNSeWRXTjBJRDBnWm5WdVkzUnBiMjRnWTI5dWMzUnlkV04wTVNoUVlYSmxiblF4TENCaGNtZHpNU3dnUTJ4aGMzTXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVNBOUlGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVkV3hzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lTNXdkWE5vTG1Gd2NHeDVLR0VzSUdGeVozTXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJEYjI1emRISjFZM1J2Y2lBOUlFWjFibU4wYVc5dUxtSnBibVF1WVhCd2JIa29VR0Z5Wlc1ME1Td2dZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1emRHRnVZMlVnUFNCdVpYY2dRMjl1YzNSeWRXTjBiM0lvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRGJHRnpjekVwSUY5elpYUlFjbTkwYjNSNWNHVlBaaWhwYm5OMFlXNWpaU3dnUTJ4aGMzTXhMbkJ5YjNSdmRIbHdaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXNXpkR0Z1WTJVN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJqYjI1emRISjFZM1F1WVhCd2JIa29iblZzYkN3Z1lYSm5kVzFsYm5SektUdGNibjFjYm1aMWJtTjBhVzl1SUY5amIyNXpkSEoxWTNRb1VHRnlaVzUwTENCaGNtZHpMQ0JEYkdGemN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyNXpkSEoxWTNRdVlYQndiSGtvYm5Wc2JDd2dZWEpuZFcxbGJuUnpLVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMk55WldGMFpVTnNZWE56TzF4dVpuVnVZM1JwYjI0Z1gyUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHRnlaMlYwTENCd2NtOXdjeWtnZTF4dUlDQWdJR1p2Y2loMllYSWdhU0E5SURBN0lHa2dQQ0J3Y205d2N5NXNaVzVuZEdnN0lHa3JLeWw3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtaWE5qY21sd2RHOXlJRDBnY0hKdmNITmJhVjA3WEc0Z0lDQWdJQ0FnSUdSbGMyTnlhWEIwYjNJdVpXNTFiV1Z5WVdKc1pTQTlJR1JsYzJOeWFYQjBiM0l1Wlc1MWJXVnlZV0pzWlNCOGZDQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ1pHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1hDSjJZV3gxWlZ3aUlHbHVJR1JsYzJOeWFYQjBiM0lwSUdSbGMyTnlhWEIwYjNJdWQzSnBkR0ZpYkdVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQmtaWE5qY21sd2RHOXlMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ2ZWeHVmVnh1Wm5WdVkzUnBiMjRnWDJOeVpXRjBaVU5zWVhOektFTnZibk4wY25WamRHOXlMQ0J3Y205MGIxQnliM0J6TENCemRHRjBhV05RY205d2N5a2dlMXh1SUNBZ0lHbG1JQ2h3Y205MGIxQnliM0J6S1NCZlpHVm1hVzVsVUhKdmNHVnlkR2xsY3loRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXNJSEJ5YjNSdlVISnZjSE1wTzF4dUlDQWdJR2xtSUNoemRHRjBhV05RY205d2N5a2dYMlJsWm1sdVpWQnliM0JsY25ScFpYTW9RMjl1YzNSeWRXTjBiM0lzSUhOMFlYUnBZMUJ5YjNCektUdGNiaUFnSUNCeVpYUjFjbTRnUTI5dWMzUnlkV04wYjNJN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5amNtVmhkR1ZUZFhCbGNqdGNiblpoY2lCZmFYTk9ZWFJwZG1WU1pXWnNaV04wUTI5dWMzUnlkV04wSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmFYTmZibUYwYVhabFgzSmxabXhsWTNSZlkyOXVjM1J5ZFdOMFhDSXBLVHRjYm5aaGNpQmZaMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0hKbGNYVnBjbVVvWENJdUwxOW5aWFJmY0hKdmRHOTBlWEJsWDI5bVhDSXBLVHRjYm5aaGNpQmZjRzl6YzJsaWJHVkRiMjV6ZEhKMVkzUnZjbEpsZEhWeWJpQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYM0J2YzNOcFlteGxYMk52Ym5OMGNuVmpkRzl5WDNKbGRIVnlibHdpS1NrN1hHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzlpYWx4dUlDQWdJSDA3WEc1OVhHNW1kVzVqZEdsdmJpQmZZM0psWVhSbFUzVndaWElvUkdWeWFYWmxaQ2tnZTF4dUlDQWdJSFpoY2lCb1lYTk9ZWFJwZG1WU1pXWnNaV04wUTI5dWMzUnlkV04wSUQwZ0tEQXNJRjlwYzA1aGRHbDJaVkpsWm14bFkzUkRiMjV6ZEhKMVkzUXBMbVJsWm1GMWJIUW9LVHRjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1gyTnlaV0YwWlZOMWNHVnlTVzUwWlhKdVlXd29LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQlRkWEJsY2lBOUlDZ3dMQ0JmWjJWMFVISnZkRzkwZVhCbFQyWXBMbVJsWm1GMWJIUW9SR1Z5YVhabFpDa3NJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGMwNWhkR2wyWlZKbFpteGxZM1JEYjI1emRISjFZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCT1pYZFVZWEpuWlhRZ1BTQW9NQ3dnWDJkbGRGQnliM1J2ZEhsd1pVOW1LUzVrWldaaGRXeDBLSFJvYVhNcExtTnZibk4wY25WamRHOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1VtVm1iR1ZqZEM1amIyNXpkSEoxWTNRb1UzVndaWElzSUdGeVozVnRaVzUwY3l3Z1RtVjNWR0Z5WjJWMEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUZOMWNHVnlMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZ3dMQ0JmY0c5emMybGliR1ZEYjI1emRISjFZM1J2Y2xKbGRIVnliaWt1WkdWbVlYVnNkQ2gwYUdsekxDQnlaWE4xYkhRcE8xeHVJQ0FnSUgwN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5a1pXTnZjbUYwWlR0Y2JuWmhjaUJmZEc5QmNuSmhlU0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2WDNSdlgyRnljbUY1WENJcEtUdGNiblpoY2lCZmRHOVFjbTl3WlhKMGVVdGxlU0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2WDNSdlgzQnliM0JsY25SNVgydGxlVndpS1NrN1hHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzlpYWx4dUlDQWdJSDA3WEc1OVhHNW1kVzVqZEdsdmJpQmZaR1ZqYjNKaGRHVW9aR1ZqYjNKaGRHOXljeXdnWm1GamRHOXllU3dnYzNWd1pYSkRiR0Z6Y3lrZ2UxeHVJQ0FnSUhaaGNpQnlJRDBnWm1GamRHOXllU2htZFc1amRHbHZiaUJwYm1sMGFXRnNhWHBsS0U4cElIdGNiaUFnSUNBZ0lDQWdYMmx1YVhScFlXeHBlbVZKYm5OMFlXNWpaVVZzWlcxbGJuUnpLRThzSUdSbFkyOXlZWFJsWkM1bGJHVnRaVzUwY3lrN1hHNGdJQ0FnZlN3Z2MzVndaWEpEYkdGemN5azdYRzRnSUNBZ2RtRnlJR1JsWTI5eVlYUmxaQ0E5SUY5a1pXTnZjbUYwWlVOc1lYTnpLRjlqYjJGc1pYTmpaVU5zWVhOelJXeGxiV1Z1ZEhNb2NpNWtMbTFoY0NoZlkzSmxZWFJsUld4bGJXVnVkRVJsYzJOeWFYQjBiM0lwS1N3Z1pHVmpiM0poZEc5eWN5azdYRzRnSUNBZ1gybHVhWFJwWVd4cGVtVkRiR0Z6YzBWc1pXMWxiblJ6S0hJdVJpd2daR1ZqYjNKaGRHVmtMbVZzWlcxbGJuUnpLVHRjYmlBZ0lDQnlaWFIxY200Z1gzSjFia05zWVhOelJtbHVhWE5vWlhKektISXVSaXdnWkdWamIzSmhkR1ZrTG1acGJtbHphR1Z5Y3lrN1hHNTlYRzVtZFc1amRHbHZiaUJmWTNKbFlYUmxSV3hsYldWdWRFUmxjMk55YVhCMGIzSW9aR1ZtS1NCN1hHNGdJQ0FnZG1GeUlHdGxlU0E5SUNnd0xDQmZkRzlRY205d1pYSjBlVXRsZVNrdVpHVm1ZWFZzZENoa1pXWXVhMlY1S1R0Y2JpQWdJQ0IyWVhJZ1pHVnpZM0pwY0hSdmNqdGNiaUFnSUNCcFppQW9aR1ZtTG10cGJtUWdQVDA5SUZ3aWJXVjBhRzlrWENJcElIdGNiaUFnSUNBZ0lDQWdaR1Z6WTNKcGNIUnZjaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmtaV1l1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hrWldZdWRtRnNkV1VzSUZ3aWJtRnRaVndpTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dYM1I1Y0dWdlppaHJaWGtwSUQwOVBTQmNJbk41YldKdmJGd2lJRDhnWENKY0lpQTZJR3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dSbFppNXJhVzVrSUQwOVBTQmNJbWRsZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJR1JsYzJOeWFYQjBiM0lnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHUmxaaTUyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hrWldZdWEybHVaQ0E5UFQwZ1hDSnpaWFJjSWlrZ2UxeHVJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHOXlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCa1pXWXVkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpWeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aR1ZtTG10cGJtUWdQVDA5SUZ3aVptbGxiR1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHOXlJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbFhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdlMXh1SUNBZ0lDQWdJQ0JyYVc1a09pQmtaV1l1YTJsdVpDQTlQVDBnWENKbWFXVnNaRndpSUQ4Z1hDSm1hV1ZzWkZ3aUlEb2dYQ0p0WlhSb2IyUmNJaXhjYmlBZ0lDQWdJQ0FnYTJWNU9pQnJaWGtzWEc0Z0lDQWdJQ0FnSUhCc1lXTmxiV1Z1ZERvZ1pHVm1Mbk4wWVhScFl5QS9JRndpYzNSaGRHbGpYQ0lnT2lCa1pXWXVhMmx1WkNBOVBUMGdYQ0ptYVdWc1pGd2lJRDhnWENKdmQyNWNJaUE2SUZ3aWNISnZkRzkwZVhCbFhDSXNYRzRnSUNBZ0lDQWdJR1JsYzJOeWFYQjBiM0k2SUdSbGMyTnlhWEIwYjNKY2JpQWdJQ0I5TzF4dUlDQWdJR2xtSUNoa1pXWXVaR1ZqYjNKaGRHOXljeWtnWld4bGJXVnVkQzVrWldOdmNtRjBiM0p6SUQwZ1pHVm1MbVJsWTI5eVlYUnZjbk03WEc0Z0lDQWdhV1lnS0dSbFppNXJhVzVrSUQwOVBTQmNJbVpwWld4a1hDSXBJR1ZzWlcxbGJuUXVhVzVwZEdsaGJHbDZaWElnUFNCa1pXWXVkbUZzZFdVN1hHNGdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUTdYRzU5WEc1bWRXNWpkR2x2YmlCZlkyOWhiR1Z6WTJWSFpYUjBaWEpUWlhSMFpYSW9aV3hsYldWdWRDd2diM1JvWlhJcElIdGNiaUFnSUNCcFppQW9aV3hsYldWdWRDNWtaWE5qY21sd2RHOXlMbWRsZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUc5MGFHVnlMbVJsYzJOeWFYQjBiM0l1WjJWMElEMGdaV3hsYldWdWRDNWtaWE5qY21sd2RHOXlMbWRsZER0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J2ZEdobGNpNWtaWE5qY21sd2RHOXlMbk5sZENBOUlHVnNaVzFsYm5RdVpHVnpZM0pwY0hSdmNpNXpaWFE3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z1gyTnZZV3hsYzJObFEyeGhjM05GYkdWdFpXNTBjeWhsYkdWdFpXNTBjeWtnZTF4dUlDQWdJSFpoY2lCdVpYZEZiR1Z0Wlc1MGN5QTlJRnRkTzF4dUlDQWdJSFpoY2lCcGMxTmhiV1ZGYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRnYVhOVFlXMWxSV3hsYldWdWRERW9iM1JvWlhJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOTBhR1Z5TG10cGJtUWdQVDA5SUZ3aWJXVjBhRzlrWENJZ0ppWWdiM1JvWlhJdWEyVjVJRDA5UFNCbGJHVnRaVzUwTG10bGVTQW1KaUJ2ZEdobGNpNXdiR0ZqWlcxbGJuUWdQVDA5SUdWc1pXMWxiblF1Y0d4aFkyVnRaVzUwTzF4dUlDQWdJSDA3WEc0Z0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1ZzWlcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1h0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0JsYkdWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzkwYUdWeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzVyYVc1a0lEMDlQU0JjSW0xbGRHaHZaRndpSUNZbUlDaHZkR2hsY2lBOUlHNWxkMFZzWlcxbGJuUnpMbVpwYm1Rb2FYTlRZVzFsUld4bGJXVnVkQ2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gybHpSR0YwWVVSbGMyTnlhWEIwYjNJb1pXeGxiV1Z1ZEM1a1pYTmpjbWx3ZEc5eUtTQjhmQ0JmYVhORVlYUmhSR1Z6WTNKcGNIUnZjaWh2ZEdobGNpNWtaWE5qY21sd2RHOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZhR0Z6UkdWamIzSmhkRzl5Y3lobGJHVnRaVzUwS1NCOGZDQmZhR0Z6UkdWamIzSmhkRzl5Y3lodmRHaGxjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRkpsWm1WeVpXNWpaVVZ5Y205eUtGd2lSSFZ3YkdsallYUmxaQ0J0WlhSb2IyUnpJQ2hjSWlBcklHVnNaVzFsYm5RdWEyVjVJQ3NnWENJcElHTmhiaWQwSUdKbElHUmxZMjl5WVhSbFpDNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MGFHVnlMbVJsYzJOeWFYQjBiM0lnUFNCbGJHVnRaVzUwTG1SbGMyTnlhWEIwYjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmFHRnpSR1ZqYjNKaGRHOXljeWhsYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJoaGMwUmxZMjl5WVhSdmNuTW9iM1JvWlhJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSkVaV052Y21GMGIzSnpJR05oYmlkMElHSmxJSEJzWVdObFpDQnZiaUJrYVdabVpYSmxiblFnWVdOalpYTnpiM0p6SUhkcGRHZ2dabTl5SUZ3aUlDc2dYQ0owYUdVZ2MyRnRaU0J3Y205d1pYSjBlU0FvWENJZ0t5QmxiR1Z0Wlc1MExtdGxlU0FySUZ3aUtTNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNSb1pYSXVaR1ZqYjNKaGRHOXljeUE5SUdWc1pXMWxiblF1WkdWamIzSmhkRzl5Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyTnZZV3hsYzJObFIyVjBkR1Z5VTJWMGRHVnlLR1ZzWlcxbGJuUXNJRzkwYUdWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZDBWc1pXMWxiblJ6TG5CMWMyZ29aV3hsYldWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1bGQwVnNaVzFsYm5Sek8xeHVmVnh1Wm5WdVkzUnBiMjRnWDJoaGMwUmxZMjl5WVhSdmNuTW9aV3hsYldWdWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJHVnRaVzUwTG1SbFkyOXlZWFJ2Y25NZ0ppWWdaV3hsYldWdWRDNWtaV052Y21GMGIzSnpMbXhsYm1kMGFEdGNibjFjYm1aMWJtTjBhVzl1SUY5cGMwUmhkR0ZFWlhOamNtbHdkRzl5S0dSbGMyTXBJSHRjYmlBZ0lDQnlaWFIxY200Z1pHVnpZeUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JQ0VvWkdWell5NTJZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtJQ1ltSUdSbGMyTXVkM0pwZEdGaWJHVWdQVDA5SUhWdVpHVm1hVzVsWkNrN1hHNTlYRzVtZFc1amRHbHZiaUJmYVc1cGRHbGhiR2w2WlVOc1lYTnpSV3hsYldWdWRITW9SaXdnWld4bGJXVnVkSE1wSUh0Y2JpQWdJQ0IyWVhJZ2NISnZkRzhnUFNCR0xuQnliM1J2ZEhsd1pUdGNiaUFnSUNCYlhHNGdJQ0FnSUNBZ0lGd2liV1YwYUc5a1hDSXNYRzRnSUNBZ0lDQWdJRndpWm1sbGJHUmNJbHh1SUNBZ0lGMHVabTl5UldGamFDaG1kVzVqZEdsdmJpaHJhVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5SekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnNZV05sYldWdWRDQTlJR1ZzWlcxbGJuUXVjR3hoWTJWdFpXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUXVhMmx1WkNBOVBUMGdhMmx1WkNBbUppQW9jR3hoWTJWdFpXNTBJRDA5UFNCY0luTjBZWFJwWTF3aUlIeDhJSEJzWVdObGJXVnVkQ0E5UFQwZ1hDSndjbTkwYjNSNWNHVmNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZqWldsMlpYSWdQU0J3YkdGalpXMWxiblFnUFQwOUlGd2ljM1JoZEdsalhDSWdQeUJHSURvZ2NISnZkRzg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJSbFptbHVaVU5zWVhOelJXeGxiV1Z1ZENoeVpXTmxhWFpsY2l3Z1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVmVnh1Wm5WdVkzUnBiMjRnWDJsdWFYUnBZV3hwZW1WSmJuTjBZVzVqWlVWc1pXMWxiblJ6S0U4c0lHVnNaVzFsYm5SektTQjdYRzRnSUNBZ1cxeHVJQ0FnSUNBZ0lDQmNJbTFsZEdodlpGd2lMRnh1SUNBZ0lDQWdJQ0JjSW1acFpXeGtYQ0pjYmlBZ0lDQmRMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hMmx1WkNrZ2UxeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExtdHBibVFnUFQwOUlHdHBibVFnSmlZZ1pXeGxiV1Z1ZEM1d2JHRmpaVzFsYm5RZ1BUMDlJRndpYjNkdVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdWbWFXNWxRMnhoYzNORmJHVnRaVzUwS0U4c0lHVnNaVzFsYm5RcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibjFjYm1aMWJtTjBhVzl1SUY5a1pXWnBibVZEYkdGemMwVnNaVzFsYm5Rb2NtVmpaV2wyWlhJc0lHVnNaVzFsYm5RcElIdGNiaUFnSUNCMllYSWdaR1Z6WTNKcGNIUnZjaUE5SUdWc1pXMWxiblF1WkdWelkzSnBjSFJ2Y2p0Y2JpQWdJQ0JwWmlBb1pXeGxiV1Z1ZEM1cmFXNWtJRDA5UFNCY0ltWnBaV3hrWENJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdWFYUnBZV3hwZW1WeUlEMGdaV3hsYldWdWRDNXBibWwwYVdGc2FYcGxjanRjYmlBZ0lDQWdJQ0FnWkdWelkzSnBjSFJ2Y2lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHUmxjMk55YVhCMGIzSXVaVzUxYldWeVlXSnNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQmtaWE5qY21sd2RHOXlMbmR5YVhSaFlteGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUJrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJwYm1sMGFXRnNhWHBsY2lBOVBUMGdkbTlwWkNBd0lEOGdkbTlwWkNBd0lEb2dhVzVwZEdsaGJHbDZaWEl1WTJGc2JDaHlaV05sYVhabGNpbGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEpsWTJWcGRtVnlMQ0JsYkdWdFpXNTBMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzU5WEc1bWRXNWpkR2x2YmlCZlpHVmpiM0poZEdWRGJHRnpjeWhsYkdWdFpXNTBjeXdnWkdWamIzSmhkRzl5Y3lrZ2UxeHVJQ0FnSUhaaGNpQnVaWGRGYkdWdFpXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUhaaGNpQm1hVzVwYzJobGNuTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2NHeGhZMlZ0Wlc1MGN5QTlJSHRjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpPaUJiWFN4Y2JpQWdJQ0FnSUNBZ2NISnZkRzkwZVhCbE9pQmJYU3hjYmlBZ0lDQWdJQ0FnYjNkdU9pQmJYVnh1SUNBZ0lIMDdYRzRnSUNBZ1pXeGxiV1Z1ZEhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlobGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lGOWhaR1JGYkdWdFpXNTBVR3hoWTJWdFpXNTBLR1ZzWlcxbGJuUXNJSEJzWVdObGJXVnVkSE1wTzF4dUlDQWdJSDBwTzF4dUlDQWdJR1ZzWlcxbGJuUnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lWOW9ZWE5FWldOdmNtRjBiM0p6S0dWc1pXMWxiblFwS1NCeVpYUjFjbTRnYm1WM1JXeGxiV1Z1ZEhNdWNIVnphQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5SR2FXNXBjMmhsY25ORmVIUnlZWE1nUFNCZlpHVmpiM0poZEdWRmJHVnRaVzUwS0dWc1pXMWxiblFzSUhCc1lXTmxiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQnVaWGRGYkdWdFpXNTBjeTV3ZFhOb0tHVnNaVzFsYm5SR2FXNXBjMmhsY25ORmVIUnlZWE11Wld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUc1bGQwVnNaVzFsYm5SekxuQjFjMmd1WVhCd2JIa29ibVYzUld4bGJXVnVkSE1zSUdWc1pXMWxiblJHYVc1cGMyaGxjbk5GZUhSeVlYTXVaWGgwY21GektUdGNiaUFnSUNBZ0lDQWdabWx1YVhOb1pYSnpMbkIxYzJndVlYQndiSGtvWm1sdWFYTm9aWEp6TENCbGJHVnRaVzUwUm1sdWFYTm9aWEp6UlhoMGNtRnpMbVpwYm1semFHVnljeWs3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdhV1lnS0NGa1pXTnZjbUYwYjNKektTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwY3pvZ2JtVjNSV3hsYldWdWRITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXNXBjMmhsY25NNklHWnBibWx6YUdWeWMxeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdYMlJsWTI5eVlYUmxRMjl1YzNSeWRXTjBiM0lvYm1WM1JXeGxiV1Z1ZEhNc0lHUmxZMjl5WVhSdmNuTXBPMXh1SUNBZ0lHWnBibWx6YUdWeWN5NXdkWE5vTG1Gd2NHeDVLR1pwYm1semFHVnljeXdnY21WemRXeDBMbVpwYm1semFHVnljeWs3WEc0Z0lDQWdjbVZ6ZFd4MExtWnBibWx6YUdWeWN5QTlJR1pwYm1semFHVnljenRjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZWeHVablZ1WTNScGIyNGdYMkZrWkVWc1pXMWxiblJRYkdGalpXMWxiblFvWld4bGJXVnVkQ3dnY0d4aFkyVnRaVzUwY3l3Z2MybHNaVzUwS1NCN1hHNGdJQ0FnZG1GeUlHdGxlWE1nUFNCd2JHRmpaVzFsYm5SelcyVnNaVzFsYm5RdWNHeGhZMlZ0Wlc1MFhUdGNiaUFnSUNCcFppQW9JWE5wYkdWdWRDQW1KaUJyWlhsekxtbHVaR1Y0VDJZb1pXeGxiV1Z1ZEM1clpYa3BJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVJIVndiR2xqWVhSbFpDQmxiR1Z0Wlc1MElDaGNJaUFySUdWc1pXMWxiblF1YTJWNUlDc2dYQ0lwWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JyWlhsekxuQjFjMmdvWld4bGJXVnVkQzVyWlhrcE8xeHVmVnh1Wm5WdVkzUnBiMjRnWDJSbFkyOXlZWFJsUld4bGJXVnVkQ2hsYkdWdFpXNTBMQ0J3YkdGalpXMWxiblJ6S1NCN1hHNGdJQ0FnZG1GeUlHVjRkSEpoY3lBOUlGdGRPMXh1SUNBZ0lIWmhjaUJtYVc1cGMyaGxjbk1nUFNCYlhUdGNiaUFnSUNCbWIzSW9kbUZ5SUdSbFkyOXlZWFJ2Y25NZ1BTQmxiR1Z0Wlc1MExtUmxZMjl5WVhSdmNuTXNJR2tnUFNCa1pXTnZjbUYwYjNKekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dhUzB0S1h0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3RsZVhNZ1BTQndiR0ZqWlcxbGJuUnpXMlZzWlcxbGJuUXVjR3hoWTJWdFpXNTBYVHRjYmlBZ0lDQWdJQ0FnYTJWNWN5NXpjR3hwWTJVb2EyVjVjeTVwYm1SbGVFOW1LR1ZzWlcxbGJuUXVhMlY1S1N3Z01TazdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwVDJKcVpXTjBJRDBnWDJaeWIyMUZiR1Z0Wlc1MFJHVnpZM0pwY0hSdmNpaGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblJHYVc1cGMyaGxja1Y0ZEhKaGN5QTlJRjkwYjBWc1pXMWxiblJHYVc1cGMyaGxja1Y0ZEhKaGN5Z29NQ3dnWkdWamIzSmhkRzl5YzF0cFhTa29aV3hsYldWdWRFOWlhbVZqZENrZ2ZId2daV3hsYldWdWRFOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5RZ1BTQmxiR1Z0Wlc1MFJtbHVhWE5vWlhKRmVIUnlZWE11Wld4bGJXVnVkRHRjYmlBZ0lDQWdJQ0FnWDJGa1pFVnNaVzFsYm5SUWJHRmpaVzFsYm5Rb1pXeGxiV1Z1ZEN3Z2NHeGhZMlZ0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwUm1sdWFYTm9aWEpGZUhSeVlYTXVabWx1YVhOb1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBibWx6YUdWeWN5NXdkWE5vS0dWc1pXMWxiblJHYVc1cGMyaGxja1Y0ZEhKaGN5NW1hVzVwYzJobGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxkMFY0ZEhKaGN5QTlJR1ZzWlcxbGJuUkdhVzVwYzJobGNrVjRkSEpoY3k1bGVIUnlZWE03WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGRGZUhSeVlYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ2FpQTlJREE3SUdvZ1BDQnVaWGRGZUhSeVlYTXViR1Z1WjNSb095QnFLeXNwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5aFpHUkZiR1Z0Wlc1MFVHeGhZMlZ0Wlc1MEtHNWxkMFY0ZEhKaGMxdHFYU3dnY0d4aFkyVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlSFJ5WVhNdWNIVnphQzVoY0hCc2VTaGxlSFJ5WVhNc0lHNWxkMFY0ZEhKaGN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZERvZ1pXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ1ptbHVhWE5vWlhKek9pQm1hVzVwYzJobGNuTXNYRzRnSUNBZ0lDQWdJR1Y0ZEhKaGN6b2daWGgwY21GelhHNGdJQ0FnZlR0Y2JuMWNibVoxYm1OMGFXOXVJRjlrWldOdmNtRjBaVU52Ym5OMGNuVmpkRzl5S0dWc1pXMWxiblJ6TENCa1pXTnZjbUYwYjNKektTQjdYRzRnSUNBZ2RtRnlJR1pwYm1semFHVnljeUE5SUZ0ZE8xeHVJQ0FnSUdadmNpaDJZWElnYVNBOUlHUmxZMjl5WVhSdmNuTXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcGUxeHVJQ0FnSUNBZ0lDQjJZWElnYjJKcUlEMGdYMlp5YjIxRGJHRnpjMFJsYzJOeWFYQjBiM0lvWld4bGJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRITkJibVJHYVc1cGMyaGxjaUE5SUY5MGIwTnNZWE56UkdWelkzSnBjSFJ2Y2lnb01Dd2daR1ZqYjNKaGRHOXljMXRwWFNrb2IySnFLU0I4ZkNCdlltb3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZEhOQmJtUkdhVzVwYzJobGNpNW1hVzVwYzJobGNpQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVc1cGMyaGxjbk11Y0hWemFDaGxiR1Z0Wlc1MGMwRnVaRVpwYm1semFHVnlMbVpwYm1semFHVnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9aV3hsYldWdWRITkJibVJHYVc1cGMyaGxjaTVsYkdWdFpXNTBjeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwY3lBOUlHVnNaVzFsYm5SelFXNWtSbWx1YVhOb1pYSXVaV3hsYldWdWRITTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdvZ1BTQXdPeUJxSUR3Z1pXeGxiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01Uc2dhaXNyS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdzZ1BTQnFJQ3NnTVRzZ2F5QThJR1ZzWlcxbGJuUnpMbXhsYm1kMGFEc2dheXNyS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMWxiblJ6VzJwZExtdGxlU0E5UFQwZ1pXeGxiV1Z1ZEhOYmExMHVhMlY1SUNZbUlHVnNaVzFsYm5SelcycGRMbkJzWVdObGJXVnVkQ0E5UFQwZ1pXeGxiV1Z1ZEhOYmExMHVjR3hoWTJWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVJIVndiR2xqWVhSbFpDQmxiR1Z0Wlc1MElDaGNJaUFySUdWc1pXMWxiblJ6VzJwZExtdGxlU0FySUZ3aUtWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBjem9nWld4bGJXVnVkSE1zWEc0Z0lDQWdJQ0FnSUdacGJtbHphR1Z5Y3pvZ1ptbHVhWE5vWlhKelhHNGdJQ0FnZlR0Y2JuMWNibVoxYm1OMGFXOXVJRjltY205dFJXeGxiV1Z1ZEVSbGMyTnlhWEIwYjNJb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUhaaGNpQnZZbW9nUFNCN1hHNGdJQ0FnSUNBZ0lHdHBibVE2SUdWc1pXMWxiblF1YTJsdVpDeGNiaUFnSUNBZ0lDQWdhMlY1T2lCbGJHVnRaVzUwTG10bGVTeGNiaUFnSUNBZ0lDQWdjR3hoWTJWdFpXNTBPaUJsYkdWdFpXNTBMbkJzWVdObGJXVnVkQ3hjYmlBZ0lDQWdJQ0FnWkdWelkzSnBjSFJ2Y2pvZ1pXeGxiV1Z1ZEM1a1pYTmpjbWx3ZEc5eVhHNGdJQ0FnZlR0Y2JpQWdJQ0IyWVhJZ1pHVnpZeUE5SUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ3aVJHVnpZM0pwY0hSdmNsd2lMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1ZjYmlBZ0lDQjlPMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2WW1vc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2daR1Z6WXlrN1hHNGdJQ0FnYVdZZ0tHVnNaVzFsYm5RdWEybHVaQ0E5UFQwZ1hDSm1hV1ZzWkZ3aUtTQnZZbW91YVc1cGRHbGhiR2w2WlhJZ1BTQmxiR1Z0Wlc1MExtbHVhWFJwWVd4cGVtVnlPMXh1SUNBZ0lISmxkSFZ5YmlCdlltbzdYRzU5WEc1bWRXNWpkR2x2YmlCZmRHOUZiR1Z0Wlc1MFJHVnpZM0pwY0hSdmNuTW9aV3hsYldWdWRFOWlhbVZqZEhNcElIdGNiaUFnSUNCcFppQW9aV3hsYldWdWRFOWlhbVZqZEhNZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnY21WMGRYSnVPMXh1SUNBZ0lISmxkSFZ5YmlBb01Dd2dYM1J2UVhKeVlYa3BMbVJsWm1GMWJIUW9aV3hsYldWdWRFOWlhbVZqZEhNcExtMWhjQ2htZFc1amRHbHZiaWhsYkdWdFpXNTBUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ1gzUnZSV3hsYldWdWRFUmxjMk55YVhCMGIzSW9aV3hsYldWdWRFOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lGOWthWE5oYkd4dmQxQnliM0JsY25SNUtHVnNaVzFsYm5SUFltcGxZM1FzSUZ3aVptbHVhWE5vWlhKY0lpd2dYQ0pCYmlCbGJHVnRaVzUwSUdSbGMyTnlhWEIwYjNKY0lpazdYRzRnSUNBZ0lDQWdJRjlrYVhOaGJHeHZkMUJ5YjNCbGNuUjVLR1ZzWlcxbGJuUlBZbXBsWTNRc0lGd2laWGgwY21GelhDSXNJRndpUVc0Z1pXeGxiV1Z1ZENCa1pYTmpjbWx3ZEc5eVhDSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnSUNCOUtUdGNibjFjYm1aMWJtTjBhVzl1SUY5MGIwVnNaVzFsYm5SRVpYTmpjbWx3ZEc5eUtHVnNaVzFsYm5SUFltcGxZM1FwSUh0Y2JpQWdJQ0IyWVhJZ2EybHVaQ0E5SUZOMGNtbHVaeWhsYkdWdFpXNTBUMkpxWldOMExtdHBibVFwTzF4dUlDQWdJR2xtSUNocmFXNWtJQ0U5UFNCY0ltMWxkR2h2WkZ3aUlDWW1JR3RwYm1RZ0lUMDlJRndpWm1sbGJHUmNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEJiaUJsYkdWdFpXNTBJR1JsYzJOeWFYQjBiM0pjWENkeklDNXJhVzVrSUhCeWIzQmxjblI1SUcxMWMzUWdZbVVnWldsMGFHVnlJRndpYldWMGFHOWtYQ0lnYjNJbklDc2dKeUJjSW1acFpXeGtYQ0lzSUdKMWRDQmhJR1JsWTI5eVlYUnZjaUJqY21WaGRHVmtJR0Z1SUdWc1pXMWxiblFnWkdWelkzSnBjSFJ2Y2lCM2FYUm9KeUFySUNjZ0xtdHBibVFnWENJbklDc2dhMmx1WkNBcklDZGNJaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYTJWNUlEMGdLREFzSUY5MGIxQnliM0JsY25SNVMyVjVLUzVrWldaaGRXeDBLR1ZzWlcxbGJuUlBZbXBsWTNRdWEyVjVLVHRjYmlBZ0lDQjJZWElnY0d4aFkyVnRaVzUwSUQwZ1UzUnlhVzVuS0dWc1pXMWxiblJQWW1wbFkzUXVjR3hoWTJWdFpXNTBLVHRjYmlBZ0lDQnBaaUFvY0d4aFkyVnRaVzUwSUNFOVBTQmNJbk4wWVhScFkxd2lJQ1ltSUhCc1lXTmxiV1Z1ZENBaFBUMGdYQ0p3Y205MGIzUjVjR1ZjSWlBbUppQndiR0ZqWlcxbGJuUWdJVDA5SUZ3aWIzZHVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RVzRnWld4bGJXVnVkQ0JrWlhOamNtbHdkRzl5WEZ3bmN5QXVjR3hoWTJWdFpXNTBJSEJ5YjNCbGNuUjVJRzExYzNRZ1ltVWdiMjVsSUc5bUlGd2ljM1JoZEdsalhDSXNKeUFySUNjZ1hDSndjbTkwYjNSNWNHVmNJaUJ2Y2lCY0ltOTNibHdpTENCaWRYUWdZU0JrWldOdmNtRjBiM0lnWTNKbFlYUmxaQ0JoYmlCbGJHVnRaVzUwSUdSbGMyTnlhWEIwYjNJbklDc2dKeUIzYVhSb0lDNXdiR0ZqWlcxbGJuUWdYQ0luSUNzZ2NHeGhZMlZ0Wlc1MElDc2dKMXdpSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCa1pYTmpjbWx3ZEc5eUlEMGdaV3hsYldWdWRFOWlhbVZqZEM1a1pYTmpjbWx3ZEc5eU8xeHVJQ0FnSUY5a2FYTmhiR3h2ZDFCeWIzQmxjblI1S0dWc1pXMWxiblJQWW1wbFkzUXNJRndpWld4bGJXVnVkSE5jSWl3Z1hDSkJiaUJsYkdWdFpXNTBJR1JsYzJOeWFYQjBiM0pjSWlrN1hHNGdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQjdYRzRnSUNBZ0lDQWdJR3RwYm1RNklHdHBibVFzWEc0Z0lDQWdJQ0FnSUd0bGVUb2dhMlY1TEZ4dUlDQWdJQ0FnSUNCd2JHRmpaVzFsYm5RNklIQnNZV05sYldWdWRDeGNiaUFnSUNBZ0lDQWdaR1Z6WTNKcGNIUnZjam9nVDJKcVpXTjBMbUZ6YzJsbmJpaDdYRzRnSUNBZ0lDQWdJSDBzSUdSbGMyTnlhWEIwYjNJcFhHNGdJQ0FnZlR0Y2JpQWdJQ0JwWmlBb2EybHVaQ0FoUFQwZ1hDSm1hV1ZzWkZ3aUtTQjdYRzRnSUNBZ0lDQWdJRjlrYVhOaGJHeHZkMUJ5YjNCbGNuUjVLR1ZzWlcxbGJuUlBZbXBsWTNRc0lGd2lhVzVwZEdsaGJHbDZaWEpjSWl3Z1hDSkJJRzFsZEdodlpDQmtaWE5qY21sd2RHOXlYQ0lwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRjlrYVhOaGJHeHZkMUJ5YjNCbGNuUjVLR1JsYzJOeWFYQjBiM0lzSUZ3aVoyVjBYQ0lzSUZ3aVZHaGxJSEJ5YjNCbGNuUjVJR1JsYzJOeWFYQjBiM0lnYjJZZ1lTQm1hV1ZzWkNCa1pYTmpjbWx3ZEc5eVhDSXBPMXh1SUNBZ0lDQWdJQ0JmWkdsellXeHNiM2RRY205d1pYSjBlU2hrWlhOamNtbHdkRzl5TENCY0luTmxkRndpTENCY0lsUm9aU0J3Y205d1pYSjBlU0JrWlhOamNtbHdkRzl5SUc5bUlHRWdabWxsYkdRZ1pHVnpZM0pwY0hSdmNsd2lLVHRjYmlBZ0lDQWdJQ0FnWDJScGMyRnNiRzkzVUhKdmNHVnlkSGtvWkdWelkzSnBjSFJ2Y2l3Z1hDSjJZV3gxWlZ3aUxDQmNJbFJvWlNCd2NtOXdaWEowZVNCa1pYTmpjbWx3ZEc5eUlHOW1JR0VnWm1sbGJHUWdaR1Z6WTNKcGNIUnZjbHdpS1R0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1cGJtbDBhV0ZzYVhwbGNpQTlJR1ZzWlcxbGJuUlBZbXBsWTNRdWFXNXBkR2xoYkdsNlpYSTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1gzUnZSV3hsYldWdWRFWnBibWx6YUdWeVJYaDBjbUZ6S0dWc1pXMWxiblJQWW1wbFkzUXBJSHRjYmlBZ0lDQjJZWElnWld4bGJXVnVkQ0E5SUY5MGIwVnNaVzFsYm5SRVpYTmpjbWx3ZEc5eUtHVnNaVzFsYm5SUFltcGxZM1FwTzF4dUlDQWdJSFpoY2lCbWFXNXBjMmhsY2lBOUlGOXZjSFJwYjI1aGJFTmhiR3hoWW14bFVISnZjR1Z5ZEhrb1pXeGxiV1Z1ZEU5aWFtVmpkQ3dnWENKbWFXNXBjMmhsY2x3aUtUdGNiaUFnSUNCMllYSWdaWGgwY21GeklEMGdYM1J2Uld4bGJXVnVkRVJsYzJOeWFYQjBiM0p6S0dWc1pXMWxiblJQWW1wbFkzUXVaWGgwY21GektUdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwT2lCbGJHVnRaVzUwTEZ4dUlDQWdJQ0FnSUNCbWFXNXBjMmhsY2pvZ1ptbHVhWE5vWlhJc1hHNGdJQ0FnSUNBZ0lHVjRkSEpoY3pvZ1pYaDBjbUZ6WEc0Z0lDQWdmVHRjYm4xY2JtWjFibU4wYVc5dUlGOW1jbTl0UTJ4aGMzTkVaWE5qY21sd2RHOXlLR1ZzWlcxbGJuUnpLU0I3WEc0Z0lDQWdkbUZ5SUc5aWFpQTlJSHRjYmlBZ0lDQWdJQ0FnYTJsdVpEb2dYQ0pqYkdGemMxd2lMRnh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBjem9nWld4bGJXVnVkSE11YldGd0tGOW1jbTl0Uld4bGJXVnVkRVJsYzJOeWFYQjBiM0lwWEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnWkdWell5QTlJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJRndpUkdWelkzSnBjSFJ2Y2x3aUxGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVmNiaUFnSUNCOU8xeHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZZbW9zSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnl3Z1pHVnpZeWs3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhanRjYm4xY2JtWjFibU4wYVc5dUlGOTBiME5zWVhOelJHVnpZM0pwY0hSdmNpaHZZbW9wSUh0Y2JpQWdJQ0IyWVhJZ2EybHVaQ0E5SUZOMGNtbHVaeWh2WW1vdWEybHVaQ2s3WEc0Z0lDQWdhV1lnS0d0cGJtUWdJVDA5SUZ3aVkyeGhjM05jSWlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RCSUdOc1lYTnpJR1JsYzJOeWFYQjBiM0pjWENkeklDNXJhVzVrSUhCeWIzQmxjblI1SUcxMWMzUWdZbVVnWENKamJHRnpjMXdpTENCaWRYUWdZU0JrWldOdmNtRjBiM0luSUNzZ0p5QmpjbVZoZEdWa0lHRWdZMnhoYzNNZ1pHVnpZM0pwY0hSdmNpQjNhWFJvSUM1cmFXNWtJRndpSnlBcklHdHBibVFnS3lBblhDSW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ1gyUnBjMkZzYkc5M1VISnZjR1Z5ZEhrb2IySnFMQ0JjSW10bGVWd2lMQ0JjSWtFZ1kyeGhjM01nWkdWelkzSnBjSFJ2Y2x3aUtUdGNiaUFnSUNCZlpHbHpZV3hzYjNkUWNtOXdaWEowZVNodlltb3NJRndpY0d4aFkyVnRaVzUwWENJc0lGd2lRU0JqYkdGemN5QmtaWE5qY21sd2RHOXlYQ0lwTzF4dUlDQWdJRjlrYVhOaGJHeHZkMUJ5YjNCbGNuUjVLRzlpYWl3Z1hDSmtaWE5qY21sd2RHOXlYQ0lzSUZ3aVFTQmpiR0Z6Y3lCa1pYTmpjbWx3ZEc5eVhDSXBPMXh1SUNBZ0lGOWthWE5oYkd4dmQxQnliM0JsY25SNUtHOWlhaXdnWENKcGJtbDBhV0ZzYVhwbGNsd2lMQ0JjSWtFZ1kyeGhjM01nWkdWelkzSnBjSFJ2Y2x3aUtUdGNiaUFnSUNCZlpHbHpZV3hzYjNkUWNtOXdaWEowZVNodlltb3NJRndpWlhoMGNtRnpYQ0lzSUZ3aVFTQmpiR0Z6Y3lCa1pYTmpjbWx3ZEc5eVhDSXBPMXh1SUNBZ0lIWmhjaUJtYVc1cGMyaGxjaUE5SUY5dmNIUnBiMjVoYkVOaGJHeGhZbXhsVUhKdmNHVnlkSGtvYjJKcUxDQmNJbVpwYm1semFHVnlYQ0lwTzF4dUlDQWdJSFpoY2lCbGJHVnRaVzUwY3lBOUlGOTBiMFZzWlcxbGJuUkVaWE5qY21sd2RHOXljeWh2WW1vdVpXeGxiV1Z1ZEhNcE8xeHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUdWc1pXMWxiblJ6T2lCbGJHVnRaVzUwY3l4Y2JpQWdJQ0FnSUNBZ1ptbHVhWE5vWlhJNklHWnBibWx6YUdWeVhHNGdJQ0FnZlR0Y2JuMWNibVoxYm1OMGFXOXVJRjlrYVhOaGJHeHZkMUJ5YjNCbGNuUjVLRzlpYWl3Z2JtRnRaU3dnYjJKcVpXTjBWSGx3WlNrZ2UxeHVJQ0FnSUdsbUlDaHZZbXBiYm1GdFpWMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRzlpYW1WamRGUjVjR1VnS3lCY0lpQmpZVzRuZENCb1lYWmxJR0VnTGx3aUlDc2dibUZ0WlNBcklGd2lJSEJ5YjNCbGNuUjVMbHdpS1R0Y2JpQWdJQ0I5WEc1OVhHNW1kVzVqZEdsdmJpQmZiM0IwYVc5dVlXeERZV3hzWVdKc1pWQnliM0JsY25SNUtHOWlhaXdnYm1GdFpTa2dlMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJRzlpYWx0dVlXMWxYVHRjYmlBZ0lDQnBaaUFvZG1Gc2RXVWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBlWEJsYjJZZ2RtRnNkV1VnSVQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lSWGh3WldOMFpXUWdKMXdpSUNzZ2JtRnRaU0FySUZ3aUp5QjBieUJpWlNCaElHWjFibU4wYVc5dVhDSXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzU5WEc1bWRXNWpkR2x2YmlCZmNuVnVRMnhoYzNOR2FXNXBjMmhsY25Nb1kyOXVjM1J5ZFdOMGIzSXNJR1pwYm1semFHVnljeWtnZTF4dUlDQWdJR1p2Y2loMllYSWdhU0E5SURBN0lHa2dQQ0JtYVc1cGMyaGxjbk11YkdWdVozUm9PeUJwS3lzcGUxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1EyOXVjM1J5ZFdOMGIzSWdQU0FvTUN3Z1ptbHVhWE5vWlhKelcybGRLU2hqYjI1emRISjFZM1J2Y2lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1WlhkRGIyNXpkSEoxWTNSdmNpQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1bGQwTnZibk4wY25WamRHOXlJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVJtbHVhWE5vWlhKeklHMTFjM1FnY21WMGRYSnVJR0VnWTI5dWMzUnlkV04wYjNJdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUnlkV04wYjNJZ1BTQnVaWGREYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZMjl1YzNSeWRXTjBiM0k3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjlrWldaaGRXeDBjenRjYm1aMWJtTjBhVzl1SUY5a1pXWmhkV3gwY3lodlltb3NJR1JsWm1GMWJIUnpLU0I3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhrWldaaGRXeDBjeWs3WEc0Z0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR3RsZVhNdWJHVnVaM1JvT3lCcEt5c3BlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhrWldaaGRXeDBjeXdnYTJWNUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxJQ1ltSUhaaGJIVmxMbU52Ym1acFozVnlZV0pzWlNBbUppQnZZbXBiYTJWNVhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2IySnFMQ0JyWlhrc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiMkpxTzF4dWZWeHVJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JmWkdWbWFXNWxSVzUxYldWeVlXSnNaVkJ5YjNCbGNuUnBaWE03WEc1bWRXNWpkR2x2YmlCZlpHVm1hVzVsUlc1MWJXVnlZV0pzWlZCeWIzQmxjblJwWlhNb2IySnFMQ0JrWlhOamN5a2dlMXh1SUNBZ0lHWnZjaWgyWVhJZ2EyVjVJR2x1SUdSbGMyTnpLWHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxjMk1nUFNCa1pYTmpjMXRyWlhsZE8xeHVJQ0FnSUNBZ0lDQmtaWE5qTG1OdmJtWnBaM1Z5WVdKc1pTQTlJR1JsYzJNdVpXNTFiV1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjSW5aaGJIVmxYQ0lnYVc0Z1pHVnpZeWtnWkdWell5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2WW1vc0lHdGxlU3dnWkdWell5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZZbXBsWTNSVGVXMWliMnh6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aGtaWE5qY3lrN1hHNGdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ2FTQTlJREE3SUdrZ1BDQnZZbXBsWTNSVGVXMWliMnh6TG14bGJtZDBhRHNnYVNzcktYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnplVzBnUFNCdlltcGxZM1JUZVcxaWIyeHpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSbGMyTWdQU0JrWlhOamMxdHplVzFkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1Z6WXk1amIyNW1hV2QxY21GaWJHVWdQU0JrWlhOakxtVnVkVzFsY21GaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGd2lkbUZzZFdWY0lpQnBiaUJrWlhOaktTQmtaWE5qTG5keWFYUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2WW1vc0lITjViU3dnWkdWell5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc5aWFqdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyUmxabWx1WlZCeWIzQmxjblI1TzF4dVpuVnVZM1JwYjI0Z1gyUmxabWx1WlZCeWIzQmxjblI1S0c5aWFpd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNoclpYa2dhVzRnYjJKcUtTQjdYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJR3RsZVN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJRzlpYWx0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5bGVIUmxibVJ6TzF4dVpuVnVZM1JwYjI0Z1pYaDBaVzVrYzE4b0tTQjdYRzRnSUNBZ1pYaDBaVzVrYzE4Z1BTQlBZbXBsWTNRdVlYTnphV2R1SUh4OElHWjFibU4wYVc5dUtIUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlHa2dQU0F4T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlVnUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUd0bGVTQnBiaUJ6YjNWeVkyVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2MyOTFjbU5sTENCclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZ0clpYbGRJRDBnYzI5MWNtTmxXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z1pYaDBaVzVrYzE4dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYm4xY2JtWjFibU4wYVc5dUlGOWxlSFJsYm1SektDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGVIUmxibVJ6WHk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZaMlYwTzF4dWRtRnlJRjl6ZFhCbGNsQnliM0JDWVhObElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aUxpOWZjM1Z3WlhKZmNISnZjRjlpWVhObFhDSXBLVHRjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUh0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2IySnFYRzRnSUNBZ2ZUdGNibjFjYm1aMWJtTjBhVzl1SUdkbGRDaDBZWEpuWlhRc0lIQnliM0JsY25SNUxDQnlaV05sYVhabGNpa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdVbVZtYkdWamRDQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQW1KaUJTWldac1pXTjBMbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQm5aWFFnUFNCU1pXWnNaV04wTG1kbGREdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCblpYUWdQU0JtZFc1amRHbHZiaUJuWlhReEtIUmhjbWRsZERFc0lIQnliM0JsY25SNU1Td2djbVZqWldsMlpYSXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWW1GelpTQTlJQ2d3TENCZmMzVndaWEpRY205d1FtRnpaU2t1WkdWbVlYVnNkQ2gwWVhKblpYUXhMQ0J3Y205d1pYSjBlVEVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaVlYTmxLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1Z6WXlBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvWW1GelpTd2djSEp2Y0dWeWRIa3hLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWlhOakxtZGxkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWlhOakxtZGxkQzVqWVd4c0tISmxZMlZwZG1WeU1TQjhmQ0IwWVhKblpYUXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrWlhOakxuWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaMlYwS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGtzSUhKbFkyVnBkbVZ5S1R0Y2JuMWNibVoxYm1OMGFXOXVJRjluWlhRb2RHRnlaMlYwTENCd2NtOXdaWEowZVN3Z2NtVmphV1YyWlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnWjJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrc0lISmxZMmxsZG1WeUtUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyZGxkRkJ5YjNSdmRIbHdaVTltTzF4dVpuVnVZM1JwYjI0Z1oyVjBVSEp2ZEc5MGVYQmxUMllvYnlrZ2UxeHVJQ0FnSUdkbGRGQnliM1J2ZEhsd1pVOW1JRDBnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUlEOGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltSURvZ1puVnVZM1JwYjI0Z1oyVjBVSEp2ZEc5MGVYQmxUMll4S0c4eEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnZNUzVmWDNCeWIzUnZYMThnZkh3Z1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LRzh4S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQm5aWFJRY205MGIzUjVjR1ZQWmlodktUdGNibjFjYm1aMWJtTjBhVzl1SUY5blpYUlFjbTkwYjNSNWNHVlBaaWh2S1NCN1hHNGdJQ0FnY21WMGRYSnVJR2RsZEZCeWIzUnZkSGx3WlU5bUtHOHBPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZhVzVvWlhKcGRITTdYRzUyWVhJZ1gzTmxkRkJ5YjNSdmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmMyVjBYM0J5YjNSdmRIbHdaVjl2Wmx3aUtTazdYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc5aWFseHVJQ0FnSUgwN1hHNTlYRzVtZFc1amRHbHZiaUJmYVc1b1pYSnBkSE1vYzNWaVEyeGhjM01zSUhOMWNHVnlRMnhoYzNNcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITjFjR1Z5UTJ4aGMzTWdJVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ6ZFhCbGNrTnNZWE56SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pUZFhCbGNpQmxlSEJ5WlhOemFXOXVJRzExYzNRZ1pXbDBhR1Z5SUdKbElHNTFiR3dnYjNJZ1lTQm1kVzVqZEdsdmJsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ2MzVmlRMnhoYzNNdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoemRYQmxja05zWVhOeklDWW1JSE4xY0dWeVEyeGhjM011Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wY25WamRHOXlPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2MzVmlRMnhoYzNNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZZ0tITjFjR1Z5UTJ4aGMzTXBJQ2d3TENCZmMyVjBVSEp2ZEc5MGVYQmxUMllwTG1SbFptRjFiSFFvYzNWaVEyeGhjM01zSUhOMWNHVnlRMnhoYzNNcE8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmFXNW9aWEpwZEhOTWIyOXpaVHRjYm1aMWJtTjBhVzl1SUY5cGJtaGxjbWwwYzB4dmIzTmxLSE4xWWtOc1lYTnpMQ0J6ZFhCbGNrTnNZWE56S1NCN1hHNGdJQ0FnYzNWaVEyeGhjM011Y0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h6ZFhCbGNrTnNZWE56TG5CeWIzUnZkSGx3WlNrN1hHNGdJQ0FnYzNWaVEyeGhjM011Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdjM1ZpUTJ4aGMzTTdYRzRnSUNBZ2MzVmlRMnhoYzNNdVgxOXdjbTkwYjE5ZklEMGdjM1Z3WlhKRGJHRnpjenRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMmx1YVhScFlXeHBlbVZ5UkdWbWFXNWxVSEp2Y0dWeWRIazdYRzVtZFc1amRHbHZiaUJmYVc1cGRHbGhiR2w2WlhKRVpXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNJSEJ5YjNCbGNuUjVMQ0JrWlhOamNtbHdkRzl5TENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnYVdZZ0tDRmtaWE5qY21sd2RHOXlLU0J5WlhSMWNtNDdYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2djSEp2Y0dWeWRIa3NJSHRjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1pHVnpZM0pwY0hSdmNpNWxiblZ0WlhKaFlteGxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklHUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhZbXhsTEZ4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ1pHVnpZM0pwY0hSdmNpNTNjbWwwWVdKc1pTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklHUmxjMk55YVhCMGIzSXVhVzVwZEdsaGJHbDZaWElnUHlCa1pYTmpjbWx3ZEc5eUxtbHVhWFJwWVd4cGVtVnlMbU5oYkd3b1kyOXVkR1Y0ZENrZ09pQjJiMmxrSURCY2JpQWdJQ0I5S1R0Y2JuMWNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWDJsdWFYUnBZV3hwZW1WeVYyRnlibWx1WjBobGJIQmxjanRjYm1aMWJtTjBhVzl1SUY5cGJtbDBhV0ZzYVhwbGNsZGhjbTVwYm1kSVpXeHdaWElvWkdWelkzSnBjSFJ2Y2l3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUkdWamIzSmhkR2x1WnlCamJHRnpjeUJ3Y205d1pYSjBlU0JtWVdsc1pXUXVJRkJzWldGelpTQmxibk4xY21VZ2RHaGhkQ0FuSUNzZ0ozQnliM0J2YzJGc0xXTnNZWE56TFhCeWIzQmxjblJwWlhNZ2FYTWdaVzVoWW14bFpDQmhibVFnYzJWMElIUnZJSFZ6WlNCc2IyOXpaU0J0YjJSbExpQW5JQ3NnSjFSdklIVnpaU0J3Y205d2IzTmhiQzFqYkdGemN5MXdjbTl3WlhKMGFXVnpJR2x1SUhOd1pXTWdiVzlrWlNCM2FYUm9JR1JsWTI5eVlYUnZjbk1zSUhkaGFYUWdabTl5SUNjZ0t5QW5kR2hsSUc1bGVIUWdiV0ZxYjNJZ2RtVnljMmx2YmlCdlppQmtaV052Y21GMGIzSnpJR2x1SUhOMFlXZGxJREl1SnlrN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5cGJuTjBZVzVqWlc5bU1UdGNibVoxYm1OMGFXOXVJRjlwYm5OMFlXNWpaVzltS0d4bFpuUXNJSEpwWjJoMEtTQjdYRzRnSUNBZ2FXWWdLSEpwWjJoMElDRTlJRzUxYkd3Z0ppWWdkSGx3Wlc5bUlGTjViV0p2YkNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQnlhV2RvZEZ0VGVXMWliMnd1YUdGelNXNXpkR0Z1WTJWZEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlhV2RvZEZ0VGVXMWliMnd1YUdGelNXNXpkR0Z1WTJWZEtHeGxablFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNaV1owSUdsdWMzUmhibU5sYjJZZ2NtbG5hSFE3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z1gybHVjM1JoYm1ObGIyWXhLR3hsWm5Rc0lISnBaMmgwS1NCN1hHNGdJQ0FnYVdZZ0tISnBaMmgwSUNFOUlHNTFiR3dnSmlZZ2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCeWFXZG9kRnRUZVcxaWIyd3VhR0Z6U1c1emRHRnVZMlZkS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeWFXZG9kRnRUZVcxaWIyd3VhR0Z6U1c1emRHRnVZMlZkS0d4bFpuUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmFXNXpkR0Z1WTJWdlppaHNaV1owTENCeWFXZG9kQ2s3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTzF4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2UxeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnZZbXBjYmlBZ0lDQjlPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkR0Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprS0c5aWFpa2dlMXh1SUNBZ0lHbG1JQ2h2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhanRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1QySnFJRDBnZTF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjJKcUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnYTJWNUlHbHVJRzlpYWlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1vc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSbGMyTWdQU0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrZ0ppWWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lBL0lFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvYjJKcUxDQnJaWGtwSURvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWell5NW5aWFFnZkh3Z1pHVnpZeTV6WlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h1WlhkUFltb3NJR3RsZVN3Z1pHVnpZeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYZFBZbXBiYTJWNVhTQTlJRzlpYWx0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHNWxkMDlpYWk1a1pXWmhkV3gwSUQwZ2IySnFPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzVDJKcU8xeHVJQ0FnSUgxY2JuMWNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWDJselRtRjBhWFpsUm5WdVkzUnBiMjQ3WEc1bWRXNWpkR2x2YmlCZmFYTk9ZWFJwZG1WR2RXNWpkR2x2YmlobWJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCR2RXNWpkR2x2Ymk1MGIxTjBjbWx1Wnk1allXeHNLR1p1S1M1cGJtUmxlRTltS0Z3aVcyNWhkR2wyWlNCamIyUmxYVndpS1NBaFBUMGdMVEU3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjlwYzA1aGRHbDJaVkpsWm14bFkzUkRiMjV6ZEhKMVkzUTdYRzVtZFc1amRHbHZiaUJmYVhOT1lYUnBkbVZTWldac1pXTjBRMjl1YzNSeWRXTjBLQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUI4ZkNBaFVtVm1iR1ZqZEM1amIyNXpkSEoxWTNRcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvVW1WbWJHVmpkQzVqYjI1emRISjFZM1F1YzJoaGJTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnVUhKdmVIa2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1FtOXZiR1ZoYmk1d2NtOTBiM1I1Y0dVdWRtRnNkV1ZQWmk1allXeHNLRkpsWm14bFkzUXVZMjl1YzNSeWRXTjBLRUp2YjJ4bFlXNHNJRnRkTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjlwZEdWeVlXSnNaVlJ2UVhKeVlYazdYRzVtZFc1amRHbHZiaUJmYVhSbGNtRmliR1ZVYjBGeWNtRjVLR2wwWlhJcElIdGNiaUFnSUNCcFppQW9VM2x0WW05c0xtbDBaWEpoZEc5eUlHbHVJRTlpYW1WamRDaHBkR1Z5S1NCOGZDQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvYVhSbGNpa2dQVDA5SUZ3aVcyOWlhbVZqZENCQmNtZDFiV1Z1ZEhOZFhDSXBJSEpsZEhWeWJpQkJjbkpoZVM1bWNtOXRLR2wwWlhJcE8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmFYUmxjbUZpYkdWVWIwRnljbUY1VEdsdGFYUTdYRzVtZFc1amRHbHZiaUJmYVhSbGNtRmliR1ZVYjBGeWNtRjVUR2x0YVhRb1lYSnlMQ0JwS1NCN1hHNGdJQ0FnZG1GeUlGOWhjbklnUFNCYlhUdGNiaUFnSUNCMllYSWdYMjRnUFNCMGNuVmxPMXh1SUNBZ0lIWmhjaUJmWkNBOUlHWmhiSE5sTzF4dUlDQWdJSFpoY2lCZlpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCbWIzSW9kbUZ5SUY5cElEMGdZWEp5VzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1N3Z1gzTTdJQ0VvWDI0Z1BTQW9YM01nUFNCZmFTNXVaWGgwS0NrcExtUnZibVVwT3lCZmJpQTlJSFJ5ZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDJGeWNpNXdkWE5vS0Y5ekxuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElDWW1JRjloY25JdWJHVnVaM1JvSUQwOVBTQnBLU0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCZlpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lGOWxJRDBnWlhKeU8xeHVJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDI0Z0ppWWdYMmxiWENKeVpYUjFjbTVjSWwwZ0lUMGdiblZzYkNrZ1gybGJYQ0p5WlhSMWNtNWNJbDBvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOWtLU0IwYUhKdmR5QmZaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1gyRnljanRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYMmwwWlhKaFlteGxWRzlCY25KaGVVeHBiV2wwVEc5dmMyVTdYRzVtZFc1amRHbHZiaUJmYVhSbGNtRmliR1ZVYjBGeWNtRjVUR2x0YVhSTWIyOXpaU2hoY25Jc0lHa3BJSHRjYmlBZ0lDQjJZWElnWDJGeWNpQTlJRnRkTzF4dUlDQWdJR1p2Y2loMllYSWdYMmwwWlhKaGRHOXlJRDBnWVhKeVcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM04wWlhBN0lDRW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsT3lsN1hHNGdJQ0FnSUNBZ0lGOWhjbkl1Y0hWemFDaGZjM1JsY0M1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBJQ1ltSUY5aGNuSXViR1Z1WjNSb0lEMDlQU0JwS1NCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUY5aGNuSTdYRzU5WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNBZ0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlGOWpjbVZoZEdWU1lYZFNaV0ZqZEVWc1pXMWxiblE3WEc1MllYSWdVa1ZCUTFSZlJVeEZUVVZPVkY5VVdWQkZPMXh1Wm5WdVkzUnBiMjRnWDJOeVpXRjBaVkpoZDFKbFlXTjBSV3hsYldWdWRDaDBlWEJsTENCd2NtOXdjeXdnYTJWNUxDQmphR2xzWkhKbGJpa2dlMXh1SUNBZ0lHbG1JQ2doVWtWQlExUmZSVXhGVFVWT1ZGOVVXVkJGS1NCN1hHNGdJQ0FnSUNBZ0lGSkZRVU5VWDBWTVJVMUZUbFJmVkZsUVJTQTlJSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlBbUppQlRlVzFpYjJ3dVptOXlJQ1ltSUZONWJXSnZiQzVtYjNJb1hDSnlaV0ZqZEM1bGJHVnRaVzUwWENJcElIeDhJRFl3TVRBek8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnZEhsd1pTQW1KaUIwZVhCbExtUmxabUYxYkhSUWNtOXdjenRjYmlBZ0lDQjJZWElnWTJocGJHUnlaVzVNWlc1bmRHZ2dQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTXp0Y2JpQWdJQ0JwWmlBb0lYQnliM0J6SUNZbUlHTm9hV3hrY21WdVRHVnVaM1JvSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhCeWIzQnpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNDZJSFp2YVdRZ01GeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jSEp2Y0hNZ0ppWWdaR1ZtWVhWc2RGQnliM0J6S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ2NISnZjRTVoYldVZ2FXNGdaR1ZtWVhWc2RGQnliM0J6S1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOXdjMXR3Y205d1RtRnRaVjBnUFQwOUlIWnZhV1FnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6VzNCeWIzQk9ZVzFsWFNBOUlHUmxabUYxYkhSUWNtOXdjMXR3Y205d1RtRnRaVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0Z3Y205d2N5a2dlMXh1SUNBZ0lDQWdJQ0J3Y205d2N5QTlJR1JsWm1GMWJIUlFjbTl3Y3lCOGZDQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hqYUdsc1pISmxia3hsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQndjbTl3Y3k1amFHbHNaSEpsYmlBOUlHTm9hV3hrY21WdU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyaHBiR1J5Wlc1TVpXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCamFHbHNaRUZ5Y21GNUlEMGdibVYzSUVGeWNtRjVLR05vYVd4a2NtVnVUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR05vYVd4a2NtVnVUR1Z1WjNSb095QnBLeXNwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdSQmNuSmhlVnRwWFNBOUlHRnlaM1Z0Wlc1MGMxdHBJQ3NnTTEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjSEp2Y0hNdVkyaHBiR1J5Wlc0Z1BTQmphR2xzWkVGeWNtRjVPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBa0pIUjVjR1Z2WmpvZ1VrVkJRMVJmUlV4RlRVVk9WRjlVV1ZCRkxGeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCMGVYQmxMRnh1SUNBZ0lDQWdJQ0JyWlhrNklHdGxlU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiblZzYkNBNklDY25JQ3NnYTJWNUxGeHVJQ0FnSUNBZ0lDQnlaV1k2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSEJ5YjNCek9pQndjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ1gyOTNibVZ5T2lCdWRXeHNYRzRnSUNBZ2ZUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gyNWxkMEZ5Y205M1EyaGxZMnM3WEc1bWRXNWpkR2x2YmlCZmJtVjNRWEp5YjNkRGFHVmpheWhwYm01bGNsUm9hWE1zSUdKdmRXNWtWR2hwY3lrZ2UxeHVJQ0FnSUdsbUlDaHBibTVsY2xSb2FYTWdJVDA5SUdKdmRXNWtWR2hwY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR2x1YzNSaGJuUnBZWFJsSUdGdUlHRnljbTkzSUdaMWJtTjBhVzl1WENJcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWDI1dmJrbDBaWEpoWW14bFVtVnpkRHRjYm1aMWJtTjBhVzl1SUY5dWIyNUpkR1Z5WVdKc1pWSmxjM1FvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrbHVkbUZzYVdRZ1lYUjBaVzF3ZENCMGJ5QmtaWE4wY25WamRIVnlaU0J1YjI0dGFYUmxjbUZpYkdVZ2FXNXpkR0Z1WTJWY0lpazdYRzU5WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNBZ0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlGOXViMjVKZEdWeVlXSnNaVk53Y21WaFpEdGNibVoxYm1OMGFXOXVJRjl1YjI1SmRHVnlZV0pzWlZOd2NtVmhaQ2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVNXNTJZV3hwWkNCaGRIUmxiWEIwSUhSdklITndjbVZoWkNCdWIyNHRhWFJsY21GaWJHVWdhVzV6ZEdGdVkyVmNJaWs3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjl2WW1wbFkzUlRjSEpsWVdRN1hHNTJZWElnWDJSbFptbHVaVkJ5YjNCbGNuUjVJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2lMaTlmWkdWbWFXNWxYM0J5YjNCbGNuUjVYQ0lwS1R0Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2diMkpxWEc0Z0lDQWdmVHRjYm4xY2JtWjFibU4wYVc5dUlGOXZZbXBsWTNSVGNISmxZV1FvZEdGeVoyVjBLU0I3WEc0Z0lDQWdkbUZ5SUY5aGNtZDFiV1Z1ZEhNZ1BTQmhjbWQxYldWdWRITXNJRjlzYjI5d0lEMGdablZ1WTNScGIyNG9hU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjMjkxY21ObElEMGdYMkZ5WjNWdFpXNTBjMXRwWFNBaFBTQnVkV3hzSUQ4Z1gyRnlaM1Z0Wlc1MGMxdHBYU0E2SUh0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5M2JrdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHpiM1Z5WTJVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTNia3RsZVhNZ1BTQnZkMjVMWlhsekxtTnZibU5oZENoUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektITnZkWEpqWlNrdVptbHNkR1Z5S0daMWJtTjBhVzl1S0hONWJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hOdmRYSmpaU3dnYzNsdEtTNWxiblZ0WlhKaFlteGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc5M2JrdGxlWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNnd0xDQmZaR1ZtYVc1bFVISnZjR1Z5ZEhrcExtUmxabUYxYkhRb2RHRnlaMlYwTENCclpYa3NJSE52ZFhKalpWdHJaWGxkS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCbWIzSW9kbUZ5SUdrZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLVjlzYjI5d0tHa3BPMXh1SUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGN6dGNiblpoY2lCZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpTQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYMjlpYW1WamRGOTNhWFJvYjNWMFgzQnliM0JsY25ScFpYTmZiRzl2YzJWY0lpa3BPMXh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZTF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCdlltcGNiaUFnSUNCOU8xeHVmVnh1Wm5WdVkzUnBiMjRnWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpLSE52ZFhKalpTd2daWGhqYkhWa1pXUXBJSHRjYmlBZ0lDQnBaaUFvYzI5MWNtTmxJRDA5SUc1MWJHd3BJSEpsZEhWeWJpQjdYRzRnSUNBZ2ZUdGNiaUFnSUNCMllYSWdkR0Z5WjJWMElEMGdLREFzSUY5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObEtTNWtaV1poZFd4MEtITnZkWEpqWlN3Z1pYaGpiSFZrWldRcE8xeHVJQ0FnSUhaaGNpQnJaWGtzSUdrN1hHNGdJQ0FnYVdZZ0tFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnZkWEpqWlZONWJXSnZiRXRsZVhNZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLSE52ZFhKalpTazdYRzRnSUNBZ0lDQWdJR1p2Y2locElEMGdNRHNnYVNBOElITnZkWEpqWlZONWJXSnZiRXRsZVhNdWJHVnVaM1JvT3lCcEt5c3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJRDBnYzI5MWNtTmxVM2x0WW05c1MyVjVjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGVHTnNkV1JsWkM1cGJtUmxlRTltS0d0bGVTa2dQajBnTUNrZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVXVZMkZzYkNoemIzVnlZMlVzSUd0bGVTa3BJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwVzJ0bGVWMGdQU0J6YjNWeVkyVmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpUdGNibVoxYm1OMGFXOXVJRjl2WW1wbFkzUlhhWFJvYjNWMFVISnZjR1Z5ZEdsbGMweHZiM05sS0hOdmRYSmpaU3dnWlhoamJIVmtaV1FwSUh0Y2JpQWdJQ0JwWmlBb2MyOTFjbU5sSUQwOUlHNTFiR3dwSUhKbGRIVnliaUI3WEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnZEdGeVoyVjBJRDBnZTF4dUlDQWdJSDA3WEc0Z0lDQWdkbUZ5SUhOdmRYSmpaVXRsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWh6YjNWeVkyVXBPMXh1SUNBZ0lIWmhjaUJyWlhrc0lHazdYRzRnSUNBZ1ptOXlLR2tnUFNBd095QnBJRHdnYzI5MWNtTmxTMlY1Y3k1c1pXNW5kR2c3SUdrckt5bDdYRzRnSUNBZ0lDQWdJR3RsZVNBOUlITnZkWEpqWlV0bGVYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxlR05zZFdSbFpDNXBibVJsZUU5bUtHdGxlU2tnUGowZ01Da2dZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJSFJoY21kbGRGdHJaWGxkSUQwZ2MyOTFjbU5sVzJ0bGVWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwWVhKblpYUTdYRzU5WEc0aUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNBZ0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlGOXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdU8xeHVkbUZ5SUY5aGMzTmxjblJVYUdselNXNXBkR2xoYkdsNlpXUWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMTloYzNObGNuUmZkR2hwYzE5cGJtbDBhV0ZzYVhwbFpGd2lLU2s3WEc1MllYSWdYM1I1Y0dWUFppQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYM1I1Y0dWZmIyWmNJaWtwTzF4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2UxeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnZZbXBjYmlBZ0lDQjlPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1gzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200b2MyVnNaaXdnWTJGc2JDa2dlMXh1SUNBZ0lHbG1JQ2hqWVd4c0lDWW1JQ2dvTUN3Z1gzUjVjR1ZQWmlrdVpHVm1ZWFZzZENoallXeHNLU0E5UFQwZ1hDSnZZbXBsWTNSY0lpQjhmQ0IwZVhCbGIyWWdZMkZzYkNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUNnd0xDQmZZWE56WlhKMFZHaHBjMGx1YVhScFlXeHBlbVZrS1M1a1pXWmhkV3gwS0hObGJHWXBPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZjbVZoWkU5dWJIbEZjbkp2Y2p0Y2JtWjFibU4wYVc5dUlGOXlaV0ZrVDI1c2VVVnljbTl5S0c1aGJXVXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmNYRndpWENJZ0t5QnVZVzFsSUNzZ1hDSmNYRndpSUdseklISmxZV1F0YjI1c2VWd2lLVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYM05sZER0Y2JuWmhjaUJmWkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMTlrWldacGJtVmZjSEp2Y0dWeWRIbGNJaWtwTzF4dWRtRnlJRjl6ZFhCbGNsQnliM0JDWVhObElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aUxpOWZjM1Z3WlhKZmNISnZjRjlpWVhObFhDSXBLVHRjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUh0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2IySnFYRzRnSUNBZ2ZUdGNibjFjYm1aMWJtTjBhVzl1SUhObGRDaDBZWEpuWlhRc0lIQnliM0JsY25SNUxDQjJZV3gxWlN3Z2NtVmpaV2wyWlhJcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlGSmxabXhsWTNRZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdVbVZtYkdWamRDNXpaWFFwSUh0Y2JpQWdJQ0FnSUNBZ2MyVjBJRDBnVW1WbWJHVmpkQzV6WlhRN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYzJWMElEMGdablZ1WTNScGIyNGdjMlYwTVNoMFlYSm5aWFF4TENCd2NtOXdaWEowZVRFc0lIWmhiSFZsTVN3Z2NtVmpaV2wyWlhJeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZbUZ6WlNBOUlDZ3dMQ0JmYzNWd1pYSlFjbTl3UW1GelpTa3VaR1ZtWVhWc2RDaDBZWEpuWlhReExDQndjbTl3WlhKMGVURXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsYzJNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ltRnpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHSmhjMlVzSUhCeWIzQmxjblI1TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JsYzJNdWMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjMk11YzJWMExtTmhiR3dvY21WalpXbDJaWEl4TENCMllXeDFaVEVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGa1pYTmpMbmR5YVhSaFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pYTmpJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHlaV05sYVhabGNqRXNJSEJ5YjNCbGNuUjVNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWell5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpHVnpZeTUzY21sMFlXSnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGMyTXVkbUZzZFdVZ1BTQjJZV3gxWlRFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEpsWTJWcGRtVnlNU3dnY0hKdmNHVnlkSGt4TENCa1pYTmpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tEQXNJRjlrWldacGJtVlFjbTl3WlhKMGVTa3VaR1ZtWVhWc2RDaHlaV05sYVhabGNqRXNJSEJ5YjNCbGNuUjVNU3dnZG1Gc2RXVXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYzJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrc0lIWmhiSFZsTENCeVpXTmxhWFpsY2lrN1hHNTlYRzVtZFc1amRHbHZiaUJmYzJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrc0lIWmhiSFZsTENCeVpXTmxhWFpsY2l3Z2FYTlRkSEpwWTNRcElIdGNiaUFnSUNCMllYSWdjeUE5SUhObGRDaDBZWEpuWlhRc0lIQnliM0JsY25SNUxDQjJZV3gxWlN3Z2NtVmpaV2wyWlhJZ2ZId2dkR0Z5WjJWMEtUdGNiaUFnSUNCcFppQW9JWE1nSmlZZ2FYTlRkSEpwWTNRcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZG1ZV2xzWldRZ2RHOGdjMlYwSUhCeWIzQmxjblI1SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JuMWNiaUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWDNObGRGQnliM1J2ZEhsd1pVOW1PMXh1Wm5WdVkzUnBiMjRnYzJWMFVISnZkRzkwZVhCbFQyWW9ieXdnY0NrZ2UxeHVJQ0FnSUhObGRGQnliM1J2ZEhsd1pVOW1JRDBnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUlIeDhJR1oxYm1OMGFXOXVJSE5sZEZCeWIzUnZkSGx3WlU5bU1TaHZNU3dnY0RFcElIdGNiaUFnSUNBZ0lDQWdiekV1WDE5d2NtOTBiMTlmSUQwZ2NERTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnZNVHRjYmlBZ0lDQjlPMXh1SUNBZ0lISmxkSFZ5YmlCelpYUlFjbTkwYjNSNWNHVlBaaWh2TENCd0tUdGNibjFjYm1aMWJtTjBhVzl1SUY5elpYUlFjbTkwYjNSNWNHVlBaaWh2TENCd0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhObGRGQnliM1J2ZEhsd1pVOW1LRzhzSUhBcE8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmMydHBjRVpwY25OMFIyVnVaWEpoZEc5eVRtVjRkRHRjYm1aMWJtTjBhVzl1SUY5emEybHdSbWx5YzNSSFpXNWxjbUYwYjNKT1pYaDBLR1p1S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdhWFFnUFNCbWJpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNCcGRDNXVaWGgwS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGREdGNiaUFnSUNCOU8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmMyeHBZMlZrVkc5QmNuSmhlVHRjYm5aaGNpQmZZWEp5WVhsWGFYUm9TRzlzWlhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0hKbGNYVnBjbVVvWENJdUwxOWhjbkpoZVY5M2FYUm9YMmh2YkdWelhDSXBLVHRjYm5aaGNpQmZhWFJsY21GaWJHVlViMEZ5Y21GNUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aUxpOWZhWFJsY21GaWJHVmZkRzlmWVhKeVlYbGNJaWtwTzF4dWRtRnlJRjl1YjI1SmRHVnlZV0pzWlZKbGMzUWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMTl1YjI1ZmFYUmxjbUZpYkdWZmNtVnpkRndpS1NrN1hHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzlpYWx4dUlDQWdJSDA3WEc1OVhHNW1kVzVqZEdsdmJpQmZjMnhwWTJWa1ZHOUJjbkpoZVNoaGNuSXNJR2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLREFzSUY5aGNuSmhlVmRwZEdoSWIyeGxjeWt1WkdWbVlYVnNkQ2hoY25JcElIeDhJQ2d3TENCZmFYUmxjbUZpYkdWVWIwRnljbUY1S1M1a1pXWmhkV3gwS0dGeWNpd2dhU2tnZkh3Z0tEQXNJRjl1YjI1SmRHVnlZV0pzWlZKbGMzUXBMbVJsWm1GMWJIUW9LVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYM05zYVdObFpGUnZRWEp5WVhsTWIyOXpaVHRjYm5aaGNpQmZZWEp5WVhsWGFYUm9TRzlzWlhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0hKbGNYVnBjbVVvWENJdUwxOWhjbkpoZVY5M2FYUm9YMmh2YkdWelhDSXBLVHRjYm5aaGNpQmZhWFJsY21GaWJHVlViMEZ5Y21GNVRHbHRhWFJNYjI5elpTQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYMmwwWlhKaFlteGxYM1J2WDJGeWNtRjVYMnhwYldsMFgyeHZiM05sWENJcEtUdGNiblpoY2lCZmJtOXVTWFJsY21GaWJHVlNaWE4wSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmJtOXVYMmwwWlhKaFlteGxYM0psYzNSY0lpa3BPMXh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZTF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCdlltcGNiaUFnSUNCOU8xeHVmVnh1Wm5WdVkzUnBiMjRnWDNOc2FXTmxaRlJ2UVhKeVlYbE1iMjl6WlNoaGNuSXNJR2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLREFzSUY5aGNuSmhlVmRwZEdoSWIyeGxjeWt1WkdWbVlYVnNkQ2hoY25JcElIeDhJQ2d3TENCZmFYUmxjbUZpYkdWVWIwRnljbUY1VEdsdGFYUk1iMjl6WlNrdVpHVm1ZWFZzZENoaGNuSXNJR2twSUh4OElDZ3dMQ0JmYm05dVNYUmxjbUZpYkdWU1pYTjBLUzVrWldaaGRXeDBLQ2s3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjl6ZFhCbGNsQnliM0JDWVhObE8xeHVkbUZ5SUY5blpYUlFjbTkwYjNSNWNHVlBaaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2WDJkbGRGOXdjbTkwYjNSNWNHVmZiMlpjSWlrcE8xeHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dlMXh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJ2WW1wY2JpQWdJQ0I5TzF4dWZWeHVablZ1WTNScGIyNGdYM04xY0dWeVVISnZjRUpoYzJVb2IySnFaV04wTENCd2NtOXdaWEowZVNrZ2UxeHVJQ0FnSUhkb2FXeGxLQ0ZQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2twZTF4dUlDQWdJQ0FnSUNCdlltcGxZM1FnUFNBb01Dd2dYMmRsZEZCeWIzUnZkSGx3WlU5bUtTNWtaV1poZFd4MEtHOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2WW1wbFkzUWdQVDA5SUc1MWJHd3BJR0p5WldGck8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiMkpxWldOME8xeHVmVnh1SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnSUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCZmRHRm5aMlZrVkdWdGNHeGhkR1ZNYVhSbGNtRnNPMXh1Wm5WdVkzUnBiMjRnWDNSaFoyZGxaRlJsYlhCc1lYUmxUR2wwWlhKaGJDaHpkSEpwYm1kekxDQnlZWGNwSUh0Y2JpQWdJQ0JwWmlBb0lYSmhkeWtnZTF4dUlDQWdJQ0FnSUNCeVlYY2dQU0J6ZEhKcGJtZHpMbk5zYVdObEtEQXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbVp5WldWNlpTaFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loemRISnBibWR6TENCN1hHNGdJQ0FnSUNBZ0lISmhkem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklFOWlhbVZqZEM1bWNtVmxlbVVvY21GM0tWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTa3BPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZkR0ZuWjJWa1ZHVnRjR3hoZEdWTWFYUmxjbUZzVEc5dmMyVTdYRzVtZFc1amRHbHZiaUJmZEdGbloyVmtWR1Z0Y0d4aGRHVk1hWFJsY21Gc1RHOXZjMlVvYzNSeWFXNW5jeXdnY21GM0tTQjdYRzRnSUNBZ2FXWWdLQ0Z5WVhjcElIdGNiaUFnSUNBZ0lDQWdjbUYzSUQwZ2MzUnlhVzVuY3k1emJHbGpaU2d3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjM1J5YVc1bmN5NXlZWGNnUFNCeVlYYzdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaM003WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjkwYUhKdmR6dGNibVoxYm1OMGFXOXVJRjkwYUhKdmR5aGxLU0I3WEc0Z0lDQWdkR2h5YjNjZ1pUdGNibjFjYmlJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1gzUnZRWEp5WVhrN1hHNTJZWElnWDJGeWNtRjVWMmwwYUVodmJHVnpJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2lMaTlmWVhKeVlYbGZkMmwwYUY5b2IyeGxjMXdpS1NrN1hHNTJZWElnWDJsMFpYSmhZbXhsVkc5QmNuSmhlU0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2WDJsMFpYSmhZbXhsWDNSdlgyRnljbUY1WENJcEtUdGNiblpoY2lCZmJtOXVTWFJsY21GaWJHVlNaWE4wSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmJtOXVYMmwwWlhKaFlteGxYM0psYzNSY0lpa3BPMXh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZTF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCdlltcGNiaUFnSUNCOU8xeHVmVnh1Wm5WdVkzUnBiMjRnWDNSdlFYSnlZWGtvWVhKeUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNnd0xDQmZZWEp5WVhsWGFYUm9TRzlzWlhNcExtUmxabUYxYkhRb1lYSnlLU0I4ZkNBb01Dd2dYMmwwWlhKaFlteGxWRzlCY25KaGVTa3VaR1ZtWVhWc2RDaGhjbklwSUh4OElDZ3dMQ0JmYm05dVNYUmxjbUZpYkdWU1pYTjBLUzVrWldaaGRXeDBLQ2s3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJRjkwYjBOdmJuTjFiV0ZpYkdWQmNuSmhlVHRjYm5aaGNpQmZZWEp5WVhsWGFYUm9iM1YwU0c5c1pYTWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtISmxjWFZwY21Vb1hDSXVMMTloY25KaGVWOTNhWFJvYjNWMFgyaHZiR1Z6WENJcEtUdGNiblpoY2lCZmFYUmxjbUZpYkdWVWIwRnljbUY1SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmFYUmxjbUZpYkdWZmRHOWZZWEp5WVhsY0lpa3BPMXh1ZG1GeUlGOXViMjVKZEdWeVlXSnNaVk53Y21WaFpDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2NtVnhkV2x5WlNoY0lpNHZYMjV2Ymw5cGRHVnlZV0pzWlY5emNISmxZV1JjSWlrcE8xeHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z2IySnFJQ1ltSUc5aWFpNWZYMlZ6VFc5a2RXeGxJRDhnYjJKcUlEb2dlMXh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJ2WW1wY2JpQWdJQ0I5TzF4dWZWeHVablZ1WTNScGIyNGdYM1J2UTI5dWMzVnRZV0pzWlVGeWNtRjVLR0Z5Y2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvTUN3Z1gyRnljbUY1VjJsMGFHOTFkRWh2YkdWektTNWtaV1poZFd4MEtHRnljaWtnZkh3Z0tEQXNJRjlwZEdWeVlXSnNaVlJ2UVhKeVlYa3BMbVJsWm1GMWJIUW9ZWEp5S1NCOGZDQW9NQ3dnWDI1dmJrbDBaWEpoWW14bFUzQnlaV0ZrS1M1a1pXWmhkV3gwS0NrN1hHNTlYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5MGIxQnlhVzFwZEdsMlpUdGNiblpoY2lCZmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmRIbHdaVjl2Wmx3aUtTazdYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc5aWFseHVJQ0FnSUgwN1hHNTlYRzVtZFc1amRHbHZiaUJmZEc5UWNtbHRhWFJwZG1Vb2FXNXdkWFFzSUdocGJuUXBJSHRjYmlBZ0lDQnBaaUFvS0RBc0lGOTBlWEJsVDJZcExtUmxabUYxYkhRb2FXNXdkWFFwSUNFOVBTQmNJbTlpYW1WamRGd2lJSHg4SUdsdWNIVjBJRDA5UFNCdWRXeHNLU0J5WlhSMWNtNGdhVzV3ZFhRN1hHNGdJQ0FnZG1GeUlIQnlhVzBnUFNCcGJuQjFkRnRUZVcxaWIyd3VkRzlRY21sdGFYUnBkbVZkTzF4dUlDQWdJR2xtSUNod2NtbHRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGN5QTlJSEJ5YVcwdVkyRnNiQ2hwYm5CMWRDd2dhR2x1ZENCOGZDQmNJbVJsWm1GMWJIUmNJaWs3WEc0Z0lDQWdJQ0FnSUdsbUlDZ29NQ3dnWDNSNWNHVlBaaWt1WkdWbVlYVnNkQ2h5WlhNcElDRTlQU0JjSW05aWFtVmpkRndpS1NCeVpYUjFjbTRnY21Wek8xeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUUVCMGIxQnlhVzFwZEdsMlpTQnRkWE4wSUhKbGRIVnliaUJoSUhCeWFXMXBkR2wyWlNCMllXeDFaUzVjSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW9hR2x1ZENBOVBUMGdYQ0p6ZEhKcGJtZGNJaUEvSUZOMGNtbHVaeUE2SUU1MWJXSmxjaWtvYVc1d2RYUXBPMXh1ZlZ4dUlpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmZkRzlRY205d1pYSjBlVXRsZVR0Y2JuWmhjaUJmZEhsd1pVOW1JRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2lMaTlmZEhsd1pWOXZabHdpS1NrN1hHNTJZWElnWDNSdlVISnBiV2wwYVhabElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aUxpOWZkRzlmY0hKcGJXbDBhWFpsWENJcEtUdGNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHRjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nYjJKcVhHNGdJQ0FnZlR0Y2JuMWNibVoxYm1OMGFXOXVJRjkwYjFCeWIzQmxjblI1UzJWNUtHRnlaeWtnZTF4dUlDQWdJSFpoY2lCclpYa2dQU0FvTUN3Z1gzUnZVSEpwYldsMGFYWmxLUzVrWldaaGRXeDBLR0Z5Wnl3Z1hDSnpkSEpwYm1kY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUNnd0xDQmZkSGx3WlU5bUtTNWtaV1poZFd4MEtHdGxlU2tnUFQwOUlGd2ljM2x0WW05c1hDSWdQeUJyWlhrZ09pQlRkSEpwYm1jb2EyVjVLVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYM1I1Y0dWdlpqRTdYRzUyWVhJZ1gzUjVjR1Z2WmlBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbW9nSmlZZ2RIbHdaVzltSUZONWJXSnZiQ0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0lnUFQwOUlGTjViV0p2YkNBL0lGd2ljM2x0WW05c1hDSWdPaUIwZVhCbGIyWWdiMkpxTzF4dWZUdGNibVoxYm1OMGFXOXVJRjkwZVhCbGIyWXhLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JUZVcxaWIyd2dQeUJjSW5ONWJXSnZiRndpSURvZ2RIbHdaVzltSUc5aWFpQTlQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JRndpZFc1a1pXWnBibVZrWENJZ09pQmZkSGx3Wlc5bUtHOWlhaWs3WEc1OVhHNDdYRzRpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0FnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUY5M2NtRndRWE41Ym1OSFpXNWxjbUYwYjNJN1hHNTJZWElnWDJGemVXNWpSMlZ1WlhKaGRHOXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHlaWEYxYVhKbEtGd2lMaTlmWVhONWJtTmZaMlZ1WlhKaGRHOXlYQ0lwS1R0Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2diMkpxWEc0Z0lDQWdmVHRjYm4xY2JtWjFibU4wYVc5dUlGOTNjbUZ3UVhONWJtTkhaVzVsY21GMGIzSW9abTRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1gyRnplVzVqUjJWdVpYSmhkRzl5TG1SbFptRjFiSFFvWm00dVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLU2s3WEc0Z0lDQWdmVHRjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lDQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdYM2R5WVhCT1lYUnBkbVZUZFhCbGNqdGNiblpoY2lCZlkyOXVjM1J5ZFdOMElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoeVpYRjFhWEpsS0Z3aUxpOWZZMjl1YzNSeWRXTjBYQ0lwS1R0Y2JuWmhjaUJmYVhOT1lYUnBkbVZHZFc1amRHbHZiaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9jbVZ4ZFdseVpTaGNJaTR2WDJselgyNWhkR2wyWlY5bWRXNWpkR2x2Ymx3aUtTazdYRzUyWVhJZ1gyZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZloyVjBYM0J5YjNSdmRIbHdaVjl2Wmx3aUtTazdYRzUyWVhJZ1gzTmxkRkJ5YjNSdmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h5WlhGMWFYSmxLRndpTGk5ZmMyVjBYM0J5YjNSdmRIbHdaVjl2Wmx3aUtTazdYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZTF4dUlDQWdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc5aWFseHVJQ0FnSUgwN1hHNTlYRzVtZFc1amRHbHZiaUIzY21Gd1RtRjBhWFpsVTNWd1pYSW9RMnhoYzNNcElIdGNiaUFnSUNCMllYSWdYMk5oWTJobElEMGdkSGx3Wlc5bUlFMWhjQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnYm1WM0lFMWhjQ2dwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhkeVlYQk9ZWFJwZG1WVGRYQmxjaUE5SUdaMWJtTjBhVzl1SUhkeVlYQk9ZWFJwZG1WVGRYQmxjakVvUTJ4aGMzTXhLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQlhjbUZ3Y0dWeUlEMGdablZ1WTNScGIyNGdWM0poY0hCbGNpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb01Dd2dYMk52Ym5OMGNuVmpkQ2t1WkdWbVlYVnNkQ2hEYkdGemN6RXNJR0Z5WjNWdFpXNTBjeXdnS0RBc0lGOW5aWFJRY205MGIzUjVjR1ZQWmlrdVpHVm1ZWFZzZENoMGFHbHpLUzVqYjI1emRISjFZM1J2Y2lrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR2xtSUNoRGJHRnpjekVnUFQwOUlHNTFiR3dnZkh3Z0lTZ3dMQ0JmYVhOT1lYUnBkbVZHZFc1amRHbHZiaWt1WkdWbVlYVnNkQ2hEYkdGemN6RXBLU0J5WlhSMWNtNGdRMnhoYzNNeE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRU5zWVhOek1TQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lVM1Z3WlhJZ1pYaHdjbVZ6YzJsdmJpQnRkWE4wSUdWcGRHaGxjaUJpWlNCdWRXeHNJRzl5SUdFZ1puVnVZM1JwYjI1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCZlkyRmphR1VnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlkyRmphR1V1YUdGektFTnNZWE56TVNrcElISmxkSFZ5YmlCZlkyRmphR1V1WjJWMEtFTnNZWE56TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmWTJGamFHVXVjMlYwS0VOc1lYTnpNU3dnVjNKaGNIQmxjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1YzSmhjSEJsY2k1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0VOc1lYTnpNUzV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMGNuVmpkRzl5T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZkeVlYQndaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLREFzSUY5elpYUlFjbTkwYjNSNWNHVlBaaWt1WkdWbVlYVnNkQ2hYY21Gd2NHVnlMQ0JEYkdGemN6RXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2NtVjBkWEp1SUhkeVlYQk9ZWFJwZG1WVGRYQmxjaWhEYkdGemN5azdYRzU5WEc1bWRXNWpkR2x2YmlCZmQzSmhjRTVoZEdsMlpWTjFjR1Z5S0VOc1lYTnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIZHlZWEJPWVhScGRtVlRkWEJsY2loRGJHRnpjeWs3WEc1OVhHNGlMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQWdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0ltRndjR3g1UkdWamIzSmhkR1ZrUkdWelkzSnBjSFJ2Y2x3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMkZ3Y0d4NVJHVmpiM0poZEdWa1JHVnpZM0pwY0hSdmNpNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lZWEp5WVhsWGFYUm9TRzlzWlhOY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjloY25KaGVWZHBkR2hJYjJ4bGN5NWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lZWEp5WVhsWGFYUm9iM1YwU0c5c1pYTmNJaXdnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5aGNuSmhlVmRwZEdodmRYUkliMnhsY3k1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVlYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtYQ0lzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZllYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0poYzNsdVkwZGxibVZ5WVhSdmNsd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJGemVXNWpSMlZ1WlhKaGRHOXlMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0poYzNsdVkwZGxibVZ5WVhSdmNrUmxiR1ZuWVhSbFhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWVhONWJtTkhaVzVsY21GMGIzSkVaV3hsWjJGMFpTNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lZWE41Ym1OSmRHVnlZWFJ2Y2x3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMkZ6ZVc1alNYUmxjbUYwYjNJdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0ltRnplVzVqVkc5SFpXNWxjbUYwYjNKY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjloYzNsdVkxUnZSMlZ1WlhKaGRHOXlMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0poZDJGcGRFRnplVzVqUjJWdVpYSmhkRzl5WENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZWGRoYVhSQmMzbHVZMGRsYm1WeVlYUnZjaTVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWVhkaGFYUldZV3gxWlZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMkYzWVdsMFZtRnNkV1V1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW1Oc1lYTnpRMkZzYkVOb1pXTnJYQ0lzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZlkyeGhjM05EWVd4c1EyaGxZMnN1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW1Oc1lYTnpUbUZ0WlZSRVdrVnljbTl5WENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZMnhoYzNOT1lXMWxWR1I2UlhKeWIzSXVaR1ZtWVhWc2REdGNiaUFnSUNCOVhHNTlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbU5zWVhOelVISnBkbUYwWlVacFpXeGtSMlYwWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUkhaWFF1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW1Oc1lYTnpVSEpwZG1GMFpVWnBaV3hrVEc5dmMyVkNZWE5sWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUk1iMjl6WlVKaGMyVXVaR1ZtWVhWc2REdGNiaUFnSUNCOVhHNTlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbU5zWVhOelVISnBkbUYwWlVacFpXeGtVMlYwWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZMnhoYzNOUWNtbDJZWFJsUm1sbGJHUlRaWFF1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW1Oc1lYTnpVSEpwZG1GMFpVMWxkR2h2WkVkbGRGd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJOc1lYTnpVSEpwZG1GMFpVMWxkR2h2WkVkbGRDNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lZMnhoYzNOUWNtbDJZWFJsVFdWMGFHOWtVMlYwWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZMnhoYzNOUWNtbDJZWFJsVFdWMGFHOWtVMlYwTG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKamJHRnpjMU4wWVhScFkxQnlhWFpoZEdWR2FXVnNaRk53WldOSFpYUmNJaXdnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5amJHRnpjMU4wWVhScFkxQnlhWFpoZEdWR2FXVnNaRk53WldOSFpYUXVaR1ZtWVhWc2REdGNiaUFnSUNCOVhHNTlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbU5zWVhOelUzUmhkR2xqVUhKcGRtRjBaVVpwWld4a1UzQmxZMU5sZEZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMk5zWVhOelUzUmhkR2xqVUhKcGRtRjBaVVpwWld4a1UzQmxZMU5sZEM1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVkyOXVjM1J5ZFdOMFhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWTI5dWMzUnlkV04wTG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKamNtVmhkR1ZEYkdGemMxd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJOeVpXRjBaVU5zWVhOekxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmtaV052Y21GMFpWd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJSbFkyOXlZWFJsTG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKa1pXWmhkV3gwYzF3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMlJsWm1GMWJIUnpMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0prWldacGJtVkZiblZ0WlhKaFlteGxVSEp2Y0dWeWRHbGxjMXdpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyUmxabWx1WlVWdWRXMWxjbUZpYkdWUWNtOXdaWEowYVdWekxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmtaV1pwYm1WUWNtOXdaWEowZVZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMlJsWm1sdVpWQnliM0JsY25SNUxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmxlSFJsYm1SelhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWlhoMFpXNWtjeTVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWjJWMFhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWjJWMExtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSm5aWFJRY205MGIzUjVjR1ZQWmx3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMmRsZEZCeWIzUnZkSGx3WlU5bUxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSnBibWhsY21sMGMxd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJsdWFHVnlhWFJ6TG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKcGJtaGxjbWwwYzB4dmIzTmxYQ0lzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmFXNW9aWEpwZEhOTWIyOXpaUzVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpYVc1cGRHbGhiR2w2WlhKRVpXWnBibVZRY205d1pYSjBlVndpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gybHVhWFJwWVd4cGVtVnlSR1ZtYVc1bFVISnZjR1Z5ZEhrdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0ltbHVhWFJwWVd4cGVtVnlWMkZ5Ym1sdVowaGxiSEJsY2x3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMmx1YVhScFlXeHBlbVZ5VjJGeWJtbHVaMGhsYkhCbGNpNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMmx1YzNSaGJtTmxiMlpjSWl3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOXBibk4wWVc1alpXOW1MbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhSY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReExtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSnBiblJsY205d1VtVnhkV2x5WlZkcGJHUmpZWEprWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZhVzUwWlhKdmNGSmxjWFZwY21WWGFXeGtZMkZ5WkM1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aWFYTk9ZWFJwZG1WR2RXNWpkR2x2Ymx3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMmx6VG1GMGFYWmxSblZ1WTNScGIyNHVaR1ZtWVhWc2REdGNiaUFnSUNCOVhHNTlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbWwwWlhKaFlteGxWRzlCY25KaGVWd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJsMFpYSmhZbXhsVkc5QmNuSmhlUzVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpYVhSbGNtRmliR1ZVYjBGeWNtRjVUR2x0YVhSY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjlwZEdWeVlXSnNaVlJ2UVhKeVlYbE1hVzFwZEM1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aWFYUmxjbUZpYkdWVWIwRnljbUY1VEdsdGFYUk1iMjl6WlZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMmwwWlhKaFlteGxWRzlCY25KaGVVeHBiV2wwVEc5dmMyVXVaR1ZtWVhWc2REdGNiaUFnSUNCOVhHNTlLVHRjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbXB6ZUZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMnB6ZUM1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aWJtVjNRWEp5YjNkRGFHVmphMXdpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyNWxkMEZ5Y205M1EyaGxZMnN1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW01dmJrbDBaWEpoWW14bFVtVnpkRndpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyNXZia2wwWlhKaFlteGxVbVZ6ZEM1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aWJtOXVTWFJsY21GaWJHVlRjSEpsWVdSY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjl1YjI1SmRHVnlZV0pzWlZOd2NtVmhaQzVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpYjJKcVpXTjBVM0J5WldGa1hDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYjJKcVpXTjBVM0J5WldGa0xtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSnZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzF3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMjlpYW1WamRGZHBkR2h2ZFhSUWNtOXdaWEowYVdWekxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSnZZbXBsWTNSWGFYUm9iM1YwVUhKdmNHVnlkR2xsYzB4dmIzTmxYQ0lzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmIySnFaV04wVjJsMGFHOTFkRkJ5YjNCbGNuUnBaWE5NYjI5elpTNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2ljRzl6YzJsaWJHVkRiMjV6ZEhKMVkzUnZjbEpsZEhWeWJsd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTR1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW5KbFlXUlBibXg1UlhKeWIzSmNJaXdnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5eVpXRmtUMjVzZVVWeWNtOXlMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0p6WlhSY0lpd2dlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjl6WlhRdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0luTmxkRkJ5YjNSdmRIbHdaVTltWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZjMlYwVUhKdmRHOTBlWEJsVDJZdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0luTnJhWEJHYVhKemRFZGxibVZ5WVhSdmNrNWxlSFJjSWl3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOXphMmx3Um1seWMzUkhaVzVsY21GMGIzSk9aWGgwTG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKemJHbGpaV1JVYjBGeWNtRjVYQ0lzSUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmMyeHBZMlZrVkc5QmNuSmhlUzVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpYzJ4cFkyVmtWRzlCY25KaGVVeHZiM05sWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZjMnhwWTJWa1ZHOUJjbkpoZVV4dmIzTmxMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0p6ZFhCbGNsQnliM0JDWVhObFhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYzNWd1pYSlFjbTl3UW1GelpTNWtaV1poZFd4ME8xeHVJQ0FnSUgxY2JuMHBPMXh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lkR0ZuWjJWa1ZHVnRjR3hoZEdWTWFYUmxjbUZzWENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR0ZuWjJWa1ZHVnRjR3hoZEdWTWFYUmxjbUZzTG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKMFlXZG5aV1JVWlcxd2JHRjBaVXhwZEdWeVlXeE1iMjl6WlZ3aUxDQjdYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JoWjJkbFpGUmxiWEJzWVhSbFRHbDBaWEpoYkV4dmIzTmxMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmZEdoeWIzZGNJaXdnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFISnZkeTVrWldaaGRXeDBPMXh1SUNBZ0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpZEc5QmNuSmhlVndpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUnZRWEp5WVhrdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0luUnZRMjl1YzNWdFlXSnNaVUZ5Y21GNVhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEc5RGIyNXpkVzFoWW14bFFYSnlZWGt1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSW5SdlVISnBiV2wwYVhabFhDSXNJSHRjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEc5UWNtbHRhWFJwZG1VdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0luUnZVSEp2Y0dWeWRIbExaWGxjSWl3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBiMUJ5YjNCbGNuUjVTMlY1TG1SbFptRjFiSFE3WEc0Z0lDQWdmVnh1ZlNrN1hHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKMGVYQmxUMlpjSWl3Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBlWEJsVDJZdVpHVm1ZWFZzZER0Y2JpQWdJQ0I5WEc1OUtUdGNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0luZHlZWEJCYzNsdVkwZGxibVZ5WVhSdmNsd2lMQ0I3WEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNkeVlYQkJjM2x1WTBkbGJtVnlZWFJ2Y2k1a1pXWmhkV3gwTzF4dUlDQWdJSDFjYm4wcE8xeHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aWQzSmhjRTVoZEdsMlpWTjFjR1Z5WENJc0lIdGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkM0poY0U1aGRHbDJaVk4xY0dWeUxtUmxabUYxYkhRN1hHNGdJQ0FnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmpjbVZoZEdWVGRYQmxjbHdpTENCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyTnlaV0YwWlZOMWNHVnlMbVJsWm1GMWJIUTdYRzRnSUNBZ2ZWeHVmU2s3WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pwYzA1aGRHbDJaVkpsWm14bFkzUkRiMjV6ZEhKMVkzUmNJaXdnZTF4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5cGMwNWhkR2wyWlZKbFpteGxZM1JEYjI1emRISjFZM1F1WkdWbVlYVnNkRHRjYmlBZ0lDQjlYRzU5S1R0Y2JuWmhjaUJmWVhCd2JIbEVaV052Y21GMFpXUkVaWE5qY21sd2RHOXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJGd2NHeDVYMlJsWTI5eVlYUmxaRjlrWlhOamNtbHdkRzl5WENJcEtUdGNiblpoY2lCZllYSnlZWGxYYVhSb1NHOXNaWE1nUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZllYSnlZWGxmZDJsMGFGOW9iMnhsYzF3aUtTazdYRzUyWVhJZ1gyRnljbUY1VjJsMGFHOTFkRWh2YkdWeklEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYMkZ5Y21GNVgzZHBkR2h2ZFhSZmFHOXNaWE5jSWlrcE8xeHVkbUZ5SUY5aGMzTmxjblJVYUdselNXNXBkR2xoYkdsNlpXUWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4ME1paHlaWEYxYVhKbEtGd2lMaTlmWVhOelpYSjBYM1JvYVhOZmFXNXBkR2xoYkdsNlpXUmNJaWtwTzF4dWRtRnlJRjloYzNsdVkwZGxibVZ5WVhSdmNpQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTloYzNsdVkxOW5aVzVsY21GMGIzSmNJaWtwTzF4dWRtRnlJRjloYzNsdVkwZGxibVZ5WVhSdmNrUmxiR1ZuWVhSbElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYMkZ6ZVc1algyZGxibVZ5WVhSdmNsOWtaV3hsWjJGMFpWd2lLU2s3WEc1MllYSWdYMkZ6ZVc1alNYUmxjbUYwYjNJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZZWE41Ym1OZmFYUmxjbUYwYjNKY0lpa3BPMXh1ZG1GeUlGOWhjM2x1WTFSdlIyVnVaWEpoZEc5eUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYMkZ6ZVc1algzUnZYMmRsYm1WeVlYUnZjbHdpS1NrN1hHNTJZWElnWDJGM1lXbDBRWE41Ym1OSFpXNWxjbUYwYjNJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZZWGRoYVhSZllYTjVibU5mWjJWdVpYSmhkRzl5WENJcEtUdGNiblpoY2lCZllYZGhhWFJXWVd4MVpTQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTloZDJGcGRGOTJZV3gxWlZ3aUtTazdYRzUyWVhJZ1gyTnNZWE56UTJGc2JFTm9aV05ySUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgyTnNZWE56WDJOaGJHeGZZMmhsWTJ0Y0lpa3BPMXh1ZG1GeUlGOWpiR0Z6YzA1aGJXVlVaSHBGY25KdmNpQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTlqYkdGemMxOXVZVzFsWDNSa2VsOWxjbkp2Y2x3aUtTazdYRzUyWVhJZ1gyTnNZWE56VUhKcGRtRjBaVVpwWld4a1IyVjBJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJOc1lYTnpYM0J5YVhaaGRHVmZabWxsYkdSZloyVjBYQ0lwS1R0Y2JuWmhjaUJmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JNYjI5elpVSmhjMlVnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZlkyeGhjM05mY0hKcGRtRjBaVjltYVdWc1pGOXNiMjl6WlY5aVlYTmxYQ0lwS1R0Y2JuWmhjaUJmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JUWlhRZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZZMnhoYzNOZmNISnBkbUYwWlY5bWFXVnNaRjl6WlhSY0lpa3BPMXh1ZG1GeUlGOWpiR0Z6YzFCeWFYWmhkR1ZOWlhSb2IyUkhaWFFnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZlkyeGhjM05mY0hKcGRtRjBaVjl0WlhSb2IyUmZaMlYwWENJcEtUdGNiblpoY2lCZlkyeGhjM05RY21sMllYUmxUV1YwYUc5a1UyVjBJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJOc1lYTnpYM0J5YVhaaGRHVmZiV1YwYUc5a1gzTmxkRndpS1NrN1hHNTJZWElnWDJOc1lYTnpVM1JoZEdsalVISnBkbUYwWlVacFpXeGtVM0JsWTBkbGRDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTlqYkdGemMxOXpkR0YwYVdOZmNISnBkbUYwWlY5bWFXVnNaRjl6Y0dWalgyZGxkRndpS1NrN1hHNTJZWElnWDJOc1lYTnpVM1JoZEdsalVISnBkbUYwWlVacFpXeGtVM0JsWTFObGRDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTlqYkdGemMxOXpkR0YwYVdOZmNISnBkbUYwWlY5bWFXVnNaRjl6Y0dWalgzTmxkRndpS1NrN1hHNTJZWElnWDJOdmJuTjBjblZqZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOWpiMjV6ZEhKMVkzUmNJaWtwTzF4dWRtRnlJRjlqY21WaGRHVkRiR0Z6Y3lBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOWpjbVZoZEdWZlkyeGhjM05jSWlrcE8xeHVkbUZ5SUY5a1pXTnZjbUYwWlNBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOWtaV052Y21GMFpWd2lLU2s3WEc1MllYSWdYMlJsWm1GMWJIUnpJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJSbFptRjFiSFJ6WENJcEtUdGNiblpoY2lCZlpHVm1hVzVsUlc1MWJXVnlZV0pzWlZCeWIzQmxjblJwWlhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZaR1ZtYVc1bFgyVnVkVzFsY21GaWJHVmZjSEp2Y0dWeWRHbGxjMXdpS1NrN1hHNTJZWElnWDJSbFptbHVaVkJ5YjNCbGNuUjVJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJSbFptbHVaVjl3Y205d1pYSjBlVndpS1NrN1hHNTJZWElnWDJWNGRHVnVaSE1nUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZlpYaDBaVzVrYzF3aUtTazdYRzUyWVhJZ1gyZGxkQ0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXlLSEpsY1hWcGNtVW9YQ0l1TDE5blpYUmNJaWtwTzF4dWRtRnlJRjluWlhSUWNtOTBiM1I1Y0dWUFppQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTluWlhSZmNISnZkRzkwZVhCbFgyOW1YQ0lwS1R0Y2JuWmhjaUJmYVc1b1pYSnBkSE1nUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZmFXNW9aWEpwZEhOY0lpa3BPMXh1ZG1GeUlGOXBibWhsY21sMGMweHZiM05sSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgybHVhR1Z5YVhSelgyeHZiM05sWENJcEtUdGNiblpoY2lCZmFXNXBkR2xoYkdsNlpYSkVaV1pwYm1WUWNtOXdaWEowZVNBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOXBibWwwYVdGc2FYcGxjbDlrWldacGJtVmZjSEp2Y0dWeWRIbGNJaWtwTzF4dWRtRnlJRjlwYm1sMGFXRnNhWHBsY2xkaGNtNXBibWRJWld4d1pYSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4ME1paHlaWEYxYVhKbEtGd2lMaTlmYVc1cGRHbGhiR2w2WlhKZmQyRnlibWx1WjE5b1pXeHdaWEpjSWlrcE8xeHVkbUZ5SUY5cGJuTjBZVzVqWlc5bUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYMmx1YzNSaGJtTmxiMlpjSWlrcE8xeHVkbUZ5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXhJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJsdWRHVnliM0JmY21WeGRXbHlaVjlrWldaaGRXeDBYQ0lwS1R0Y2JuWmhjaUJmYVc1MFpYSnZjRkpsY1hWcGNtVlhhV3hrWTJGeVpDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTlwYm5SbGNtOXdYM0psY1hWcGNtVmZkMmxzWkdOaGNtUmNJaWtwTzF4dWRtRnlJRjlwYzA1aGRHbDJaVVoxYm1OMGFXOXVJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDJselgyNWhkR2wyWlY5bWRXNWpkR2x2Ymx3aUtTazdYRzUyWVhJZ1gybDBaWEpoWW14bFZHOUJjbkpoZVNBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOXBkR1Z5WVdKc1pWOTBiMTloY25KaGVWd2lLU2s3WEc1MllYSWdYMmwwWlhKaFlteGxWRzlCY25KaGVVeHBiV2wwSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgybDBaWEpoWW14bFgzUnZYMkZ5Y21GNVgyeHBiV2wwWENJcEtUdGNiblpoY2lCZmFYUmxjbUZpYkdWVWIwRnljbUY1VEdsdGFYUk1iMjl6WlNBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOXBkR1Z5WVdKc1pWOTBiMTloY25KaGVWOXNhVzFwZEY5c2IyOXpaVndpS1NrN1hHNTJZWElnWDJwemVDQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTlxYzNoY0lpa3BPMXh1ZG1GeUlGOXVaWGRCY25KdmQwTm9aV05ySUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgyNWxkMTloY25KdmQxOWphR1ZqYTF3aUtTazdYRzUyWVhJZ1gyNXZia2wwWlhKaFlteGxVbVZ6ZENBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOXViMjVmYVhSbGNtRmliR1ZmY21WemRGd2lLU2s3WEc1MllYSWdYMjV2YmtsMFpYSmhZbXhsVTNCeVpXRmtJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDI1dmJsOXBkR1Z5WVdKc1pWOXpjSEpsWVdSY0lpa3BPMXh1ZG1GeUlGOXZZbXBsWTNSVGNISmxZV1FnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZmIySnFaV04wWDNOd2NtVmhaRndpS1NrN1hHNTJZWElnWDI5aWFtVmpkRmRwZEdodmRYUlFjbTl3WlhKMGFXVnpJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDI5aWFtVmpkRjkzYVhSb2IzVjBYM0J5YjNCbGNuUnBaWE5jSWlrcE8xeHVkbUZ5SUY5dlltcGxZM1JYYVhSb2IzVjBVSEp2Y0dWeWRHbGxjMHh2YjNObElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYMjlpYW1WamRGOTNhWFJvYjNWMFgzQnliM0JsY25ScFpYTmZiRzl2YzJWY0lpa3BPMXh1ZG1GeUlGOXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYM0J2YzNOcFlteGxYMk52Ym5OMGNuVmpkRzl5WDNKbGRIVnlibHdpS1NrN1hHNTJZWElnWDNKbFlXUlBibXg1UlhKeWIzSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4ME1paHlaWEYxYVhKbEtGd2lMaTlmY21WaFpGOXZibXg1WDJWeWNtOXlYQ0lwS1R0Y2JuWmhjaUJmYzJWMElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYM05sZEZ3aUtTazdYRzUyWVhJZ1gzTmxkRkJ5YjNSdmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzTmxkRjl3Y205MGIzUjVjR1ZmYjJaY0lpa3BPMXh1ZG1GeUlGOXphMmx3Um1seWMzUkhaVzVsY21GMGIzSk9aWGgwSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzTnJhWEJmWm1seWMzUmZaMlZ1WlhKaGRHOXlYMjVsZUhSY0lpa3BPMXh1ZG1GeUlGOXpiR2xqWldSVWIwRnljbUY1SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzTnNhV05sWkY5MGIxOWhjbkpoZVZ3aUtTazdYRzUyWVhJZ1gzTnNhV05sWkZSdlFYSnlZWGxNYjI5elpTQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhReUtISmxjWFZwY21Vb1hDSXVMMTl6YkdsalpXUmZkRzlmWVhKeVlYbGZiRzl2YzJWY0lpa3BPMXh1ZG1GeUlGOXpkWEJsY2xCeWIzQkNZWE5sSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzTjFjR1Z5WDNCeWIzQmZZbUZ6WlZ3aUtTazdYRzUyWVhJZ1gzUmhaMmRsWkZSbGJYQnNZWFJsVEdsMFpYSmhiQ0E5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXlLSEpsY1hWcGNtVW9YQ0l1TDE5MFlXZG5aV1JmZEdWdGNHeGhkR1ZmYkdsMFpYSmhiRndpS1NrN1hHNTJZWElnWDNSaFoyZGxaRlJsYlhCc1lYUmxUR2wwWlhKaGJFeHZiM05sSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzUmhaMmRsWkY5MFpXMXdiR0YwWlY5c2FYUmxjbUZzWDJ4dmIzTmxYQ0lwS1R0Y2JuWmhjaUJmZEdoeWIzY2dQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4ME1paHlaWEYxYVhKbEtGd2lMaTlmZEdoeWIzZGNJaWtwTzF4dWRtRnlJRjkwYjBGeWNtRjVJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RESW9jbVZ4ZFdseVpTaGNJaTR2WDNSdlgyRnljbUY1WENJcEtUdGNiblpoY2lCZmRHOURiMjV6ZFcxaFlteGxRWEp5WVhrZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZkRzlmWTI5dWMzVnRZV0pzWlY5aGNuSmhlVndpS1NrN1hHNTJZWElnWDNSdlVISnBiV2wwYVhabElEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZERJb2NtVnhkV2x5WlNoY0lpNHZYM1J2WDNCeWFXMXBkR2wyWlZ3aUtTazdYRzUyWVhJZ1gzUnZVSEp2Y0dWeWRIbExaWGtnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZmRHOWZjSEp2Y0dWeWRIbGZhMlY1WENJcEtUdGNiblpoY2lCZmRIbHdaVTltSUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRElvY21WeGRXbHlaU2hjSWk0dlgzUjVjR1ZmYjJaY0lpa3BPMXh1ZG1GeUlGOTNjbUZ3UVhONWJtTkhaVzVsY21GMGIzSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4ME1paHlaWEYxYVhKbEtGd2lMaTlmZDNKaGNGOWhjM2x1WTE5blpXNWxjbUYwYjNKY0lpa3BPMXh1ZG1GeUlGOTNjbUZ3VG1GMGFYWmxVM1Z3WlhJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwTWloeVpYRjFhWEpsS0Z3aUxpOWZkM0poY0Y5dVlYUnBkbVZmYzNWd1pYSmNJaWtwTzF4dWRtRnlJRjlqY21WaGRHVlRkWEJsY2lBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFF5S0hKbGNYVnBjbVVvWENJdUwxOWpjbVZoZEdWZmMzVndaWEpjSWlrcE8xeHVkbUZ5SUY5cGMwNWhkR2wyWlZKbFpteGxZM1JEYjI1emRISjFZM1FnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBNaWh5WlhGMWFYSmxLRndpTGk5ZmFYTmZibUYwYVhabFgzSmxabXhsWTNSZlkyOXVjM1J5ZFdOMFhDSXBLVHRjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXlLRzlpYWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN1hHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRNklHOWlhbHh1SUNBZ0lIMDdYRzU5WEc0aUxDSjJZWElnSkRadFZUaDNKSE4zWTJobGJIQmxjbk1nUFNCeVpYRjFhWEpsS0Z3aVFITjNZeTlvWld4d1pYSnpYQ0lwTzF4dWRtRnlJQ1EyYlZVNGR5UnFkWE4wWlhoMFpXNWtJRDBnY21WeGRXbHlaU2hjSW1wMWMzUXRaWGgwWlc1a1hDSXBPMXh1WEc1bWRXNWpkR2x2YmlBa2NHRnlZMlZzSkdsdWRHVnliM0JFWldaaGRXeDBLR0VwSUh0Y2JpQWdjbVYwZFhKdUlHRWdKaVlnWVM1ZlgyVnpUVzlrZFd4bElEOGdZUzVrWldaaGRXeDBJRG9nWVR0Y2JuMWNibVoxYm1OMGFXOXVJQ1J3WVhKalpXd2taR1ZtYVc1bFNXNTBaWEp2Y0Vac1lXY29ZU2tnZTF4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWVN3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3ZG1Gc2RXVTZJSFJ5ZFdVc0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpYMHBPMXh1ZlZ4dVpuVnVZM1JwYjI0Z0pIQmhjbU5sYkNSbGVIQnZjblFvWlN3Z2Jpd2dkaXdnY3lrZ2UxeHVJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pTd2diaXdnZTJkbGREb2dkaXdnYzJWME9pQnpMQ0JsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1Y5S1R0Y2JuMWNibHh1SkhCaGNtTmxiQ1JrWldacGJtVkpiblJsY205d1JteGhaeWh0YjJSMWJHVXVaWGh3YjNKMGN5azdYRzVjYmlSd1lYSmpaV3drWlhod2IzSjBLRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmNJbVJsWm1GMWJIUmNJaXdnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPVHNnZlNrN1hHNGtjR0Z5WTJWc0pHVjRjRzl5ZENodGIyUjFiR1V1Wlhod2IzSjBjeXdnWENKRWNtOXdlbTl1WlZ3aUxDQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUFrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNU95QjlLVHRjYmx4dVhHNWNiblpoY2lBa1lqRmtNVGRqWm1JeFpERTFZek0yWVNSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVJRDBnTHlvalgxOVFWVkpGWDE4cUx5Qm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQmNJblZ6WlNCemRISnBZM1JjSWp0Y2JpQWdJQ0JtZFc1amRHbHZiaUFrWWpGa01UZGpabUl4WkRFMVl6TTJZU1JsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUtDa2dlMXh1SUNBZ0lDQWdJQ0FrTm0xVk9IY2tjM2RqYUdWc2NHVnljeTVqYkdGemMwTmhiR3hEYUdWamF5aDBhR2x6TENBa1lqRmtNVGRqWm1JeFpERTFZek0yWVNSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVLVHRjYmlBZ0lDQjlYRzRnSUNBZ0pEWnRWVGgzSkhOM1kyaGxiSEJsY25NdVkzSmxZWFJsUTJ4aGMzTW9KR0l4WkRFM1kyWmlNV1F4TldNek5tRWtaWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1N3Z1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJaR1FnWVc0Z1pYWmxiblFnYkdsemRHVnVaWElnWm05eUlHZHBkbVZ1SUdWMlpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpYjI1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ2YmlobGRtVnVkQ3dnWm00cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5allXeHNZbUZqYTNNZ1BTQjBhR2x6TGw5allXeHNZbUZqYTNNZ2ZId2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUc1aGJXVnpjR0ZqWlNCbWIzSWdkR2hwY3lCbGRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmWTJGc2JHSmhZMnR6VzJWMlpXNTBYU2tnZEdocGN5NWZZMkZzYkdKaFkydHpXMlYyWlc1MFhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5oYkd4aVlXTnJjMXRsZG1WdWRGMHVjSFZ6YUNobWJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSmxiV2wwWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaVzFwZENobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJ4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJR0Z5WjNNZ1BTQnVaWGNnUVhKeVlYa29YMnhsYmlBK0lERWdQeUJmYkdWdUlDMGdNU0E2SURBcExDQmZhMlY1SUQwZ01Uc2dYMnRsZVNBOElGOXNaVzQ3SUY5clpYa3JLeWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iWDJ0bGVTQXRJREZkSUQwZ1lYSm5kVzFsYm5SelcxOXJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqWVd4c1ltRmphM01nUFNCMGFHbHpMbDlqWVd4c1ltRmphM01nZkh3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOaGJHeGlZV05yY3lBOUlIUm9hWE11WDJOaGJHeGlZV05yYzF0bGRtVnVkRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQjBjblZsTENCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlHWmhiSE5sTENCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkydHpLU0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJRjlwZEdWeVlYUnZjaUE5SUdOaGJHeGlZV05yYzF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3T3lBaEtGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1RzZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTmhiR3hpWVdOcklEMGdYM04wWlhBdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheTVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSeWFXZG5aWElnWVNCamIzSnlaWE53YjI1a2FXNW5JRVJQVFNCbGRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZzWlcxbGJuUXBJSFJvYVhNdVpXeGxiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLSFJvYVhNdWJXRnJaVVYyWlc1MEtGd2laSEp2Y0hwdmJtVTZYQ0lnS3lCbGRtVnVkQ3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWR6T2lCaGNtZHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpYldGclpVVjJaVzUwWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdiV0ZyWlVWMlpXNTBLR1YyWlc1MFRtRnRaU3dnWkdWMFlXbHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhjbUZ0Y3lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WaVlteGxjem9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGdVkyVnNZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVjBZV2xzT2lCa1pYUmhhV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzTGtOMWMzUnZiVVYyWlc1MElEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElISmxkSFZ5YmlCdVpYY2dRM1Z6ZEc5dFJYWmxiblFvWlhabGJuUk9ZVzFsTENCd1lYSmhiWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpSU0F4TVNCemRYQndiM0owWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMEZRU1M5RGRYTjBiMjFGZG1WdWRDOURkWE4wYjIxRmRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaWFowSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUlhabGJuUW9YQ0pEZFhOMGIyMUZkbVZ1ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhaMExtbHVhWFJEZFhOMGIyMUZkbVZ1ZENobGRtVnVkRTVoYldVc0lIQmhjbUZ0Y3k1aWRXSmliR1Z6TENCd1lYSmhiWE11WTJGdVkyVnNZV0pzWlN3Z2NHRnlZVzF6TG1SbGRHRnBiQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGRuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVWdaWFpsYm5RZ2JHbHpkR1Z1WlhJZ1ptOXlJR2RwZG1WdUlHVjJaVzUwTGlCSlppQm1iaUJwY3lCdWIzUWdjSEp2ZG1sa1pXUXNJR0ZzYkNCbGRtVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiR2x6ZEdWdVpYSnpJR1p2Y2lCMGFHRjBJR1YyWlc1MElIZHBiR3dnWW1VZ2NtVnRiM1psWkM0Z1NXWWdibVZwZEdobGNpQnBjeUJ3Y205MmFXUmxaQ3dnWVd4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGRtVnVkQ0JzYVhOMFpXNWxjbk1nZDJsc2JDQmlaU0J5WlcxdmRtVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW05bVpsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUc5bVppaGxkbVZ1ZEN3Z1ptNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJOaGJHeGlZV05yY3lCOGZDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTmhiR3hpWVdOcmN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE53WldOcFptbGpJR1YyWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05oYkd4aVlXTnJjeUE5SUhSb2FYTXVYMk5oYkd4aVlXTnJjMXRsZG1WdWRGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGallXeHNZbUZqYTNNcElISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKbGJXOTJaU0JoYkd3Z2FHRnVaR3hsY25OY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZlkyRnNiR0poWTJ0elcyVjJaVzUwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklISmxiVzkyWlNCemNHVmphV1pwWXlCb1lXNWtiR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJwSUQwZ01Ec2dhU0E4SUdOaGJHeGlZV05yY3k1c1pXNW5kR2c3SUdrckt5bDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGJHeGlZV05ySUQwOVBTQm1iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnR6TG5Od2JHbGpaU2hwTENBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdYU2s3WEc0Z0lDQWdjbVYwZFhKdUlDUmlNV1F4TjJObVlqRmtNVFZqTXpaaEpHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNems3WEc1OUtDazdYRzVjYmx4dVhHNTJZWElnSkRZNVl6WXhPRGc0WTJNeFpqUmpOVGNrWlhod2IzSjBjeUE5SUh0OU8xeHVKRFk1WXpZeE9EZzRZMk14WmpSak5UY2taWGh3YjNKMGN5QTlJRndpUEdScGRpQmpiR0Z6Y3oxY1hGd2laSG90Y0hKbGRtbGxkeUJrZWkxbWFXeGxMWEJ5WlhacFpYZGNYRndpUGx4Y2JpQWdQR1JwZGlCamJHRnpjejFjWEZ3aVpIb3RhVzFoWjJWY1hGd2lQanhwYldjZ1pHRjBZUzFrZWkxMGFIVnRZbTVoYVd3OVhGeGNJbHhjWENJK1BDOWthWFkrWEZ4dUlDQThaR2wySUdOc1lYTnpQVnhjWENKa2VpMWtaWFJoYVd4elhGeGNJajVjWEc0Z0lDQWdQR1JwZGlCamJHRnpjejFjWEZ3aVpIb3RjMmw2WlZ4Y1hDSStQSE53WVc0Z1pHRjBZUzFrZWkxemFYcGxQVnhjWENKY1hGd2lQand2YzNCaGJqNDhMMlJwZGo1Y1hHNGdJQ0FnUEdScGRpQmpiR0Z6Y3oxY1hGd2laSG90Wm1sc1pXNWhiV1ZjWEZ3aVBqeHpjR0Z1SUdSaGRHRXRaSG90Ym1GdFpUMWNYRndpWEZ4Y0lqNDhMM053WVc0K1BDOWthWFkrWEZ4dUlDQThMMlJwZGo1Y1hHNGdJRHhrYVhZZ1kyeGhjM005WEZ4Y0ltUjZMWEJ5YjJkeVpYTnpYRnhjSWo1Y1hHNGdJQ0FnUEhOd1lXNGdZMnhoYzNNOVhGeGNJbVI2TFhWd2JHOWhaRnhjWENJZ1pHRjBZUzFrZWkxMWNHeHZZV1J3Y205bmNtVnpjejFjWEZ3aVhGeGNJajQ4TDNOd1lXNCtYRnh1SUNBOEwyUnBkajVjWEc0Z0lEeGthWFlnWTJ4aGMzTTlYRnhjSW1SNkxXVnljbTl5TFcxbGMzTmhaMlZjWEZ3aVBqeHpjR0Z1SUdSaGRHRXRaSG90WlhKeWIzSnRaWE56WVdkbFBWeGNYQ0pjWEZ3aVBqd3ZjM0JoYmo0OEwyUnBkajVjWEc0Z0lEeGthWFlnWTJ4aGMzTTlYRnhjSW1SNkxYTjFZMk5sYzNNdGJXRnlhMXhjWENJK1hGeHVJQ0FnSUR4emRtY2dkMmxrZEdnOVhGeGNJalUwWEZ4Y0lpQm9aV2xuYUhROVhGeGNJalUwWEZ4Y0lpQjJhV1YzUW05NFBWeGNYQ0l3SURBZ05UUWdOVFJjWEZ3aUlHWnBiR3c5WEZ4Y0luZG9hWFJsWEZ4Y0lpQjRiV3h1Y3oxY1hGd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtZGNYRndpUGx4Y2JpQWdJQ0FnSUR4d1lYUm9JR1E5WEZ4Y0lrMHhNQzR5TURjeElESTVMamM1TWpsTU1UUXVNamt5T1NBeU5TNDNNRGN4UXpFMExqWTRNelFnTWpVdU16RTJOaUF4TlM0ek1UWTJJREkxTGpNeE5qWWdNVFV1TnpBM01TQXlOUzQzTURjeFRESXhMakk1TWprZ016RXVNamt5T1VNeU1TNDJPRE0wSURNeExqWTRNelFnTWpJdU16RTJOaUF6TVM0Mk9ETTBJREl5TGpjd056RWdNekV1TWpreU9Vd3pPQzR5T1RJNUlERTFMamN3TnpGRE16Z3VOamd6TkNBeE5TNHpNVFkySURNNUxqTXhOallnTVRVdU16RTJOaUF6T1M0M01EY3hJREUxTGpjd056Rk1ORE11TnpreU9TQXhPUzQzT1RJNVF6UTBMakU0TXpRZ01qQXVNVGd6TkNBME5DNHhPRE0wSURJd0xqZ3hOallnTkRNdU56a3lPU0F5TVM0eU1EY3hUREl5TGpjd056RWdOREl1TWpreU9VTXlNaTR6TVRZMklEUXlMalk0TXpRZ01qRXVOamd6TkNBME1pNDJPRE0wSURJeExqSTVNamtnTkRJdU1qa3lPVXd4TUM0eU1EY3hJRE14TGpJd056RkRPUzQ0TVRZMU9DQXpNQzQ0TVRZMklEa3VPREUyTlRnZ016QXVNVGd6TkNBeE1DNHlNRGN4SURJNUxqYzVNamxhWEZ4Y0lqNDhMM0JoZEdnK1hGeHVJQ0FnSUR3dmMzWm5QbHhjYmlBZ1BDOWthWFkrWEZ4dUlDQThaR2wySUdOc1lYTnpQVnhjWENKa2VpMWxjbkp2Y2kxdFlYSnJYRnhjSWo1Y1hHNGdJQ0FnUEhOMlp5QjNhV1IwYUQxY1hGd2lOVFJjWEZ3aUlHaGxhV2RvZEQxY1hGd2lOVFJjWEZ3aUlIWnBaWGRDYjNnOVhGeGNJakFnTUNBMU5DQTFORnhjWENJZ1ptbHNiRDFjWEZ3aWQyaHBkR1ZjWEZ3aUlIaHRiRzV6UFZ4Y1hDSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMloxeGNYQ0krWEZ4dUlDQWdJQ0FnUEhCaGRHZ2daRDFjWEZ3aVRUSTJMakk1TWprZ01qQXVNamt5T1V3eE9TNHlNRGN4SURFekxqSXdOekZETVRndU9ERTJOaUF4TWk0NE1UWTJJREU0TGpFNE16UWdNVEl1T0RFMk5pQXhOeTQzT1RJNUlERXpMakl3TnpGTU1UTXVNakEzTVNBeE55NDNPVEk1UXpFeUxqZ3hOallnTVRndU1UZ3pOQ0F4TWk0NE1UWTJJREU0TGpneE5qWWdNVE11TWpBM01TQXhPUzR5TURjeFRESXdMakk1TWprZ01qWXVNamt5T1VNeU1DNDJPRE0wSURJMkxqWTRNelFnTWpBdU5qZ3pOQ0F5Tnk0ek1UWTJJREl3TGpJNU1qa2dNamN1TnpBM01Vd3hNeTR5TURjeElETTBMamM1TWpsRE1USXVPREUyTmlBek5TNHhPRE0wSURFeUxqZ3hOallnTXpVdU9ERTJOaUF4TXk0eU1EY3hJRE0yTGpJd056Rk1NVGN1TnpreU9TQTBNQzQzT1RJNVF6RTRMakU0TXpRZ05ERXVNVGd6TkNBeE9DNDRNVFkySURReExqRTRNelFnTVRrdU1qQTNNU0EwTUM0M09USTVUREkyTGpJNU1qa2dNek11TnpBM01VTXlOaTQyT0RNMElETXpMak14TmpZZ01qY3VNekUyTmlBek15NHpNVFkySURJM0xqY3dOekVnTXpNdU56QTNNVXd6TkM0M09USTVJRFF3TGpjNU1qbERNelV1TVRnek5DQTBNUzR4T0RNMElETTFMamd4TmpZZ05ERXVNVGd6TkNBek5pNHlNRGN4SURRd0xqYzVNamxNTkRBdU56a3lPU0F6Tmk0eU1EY3hRelF4TGpFNE16UWdNelV1T0RFMk5pQTBNUzR4T0RNMElETTFMakU0TXpRZ05EQXVOemt5T1NBek5DNDNPVEk1VERNekxqY3dOekVnTWpjdU56QTNNVU16TXk0ek1UWTJJREkzTGpNeE5qWWdNek11TXpFMk5pQXlOaTQyT0RNMElETXpMamN3TnpFZ01qWXVNamt5T1V3ME1DNDNPVEk1SURFNUxqSXdOekZETkRFdU1UZ3pOQ0F4T0M0NE1UWTJJRFF4TGpFNE16UWdNVGd1TVRnek5DQTBNQzQzT1RJNUlERTNMamM1TWpsTU16WXVNakEzTVNBeE15NHlNRGN4UXpNMUxqZ3hOallnTVRJdU9ERTJOaUF6TlM0eE9ETTBJREV5TGpneE5qWWdNelF1TnpreU9TQXhNeTR5TURjeFRESTNMamN3TnpFZ01qQXVNamt5T1VNeU55NHpNVFkySURJd0xqWTRNelFnTWpZdU5qZ3pOQ0F5TUM0Mk9ETTBJREkyTGpJNU1qa2dNakF1TWpreU9WcGNYRndpUGp3dmNHRjBhRDVjWEc0Z0lDQWdQQzl6ZG1jK1hGeHVJQ0E4TDJScGRqNWNYRzQ4TDJScGRqNWNYRzVjSWp0Y2JseHVYRzUyWVhJZ0pHSTJOVGRqTURNeE5UVm1ZekkzWlRJa2RtRnlKR1JsWm1GMWJIUlBjSFJwYjI1eklEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0tpQklZWE1nZEc4Z1ltVWdjM0JsWTJsbWFXVmtJRzl1SUdWc1pXMWxiblJ6SUc5MGFHVnlJSFJvWVc0Z1ptOXliU0FvYjNJZ2QyaGxiaUIwYUdVZ1ptOXliU0JrYjJWemJpZDBYRzRnSUNBcUlHaGhkbVVnWVc0Z1lHRmpkR2x2Ym1BZ1lYUjBjbWxpZFhSbEtTNWNiaUFnSUNwY2JpQWdJQ29nV1c5MUlHTmhiaUJoYkhOdklIQnliM1pwWkdVZ1lTQm1kVzVqZEdsdmJpQjBhR0YwSUhkcGJHd2dZbVVnWTJGc2JHVmtJSGRwZEdnZ1lHWnBiR1Z6WUNCaGJtUmNiaUFnSUNvZ1lHUmhkR0ZDYkc5amEzTmdJQ0JoYm1RZ2JYVnpkQ0J5WlhSMWNtNGdkR2hsSUhWeWJDQmhjeUJ6ZEhKcGJtY3VYRzRnSUNBcUx5QjFjbXc2SUc1MWJHd3NYRzRnSUNBZ0x5b3FYRzRnSUNBcUlFTmhiaUJpWlNCamFHRnVaMlZrSUhSdklHQmNJbkIxZEZ3aVlDQnBaaUJ1WldObGMzTmhjbmt1SUZsdmRTQmpZVzRnWVd4emJ5QndjbTkyYVdSbElHRWdablZ1WTNScGIyNWNiaUFnSUNvZ2RHaGhkQ0IzYVd4c0lHSmxJR05oYkd4bFpDQjNhWFJvSUdCbWFXeGxjMkFnWVc1a0lHMTFjM1FnY21WMGRYSnVJSFJvWlNCdFpYUm9iMlFnS0hOcGJtTmxJR0IyTXk0eE1pNHdZQ2t1WEc0Z0lDQXFMeUJ0WlhSb2IyUTZJRndpY0c5emRGd2lMRnh1SUNBZ0lDOHFLbHh1SUNBZ0tpQlhhV3hzSUdKbElITmxkQ0J2YmlCMGFHVWdXRWhTWlhGMVpYTjBMbHh1SUNBZ0tpOGdkMmwwYUVOeVpXUmxiblJwWVd4ek9pQm1ZV3h6WlN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nVkdobElIUnBiV1Z2ZFhRZ1ptOXlJSFJvWlNCWVNGSWdjbVZ4ZFdWemRITWdhVzRnYldsc2JHbHpaV052Ym1SeklDaHphVzVqWlNCZ2RqUXVOQzR3WUNrdVhHNGdJQ0FxSUVsbUlITmxkQ0IwYnlCdWRXeHNJRzl5SURBc0lHNXZJSFJwYldWdmRYUWdhWE1nWjI5cGJtY2dkRzhnWW1VZ2MyVjBMbHh1SUNBZ0tpOGdkR2x0Wlc5MWREb2diblZzYkN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nU0c5M0lHMWhibmtnWm1sc1pTQjFjR3h2WVdSeklIUnZJSEJ5YjJObGMzTWdhVzRnY0dGeVlXeHNaV3dnS0ZObFpTQjBhR1ZjYmlBZ0lDb2dSVzV4ZFdWMWFXNW5JR1pwYkdVZ2RYQnNiMkZrY3lCa2IyTjFiV1Z1ZEdGMGFXOXVJSE5sWTNScGIyNGdabTl5SUcxdmNtVWdhVzVtYnlsY2JpQWdJQ292SUhCaGNtRnNiR1ZzVlhCc2IyRmtjem9nTWl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nVjJobGRHaGxjaUIwYnlCelpXNWtJRzExYkhScGNHeGxJR1pwYkdWeklHbHVJRzl1WlNCeVpYRjFaWE4wTGlCSlpseHVJQ0FnS2lCMGFHbHpJR2wwSUhObGRDQjBieUIwY25WbExDQjBhR1Z1SUhSb1pTQm1ZV3hzWW1GamF5Qm1hV3hsSUdsdWNIVjBJR1ZzWlcxbGJuUWdkMmxzYkZ4dUlDQWdLaUJvWVhabElIUm9aU0JnYlhWc2RHbHdiR1ZnSUdGMGRISnBZblYwWlNCaGN5QjNaV3hzTGlCVWFHbHpJRzl3ZEdsdmJpQjNhV3hzWEc0Z0lDQXFJR0ZzYzI4Z2RISnBaMmRsY2lCaFpHUnBkR2x2Ym1Gc0lHVjJaVzUwY3lBb2JHbHJaU0JnY0hKdlkyVnpjMmx1WjIxMWJIUnBjR3hsWUNrdUlGTmxaU0IwYUdVZ1pYWmxiblJ6WEc0Z0lDQXFJR1J2WTNWdFpXNTBZWFJwYjI0Z2MyVmpkR2x2YmlCbWIzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJpNWNiaUFnSUNvdklIVndiRzloWkUxMWJIUnBjR3hsT2lCbVlXeHpaU3hjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQjViM1VnZDJGdWRDQm1hV3hsY3lCMGJ5QmlaU0IxY0d4dllXUmxaQ0JwYmlCamFIVnVhM01nZEc4Z2VXOTFjaUJ6WlhKMlpYSXVJRlJvYVhNZ1kyRnVKM1FnWW1WY2JpQWdJQ29nZFhObFpDQnBiaUJqYjIxaWFXNWhkR2x2YmlCM2FYUm9JR0IxY0d4dllXUk5kV3gwYVhCc1pXQXVYRzRnSUNBcVhHNGdJQ0FxSUZObFpTQmJZMmgxYm10elZYQnNiMkZrWldSZEtDTmpiMjVtYVdjdFkyaDFibXR6VlhCc2IyRmtaV1FwSUdadmNpQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z1ptbHVZV3hwYzJVZ1lXNGdkWEJzYjJGa0xseHVJQ0FnS2k4Z1kyaDFibXRwYm1jNklHWmhiSE5sTEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJKWmlCZ1kyaDFibXRwYm1kZ0lHbHpJR1Z1WVdKc1pXUXNJSFJvYVhNZ1pHVm1hVzVsY3lCM2FHVjBhR1Z5SUNvcVpYWmxjbmtxS2lCbWFXeGxJSE5vYjNWc1pDQmlaU0JqYUhWdWEyVmtMRnh1SUNBZ0tpQmxkbVZ1SUdsbUlIUm9aU0JtYVd4bElITnBlbVVnYVhNZ1ltVnNiM2NnWTJoMWJtdFRhWHBsTGlCVWFHbHpJRzFsWVc1ekxDQjBhR0YwSUhSb1pTQmhaR1JwZEdsdmJtRnNJR05vZFc1clhHNGdJQ0FxSUdadmNtMGdaR0YwWVNCM2FXeHNJR0psSUhOMVltMXBkSFJsWkNCaGJtUWdkR2hsSUdCamFIVnVhM05WY0d4dllXUmxaR0FnWTJGc2JHSmhZMnNnZDJsc2JDQmlaU0JwYm5admEyVmtMbHh1SUNBZ0tpOGdabTl5WTJWRGFIVnVhMmx1WnpvZ1ptRnNjMlVzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRWxtSUdCamFIVnVhMmx1WjJBZ2FYTWdZSFJ5ZFdWZ0xDQjBhR1Z1SUhSb2FYTWdaR1ZtYVc1bGN5QjBhR1VnWTJoMWJtc2djMmw2WlNCcGJpQmllWFJsY3k1Y2JpQWdJQ292SUdOb2RXNXJVMmw2WlRvZ01qQTVOekUxTWl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nU1dZZ1lIUnlkV1ZnTENCMGFHVWdhVzVrYVhacFpIVmhiQ0JqYUhWdWEzTWdiMllnWVNCbWFXeGxJR0Z5WlNCaVpXbHVaeUIxY0d4dllXUmxaQ0J6YVcxMWJIUmhibVZ2ZFhOc2VTNWNiaUFnSUNvdklIQmhjbUZzYkdWc1EyaDFibXRWY0d4dllXUnpPaUJtWVd4elpTeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1YyaGxkR2hsY2lCaElHTm9kVzVySUhOb2IzVnNaQ0JpWlNCeVpYUnlhV1ZrSUdsbUlHbDBJR1poYVd4ekxseHVJQ0FnS2k4Z2NtVjBjbmxEYUhWdWEzTTZJR1poYkhObExGeHVJQ0FnSUM4cUtseHVJQ0FnS2lCSlppQmdjbVYwY25sRGFIVnVhM05nSUdseklIUnlkV1VzSUdodmR5QnRZVzU1SUhScGJXVnpJSE5vYjNWc1pDQnBkQ0JpWlNCeVpYUnlhV1ZrTGx4dUlDQWdLaThnY21WMGNubERhSFZ1YTNOTWFXMXBkRG9nTXl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nVkdobElHMWhlR2x0ZFcwZ1ptbHNaWE5wZW1VZ0tHbHVJRTFwUWlrZ2RHaGhkQ0JwY3lCaGJHeHZkMlZrSUhSdklHSmxJSFZ3Ykc5aFpHVmtMbHh1SUNBZ0tpOGdiV0Y0Um1sc1pYTnBlbVU2SURJMU5peGNiaUFnSUNBdktpcGNiaUFnSUNvZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdacGJHVWdjR0Z5WVcwZ2RHaGhkQ0JuWlhSeklIUnlZVzV6Wm1WeWNtVmtMbHh1SUNBZ0tpQXFLazVQVkVVcUtqb2dTV1lnZVc5MUlHaGhkbVVnZEdobElHOXdkR2x2YmlBZ1lIVndiRzloWkUxMWJIUnBjR3hsWUNCelpYUWdkRzhnWUhSeWRXVmdMQ0IwYUdWdVhHNGdJQ0FxSUVSeWIzQjZiMjVsSUhkcGJHd2dZWEJ3Wlc1a0lHQmJYV0FnZEc4Z2RHaGxJRzVoYldVdVhHNGdJQ0FxTHlCd1lYSmhiVTVoYldVNklGd2labWxzWlZ3aUxGeHVJQ0FnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUhSb2RXMWlibUZwYkhNZ1ptOXlJR2x0WVdkbGN5QnphRzkxYkdRZ1ltVWdaMlZ1WlhKaGRHVmtYRzRnSUNBcUx5QmpjbVZoZEdWSmJXRm5aVlJvZFcxaWJtRnBiSE02SUhSeWRXVXNYRzRnSUNBZ0x5b3FYRzRnSUNBcUlFbHVJRTFDTGlCWGFHVnVJSFJvWlNCbWFXeGxibUZ0WlNCbGVHTmxaV1J6SUhSb2FYTWdiR2x0YVhRc0lIUm9aU0IwYUhWdFltNWhhV3dnZDJsc2JDQnViM1FnWW1VZ1oyVnVaWEpoZEdWa0xseHVJQ0FnS2k4Z2JXRjRWR2gxYldKdVlXbHNSbWxzWlhOcGVtVTZJREV3TEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJKWmlCZ2JuVnNiR0FzSUhSb1pTQnlZWFJwYnlCdlppQjBhR1VnYVcxaFoyVWdkMmxzYkNCaVpTQjFjMlZrSUhSdklHTmhiR04xYkdGMFpTQnBkQzVjYmlBZ0lDb3ZJSFJvZFcxaWJtRnBiRmRwWkhSb09pQXhNakFzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCellXMWxJR0Z6SUdCMGFIVnRZbTVoYVd4WGFXUjBhR0F1SUVsbUlHSnZkR2dnWVhKbElHNTFiR3dzSUdsdFlXZGxjeUIzYVd4c0lHNXZkQ0JpWlNCeVpYTnBlbVZrTGx4dUlDQWdLaThnZEdoMWJXSnVZV2xzU0dWcFoyaDBPaUF4TWpBc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVodmR5QjBhR1VnYVcxaFoyVnpJSE5vYjNWc1pDQmlaU0J6WTJGc1pXUWdaRzkzYmlCcGJpQmpZWE5sSUdKdmRHZ3NJR0IwYUhWdFltNWhhV3hYYVdSMGFHQWdZVzVrSUdCMGFIVnRZbTVoYVd4SVpXbG5hSFJnSUdGeVpTQndjbTkyYVdSbFpDNWNiaUFnSUNvZ1EyRnVJR0psSUdWcGRHaGxjaUJnWTI5dWRHRnBibUFnYjNJZ1lHTnliM0JnTGx4dUlDQWdLaThnZEdoMWJXSnVZV2xzVFdWMGFHOWtPaUJjSW1OeWIzQmNJaXhjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dTV1lnYzJWMExDQnBiV0ZuWlhNZ2QybHNiQ0JpWlNCeVpYTnBlbVZrSUhSdklIUm9aWE5sSUdScGJXVnVjMmx2Ym5NZ1ltVm1iM0psSUdKbGFXNW5JQ29xZFhCc2IyRmtaV1FxS2k1Y2JpQWdJQ29nU1dZZ2IyNXNlU0J2Ym1Vc0lHQnlaWE5wZW1WWGFXUjBhR0FnS2lwdmNpb3FJR0J5WlhOcGVtVklaV2xuYUhSZ0lHbHpJSEJ5YjNacFpHVmtMQ0IwYUdVZ2IzSnBaMmx1WVd3Z1lYTndaV04wWEc0Z0lDQXFJSEpoZEdsdklHOW1JSFJvWlNCbWFXeGxJSGRwYkd3Z1ltVWdjSEpsYzJWeWRtVmtMbHh1SUNBZ0tseHVJQ0FnS2lCVWFHVWdZRzl3ZEdsdmJuTXVkSEpoYm5ObWIzSnRSbWxzWldBZ1puVnVZM1JwYjI0Z2RYTmxjeUIwYUdWelpTQnZjSFJwYjI1ekxDQnpieUJwWmlCMGFHVWdZSFJ5WVc1elptOXliVVpwYkdWZ0lHWjFibU4wYVc5dVhHNGdJQ0FxSUdseklHOTJaWEp5YVdSa1pXNHNJSFJvWlhObElHOXdkR2x2Ym5NZ1pHOXVKM1FnWkc4Z1lXNTVkR2hwYm1jdVhHNGdJQ0FxTHlCeVpYTnBlbVZYYVdSMGFEb2diblZzYkN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nVTJWbElHQnlaWE5wZW1WWGFXUjBhR0F1WEc0Z0lDQXFMeUJ5WlhOcGVtVklaV2xuYUhRNklHNTFiR3dzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCdGFXMWxJSFI1Y0dVZ2IyWWdkR2hsSUhKbGMybDZaV1FnYVcxaFoyVWdLR0psWm05eVpTQnBkQ0JuWlhSeklIVndiRzloWkdWa0lIUnZJSFJvWlNCelpYSjJaWElwTGx4dUlDQWdLaUJKWmlCZ2JuVnNiR0FnZEdobElHOXlhV2RwYm1Gc0lHMXBiV1VnZEhsd1pTQjNhV3hzSUdKbElIVnpaV1F1SUZSdklHWnZjbU5sSUdwd1pXY3NJR1p2Y2lCbGVHRnRjR3hsTENCMWMyVWdZR2x0WVdkbEwycHdaV2RnTGx4dUlDQWdLaUJUWldVZ1lISmxjMmw2WlZkcFpIUm9ZQ0JtYjNJZ2JXOXlaU0JwYm1admNtMWhkR2x2Ymk1Y2JpQWdJQ292SUhKbGMybDZaVTFwYldWVWVYQmxPaUJ1ZFd4c0xGeHVJQ0FnSUM4cUtseHVJQ0FnS2lCVWFHVWdjWFZoYkdsMGVTQnZaaUIwYUdVZ2NtVnphWHBsWkNCcGJXRm5aWE11SUZObFpTQmdjbVZ6YVhwbFYybGtkR2hnTGx4dUlDQWdLaThnY21WemFYcGxVWFZoYkdsMGVUb2dNQzQ0TEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJJYjNjZ2RHaGxJR2x0WVdkbGN5QnphRzkxYkdRZ1ltVWdjMk5oYkdWa0lHUnZkMjRnYVc0Z1kyRnpaU0JpYjNSb0xDQmdjbVZ6YVhwbFYybGtkR2hnSUdGdVpDQmdjbVZ6YVhwbFNHVnBaMmgwWUNCaGNtVWdjSEp2ZG1sa1pXUXVYRzRnSUNBcUlFTmhiaUJpWlNCbGFYUm9aWElnWUdOdmJuUmhhVzVnSUc5eUlHQmpjbTl3WUM1Y2JpQWdJQ292SUhKbGMybDZaVTFsZEdodlpEb2dYQ0pqYjI1MFlXbHVYQ0lzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCaVlYTmxJSFJvWVhRZ2FYTWdkWE5sWkNCMGJ5QmpZV3hqZFd4aGRHVWdkR2hsSUNvcVpHbHpjR3hoZVdWa0tpb2dabWxzWlhOcGVtVXVJRmx2ZFNCallXNWNiaUFnSUNvZ1kyaGhibWRsSUhSb2FYTWdkRzhnTVRBeU5DQnBaaUI1YjNVZ2QyOTFiR1FnY21GMGFHVnlJR1JwYzNCc1lYa2dhMmxpYVdKNWRHVnpMQ0J0WldKcFlubDBaWE1zWEc0Z0lDQXFJR1YwWXk0dUxpQXhNREkwSUdseklIUmxZMmh1YVdOaGJHeDVJR2x1WTI5eWNtVmpkQ3dnWW1WallYVnpaU0JnTVRBeU5DQmllWFJsYzJBZ1lYSmxJR0F4SUd0cFltbGllWFJsWUZ4dUlDQWdLaUJ1YjNRZ1lERWdhMmxzYjJKNWRHVmdMaUJaYjNVZ1kyRnVJR05vWVc1blpTQjBhR2x6SUhSdklHQXhNREkwWUNCcFppQjViM1VnWkc5dUozUWdZMkZ5WlNCaFltOTFkRnh1SUNBZ0tpQjJZV3hwWkdsMGVTNWNiaUFnSUNvdklHWnBiR1Z6YVhwbFFtRnpaVG9nTVRBd01DeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1NXWWdibTkwSUdCdWRXeHNZQ0JrWldacGJtVnpJR2h2ZHlCdFlXNTVJR1pwYkdWeklIUm9hWE1nUkhKdmNIcHZibVVnYUdGdVpHeGxjeTRnU1dZZ2FYUWdaWGhqWldWa2N5eGNiaUFnSUNvZ2RHaGxJR1YyWlc1MElHQnRZWGhtYVd4bGMyVjRZMlZsWkdWa1lDQjNhV3hzSUdKbElHTmhiR3hsWkM0Z1ZHaGxJR1J5YjNCNmIyNWxJR1ZzWlcxbGJuUWdaMlYwY3lCMGFHVmNiaUFnSUNvZ1kyeGhjM01nWUdSNkxXMWhlQzFtYVd4bGN5MXlaV0ZqYUdWa1lDQmhZMk52Y21ScGJtZHNlU0J6YnlCNWIzVWdZMkZ1SUhCeWIzWnBaR1VnZG1semRXRnNYRzRnSUNBcUlHWmxaV1JpWVdOckxseHVJQ0FnS2k4Z2JXRjRSbWxzWlhNNklHNTFiR3dzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRUZ1SUc5d2RHbHZibUZzSUc5aWFtVmpkQ0IwYnlCelpXNWtJR0ZrWkdsMGFXOXVZV3dnYUdWaFpHVnljeUIwYnlCMGFHVWdjMlZ5ZG1WeUxpQkZaenBjYmlBZ0lDb2dZSHNnWENKTmVTMUJkMlZ6YjIxbExVaGxZV1JsY2x3aU9pQmNJbWhsWVdSbGNpQjJZV3gxWlZ3aUlIMWdYRzRnSUNBcUx5Qm9aV0ZrWlhKek9pQnVkV3hzTEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJUYUc5MWJHUWdkR2hsSUdSbFptRjFiSFFnYUdWaFpHVnljeUJpWlNCelpYUWdiM0lnYm05MFAxeHVJQ0FnS2lCQlkyTmxjSFE2SUdGd2NHeHBZMkYwYVc5dUwycHpiMjRnUEMwZ1ptOXlJSEpsY1hWbGMzUnBibWNnYW5OdmJpQnlaWE53YjI1elpWeHVJQ0FnS2lCRFlXTm9aUzFEYjI1MGNtOXNPaUJ1YnkxallXTm9aU0E4TFNCU1pYRjFaWE4wSUhOb2IzVnNaRzUwSUdKbElHTmhZMmhsWkZ4dUlDQWdLaUJZTFZKbGNYVmxjM1JsWkMxWGFYUm9PaUJZVFV4SWRIUndVbVZ4ZFdWemRDQThMU0JYWlNCelpXNTBJSFJvWlNCeVpYRjFaWE4wSUhacFlTQllUVXhJZEhSd1VtVnhkV1Z6ZEZ4dUlDQWdLaThnWkdWbVlYVnNkRWhsWVdSbGNuTTZJSFJ5ZFdVc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVsbUlHQjBjblZsWUN3Z2RHaGxJR1J5YjNCNmIyNWxJR1ZzWlcxbGJuUWdhWFJ6Wld4bUlIZHBiR3dnWW1VZ1kyeHBZMnRoWW14bExDQnBaaUJnWm1Gc2MyVmdYRzRnSUNBcUlHNXZkR2hwYm1jZ2QybHNiQ0JpWlNCamJHbGphMkZpYkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRmx2ZFNCallXNGdZV3h6YnlCd1lYTnpJR0Z1SUVoVVRVd2daV3hsYldWdWRDd2dZU0JEVTFNZ2MyVnNaV04wYjNJZ0tHWnZjaUJ0ZFd4MGFYQnNaU0JsYkdWdFpXNTBjeWxjYmlBZ0lDb2diM0lnWVc0Z1lYSnlZWGtnYjJZZ2RHaHZjMlV1SUVsdUlIUm9ZWFFnWTJGelpTd2dZV3hzSUc5bUlIUm9iM05sSUdWc1pXMWxiblJ6SUhkcGJHd2dkSEpwWjJkbGNpQmhibHh1SUNBZ0tpQjFjR3h2WVdRZ2QyaGxiaUJqYkdsamEyVmtMbHh1SUNBZ0tpOGdZMnhwWTJ0aFlteGxPaUIwY25WbExGeHVJQ0FnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUdocFpHUmxiaUJtYVd4bGN5QnBiaUJrYVhKbFkzUnZjbWxsY3lCemFHOTFiR1FnWW1VZ2FXZHViM0psWkM1Y2JpQWdJQ292SUdsbmJtOXlaVWhwWkdSbGJrWnBiR1Z6T2lCMGNuVmxMRnh1SUNBZ0lDOHFLbHh1SUNBZ0tpQlVhR1VnWkdWbVlYVnNkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQnZaaUJnWVdOalpYQjBZQ0JqYUdWamEzTWdkR2hsSUdacGJHVW5jeUJ0YVcxbElIUjVjR1VnYjNKY2JpQWdJQ29nWlhoMFpXNXphVzl1SUdGbllXbHVjM1FnZEdocGN5QnNhWE4wTGlCVWFHbHpJR2x6SUdFZ1kyOXRiV0VnYzJWd1lYSmhkR1ZrSUd4cGMzUWdiMllnYldsdFpWeHVJQ0FnS2lCMGVYQmxjeUJ2Y2lCbWFXeGxJR1Y0ZEdWdWMybHZibk11WEc0Z0lDQXFYRzRnSUNBcUlFVm5Mam9nWUdsdFlXZGxMeW9zWVhCd2JHbGpZWFJwYjI0dmNHUm1MQzV3YzJSZ1hHNGdJQ0FxWEc0Z0lDQXFJRWxtSUhSb1pTQkVjbTl3ZW05dVpTQnBjeUJnWTJ4cFkydGhZbXhsWUNCMGFHbHpJRzl3ZEdsdmJpQjNhV3hzSUdGc2MyOGdZbVVnZFhObFpDQmhjMXh1SUNBZ0tpQmJZR0ZqWTJWd2RHQmRLR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlNGUk5UQzlGYkdWdFpXNTBMMmx1Y0hWMEkyRjBkSEl0WVdOalpYQjBLVnh1SUNBZ0tpQndZWEpoYldWMFpYSWdiMjRnZEdobElHaHBaR1JsYmlCbWFXeGxJR2x1Y0hWMElHRnpJSGRsYkd3dVhHNGdJQ0FxTHlCaFkyTmxjSFJsWkVacGJHVnpPaUJ1ZFd4c0xGeHVJQ0FnSUM4cUtseHVJQ0FnS2lBcUtrUmxjSEpsWTJGMFpXUWhLaXBjYmlBZ0lDb2dWWE5sSUdGalkyVndkR1ZrUm1sc1pYTWdhVzV6ZEdWaFpDNWNiaUFnSUNvdklHRmpZMlZ3ZEdWa1RXbHRaVlI1Y0dWek9pQnVkV3hzTEZ4dUlDQWdJQzhxS2x4dUlDQWdLaUJKWmlCbVlXeHpaU3dnWm1sc1pYTWdkMmxzYkNCaVpTQmhaR1JsWkNCMGJ5QjBhR1VnY1hWbGRXVWdZblYwSUhSb1pTQnhkV1YxWlNCM2FXeHNJRzV2ZENCaVpWeHVJQ0FnS2lCd2NtOWpaWE56WldRZ1lYVjBiMjFoZEdsallXeHNlUzVjYmlBZ0lDb2dWR2hwY3lCallXNGdZbVVnZFhObFpuVnNJR2xtSUhsdmRTQnVaV1ZrSUhOdmJXVWdZV1JrYVhScGIyNWhiQ0IxYzJWeUlHbHVjSFYwSUdKbFptOXlaU0J6Wlc1a2FXNW5YRzRnSUNBcUlHWnBiR1Z6SUNodmNpQnBaaUI1YjNVZ2QyRnVkQ0IzWVc1MElHRnNiQ0JtYVd4bGN5QnpaVzUwSUdGMElHOXVZMlVwTGx4dUlDQWdLaUJKWmlCNWIzVW5jbVVnY21WaFpIa2dkRzhnYzJWdVpDQjBhR1VnWm1sc1pTQnphVzF3YkhrZ1kyRnNiQ0JnYlhsRWNtOXdlbTl1WlM1d2NtOWpaWE56VVhWbGRXVW9LV0F1WEc0Z0lDQXFYRzRnSUNBcUlGTmxaU0IwYUdVZ1cyVnVjWFZsZFdsdVp5Qm1hV3hsSUhWd2JHOWhaSE5kS0NObGJuRjFaWFZwYm1jdFptbHNaUzExY0d4dllXUnpLU0JrYjJOMWJXVnVkR0YwYVc5dVhHNGdJQ0FxSUhObFkzUnBiMjRnWm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0dVhHNGdJQ0FxTHlCaGRYUnZVSEp2WTJWemMxRjFaWFZsT2lCMGNuVmxMRnh1SUNBZ0lDOHFLbHh1SUNBZ0tpQkpaaUJtWVd4elpTd2dabWxzWlhNZ1lXUmtaV1FnZEc4Z2RHaGxJR1J5YjNCNmIyNWxJSGRwYkd3Z2JtOTBJR0psSUhGMVpYVmxaQ0JpZVNCa1pXWmhkV3gwTGx4dUlDQWdLaUJaYjNVbmJHd2dhR0YyWlNCMGJ5QmpZV3hzSUdCbGJuRjFaWFZsUm1sc1pTaG1hV3hsS1dBZ2JXRnVkV0ZzYkhrdVhHNGdJQ0FxTHlCaGRYUnZVWFZsZFdVNklIUnlkV1VzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRWxtSUdCMGNuVmxZQ3dnZEdocGN5QjNhV3hzSUdGa1pDQmhJR3hwYm1zZ2RHOGdaWFpsY25rZ1ptbHNaU0J3Y21WMmFXVjNJSFJ2SUhKbGJXOTJaU0J2Y2lCallXNWpaV3dnS0dsbVhHNGdJQ0FxSUdGc2NtVmhaSGtnZFhCc2IyRmthVzVuS1NCMGFHVWdabWxzWlM0Z1ZHaGxJR0JrYVdOMFEyRnVZMlZzVlhCc2IyRmtZQ3dnWUdScFkzUkRZVzVqWld4VmNHeHZZV1JEYjI1bWFYSnRZWFJwYjI1Z1hHNGdJQ0FxSUdGdVpDQmdaR2xqZEZKbGJXOTJaVVpwYkdWZ0lHOXdkR2x2Ym5NZ1lYSmxJSFZ6WldRZ1ptOXlJSFJvWlNCM2IzSmthVzVuTGx4dUlDQWdLaThnWVdSa1VtVnRiM1psVEdsdWEzTTZJR1poYkhObExGeHVJQ0FnSUM4cUtseHVJQ0FnS2lCRVpXWnBibVZ6SUhkb1pYSmxJSFJ2SUdScGMzQnNZWGtnZEdobElHWnBiR1VnY0hKbGRtbGxkM01nNG9DVElHbG1JR0J1ZFd4c1lDQjBhR1ZjYmlBZ0lDb2dSSEp2Y0hwdmJtVWdaV3hsYldWdWRDQnBkSE5sYkdZZ2FYTWdkWE5sWkM0Z1EyRnVJR0psSUdFZ2NHeGhhVzRnWUVoVVRVeEZiR1Z0Wlc1MFlDQnZjaUJoSUVOVFUxeHVJQ0FnS2lCelpXeGxZM1J2Y2k0Z1ZHaGxJR1ZzWlcxbGJuUWdjMmh2ZFd4a0lHaGhkbVVnZEdobElHQmtjbTl3ZW05dVpTMXdjbVYyYVdWM2MyQWdZMnhoYzNNZ2MyOWNiaUFnSUNvZ2RHaGxJSEJ5WlhacFpYZHpJR0Z5WlNCa2FYTndiR0Y1WldRZ2NISnZjR1Z5YkhrdVhHNGdJQ0FxTHlCd2NtVjJhV1YzYzBOdmJuUmhhVzVsY2pvZ2JuVnNiQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dVMlYwSUhSb2FYTWdkRzhnWUhSeWRXVmdJR2xtSUhsdmRTQmtiMjRuZENCM1lXNTBJSEJ5WlhacFpYZHpJSFJ2SUdKbElITm9iM2R1TGx4dUlDQWdLaThnWkdsellXSnNaVkJ5WlhacFpYZHpPaUJtWVd4elpTeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1ZHaHBjeUJwY3lCMGFHVWdaV3hsYldWdWRDQjBhR1VnYUdsa1pHVnVJR2x1Y0hWMElHWnBaV3hrSUNoM2FHbGphQ0JwY3lCMWMyVmtJSGRvWlc0Z1kyeHBZMnRwYm1jZ2IyNGdkR2hsWEc0Z0lDQXFJR1J5YjNCNmIyNWxJSFJ2SUhSeWFXZG5aWElnWm1sc1pTQnpaV3hsWTNScGIyNHBJSGRwYkd3Z1ltVWdZWEJ3Wlc1a1pXUWdkRzh1SUZSb2FYTWdiV2xuYUhSY2JpQWdJQ29nWW1VZ2FXMXdiM0owWVc1MElHbHVJR05oYzJVZ2VXOTFJSFZ6WlNCbWNtRnRaWGR2Y210eklIUnZJSE4zYVhSamFDQjBhR1VnWTI5dWRHVnVkQ0J2WmlCNWIzVnlJSEJoWjJVdVhHNGdJQ0FxWEc0Z0lDQXFJRU5oYmlCaVpTQmhJSE5sYkdWamRHOXlJSE4wY21sdVp5d2diM0lnWVc0Z1pXeGxiV1Z1ZENCa2FYSmxZM1JzZVM1Y2JpQWdJQ292SUdocFpHUmxia2x1Y0hWMFEyOXVkR0ZwYm1WeU9pQmNJbUp2WkhsY0lpeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1NXWWdiblZzYkN3Z2JtOGdZMkZ3ZEhWeVpTQjBlWEJsSUhkcGJHd2dZbVVnYzNCbFkybG1hV1ZrWEc0Z0lDQXFJRWxtSUdOaGJXVnlZU3dnYlc5aWFXeGxJR1JsZG1salpYTWdkMmxzYkNCemEybHdJSFJvWlNCbWFXeGxJSE5sYkdWamRHbHZiaUJoYm1RZ1kyaHZiM05sSUdOaGJXVnlZVnh1SUNBZ0tpQkpaaUJ0YVdOeWIzQm9iMjVsTENCdGIySnBiR1VnWkdWMmFXTmxjeUIzYVd4c0lITnJhWEFnZEdobElHWnBiR1VnYzJWc1pXTjBhVzl1SUdGdVpDQmphRzl2YzJVZ2RHaGxJRzFwWTNKdmNHaHZibVZjYmlBZ0lDb2dTV1lnWTJGdFkyOXlaR1Z5TENCdGIySnBiR1VnWkdWMmFXTmxjeUIzYVd4c0lITnJhWEFnZEdobElHWnBiR1VnYzJWc1pXTjBhVzl1SUdGdVpDQmphRzl2YzJVZ2RHaGxJR05oYldWeVlTQnBiaUIyYVdSbGJ5QnRiMlJsWEc0Z0lDQXFJRTl1SUdGd2NHeGxJR1JsZG1salpYTWdiWFZzZEdsd2JHVWdiWFZ6ZENCaVpTQnpaWFFnZEc4Z1ptRnNjMlV1SUNCQlkyTmxjSFJsWkVacGJHVnpJRzFoZVNCdVpXVmtJSFJ2WEc0Z0lDQXFJR0psSUhObGRDQjBieUJoYmlCaGNIQnliM0J5YVdGMFpTQnRhVzFsSUhSNWNHVWdLR1V1Wnk0Z1hDSnBiV0ZuWlM4cVhDSXNJRndpWVhWa2FXOHZLbHdpTENCdmNpQmNJblpwWkdWdkx5cGNJaWt1WEc0Z0lDQXFMeUJqWVhCMGRYSmxPaUJ1ZFd4c0xGeHVJQ0FnSUM4cUtseHVJQ0FnS2lBcUtrUmxjSEpsWTJGMFpXUXFLaTRnVlhObElHQnlaVzVoYldWR2FXeGxZQ0JwYm5OMFpXRmtMbHh1SUNBZ0tpOGdjbVZ1WVcxbFJtbHNaVzVoYldVNklHNTFiR3dzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRUVnWm5WdVkzUnBiMjRnZEdoaGRDQnBjeUJwYm5admEyVmtJR0psWm05eVpTQjBhR1VnWm1sc1pTQnBjeUIxY0d4dllXUmxaQ0IwYnlCMGFHVWdjMlZ5ZG1WeUlHRnVaQ0J5Wlc1aGJXVnpJSFJvWlNCbWFXeGxMbHh1SUNBZ0tpQlVhR2x6SUdaMWJtTjBhVzl1SUdkbGRITWdkR2hsSUdCR2FXeGxZQ0JoY3lCaGNtZDFiV1Z1ZENCaGJtUWdZMkZ1SUhWelpTQjBhR1VnWUdacGJHVXVibUZ0WldBdUlGUm9aU0JoWTNSMVlXd2dibUZ0WlNCdlppQjBhR1ZjYmlBZ0lDb2dabWxzWlNCMGFHRjBJR2RsZEhNZ2RYTmxaQ0JrZFhKcGJtY2dkR2hsSUhWd2JHOWhaQ0JqWVc0Z1ltVWdZV05qWlhOelpXUWdkR2h5YjNWbmFDQmdabWxzWlM1MWNHeHZZV1F1Wm1sc1pXNWhiV1ZnTGx4dUlDQWdLaThnY21WdVlXMWxSbWxzWlRvZ2JuVnNiQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dTV1lnWUhSeWRXVmdJSFJvWlNCbVlXeHNZbUZqYXlCM2FXeHNJR0psSUdadmNtTmxaQzRnVkdocGN5QnBjeUIyWlhKNUlIVnpaV1oxYkNCMGJ5QjBaWE4wSUhsdmRYSWdjMlZ5ZG1WeVhHNGdJQ0FxSUdsdGNHeGxiV1Z1ZEdGMGFXOXVjeUJtYVhKemRDQmhibVFnYldGclpTQnpkWEpsSUhSb1lYUWdaWFpsY25sMGFHbHVaeUIzYjNKcmN5QmhjMXh1SUNBZ0tpQmxlSEJsWTNSbFpDQjNhWFJvYjNWMElHUnliM0I2YjI1bElHbG1JSGx2ZFNCbGVIQmxjbWxsYm1ObElIQnliMkpzWlcxekxDQmhibVFnZEc4Z2RHVnpkRnh1SUNBZ0tpQm9iM2NnZVc5MWNpQm1ZV3hzWW1GamEzTWdkMmxzYkNCc2IyOXJMbHh1SUNBZ0tpOGdabTl5WTJWR1lXeHNZbUZqYXpvZ1ptRnNjMlVzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCMFpYaDBJSFZ6WldRZ1ltVm1iM0psSUdGdWVTQm1hV3hsY3lCaGNtVWdaSEp2Y0hCbFpDNWNiaUFnSUNvdklHUnBZM1JFWldaaGRXeDBUV1Z6YzJGblpUb2dYQ0pFY205d0lHWnBiR1Z6SUdobGNtVWdkRzhnZFhCc2IyRmtYQ0lzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCMFpYaDBJSFJvWVhRZ2NtVndiR0ZqWlhNZ2RHaGxJR1JsWm1GMWJIUWdiV1Z6YzJGblpTQjBaWGgwSUdsMElIUm9aU0JpY205M2MyVnlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUXVYRzRnSUNBcUx5QmthV04wUm1Gc2JHSmhZMnROWlhOellXZGxPaUJjSWxsdmRYSWdZbkp2ZDNObGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHUnlZV2NuYmlka2NtOXdJR1pwYkdVZ2RYQnNiMkZrY3k1Y0lpeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1ZHaGxJSFJsZUhRZ2RHaGhkQ0IzYVd4c0lHSmxJR0ZrWkdWa0lHSmxabTl5WlNCMGFHVWdabUZzYkdKaFkyc2dabTl5YlM1Y2JpQWdJQ29nU1dZZ2VXOTFJSEJ5YjNacFpHVWdZU0FnWm1Gc2JHSmhZMnNnWld4bGJXVnVkQ0I1YjNWeWMyVnNaaXdnYjNJZ2FXWWdkR2hwY3lCdmNIUnBiMjRnYVhNZ1lHNTFiR3hnSUhSb2FYTWdkMmxzYkZ4dUlDQWdLaUJpWlNCcFoyNXZjbVZrTGx4dUlDQWdLaThnWkdsamRFWmhiR3hpWVdOclZHVjRkRG9nWENKUWJHVmhjMlVnZFhObElIUm9aU0JtWVd4c1ltRmpheUJtYjNKdElHSmxiRzkzSUhSdklIVndiRzloWkNCNWIzVnlJR1pwYkdWeklHeHBhMlVnYVc0Z2RHaGxJRzlzWkdWdUlHUmhlWE11WENJc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVsbUlIUm9aU0JtYVd4bGMybDZaU0JwY3lCMGIyOGdZbWxuTGx4dUlDQWdLaUJnZTN0bWFXeGxjMmw2WlgxOVlDQmhibVFnWUh0N2JXRjRSbWxzWlhOcGVtVjlmV0FnZDJsc2JDQmlaU0J5WlhCc1lXTmxaQ0IzYVhSb0lIUm9aU0J5WlhOd1pXTjBhWFpsSUdOdmJtWnBaM1Z5WVhScGIyNGdkbUZzZFdWekxseHVJQ0FnS2k4Z1pHbGpkRVpwYkdWVWIyOUNhV2M2SUZ3aVJtbHNaU0JwY3lCMGIyOGdZbWxuSUNoN2UyWnBiR1Z6YVhwbGZYMU5hVUlwTGlCTllYZ2dabWxzWlhOcGVtVTZJSHQ3YldGNFJtbHNaWE5wZW1WOWZVMXBRaTVjSWl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nU1dZZ2RHaGxJR1pwYkdVZ1pHOWxjMjRuZENCdFlYUmphQ0IwYUdVZ1ptbHNaU0IwZVhCbExseHVJQ0FnS2k4Z1pHbGpkRWx1ZG1Gc2FXUkdhV3hsVkhsd1pUb2dYQ0paYjNVZ1kyRnVKM1FnZFhCc2IyRmtJR1pwYkdWeklHOW1JSFJvYVhNZ2RIbHdaUzVjSWl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ29nU1dZZ2RHaGxJSE5sY25abGNpQnlaWE53YjI1elpTQjNZWE1nYVc1MllXeHBaQzVjYmlBZ0lDb2dZSHQ3YzNSaGRIVnpRMjlrWlgxOVlDQjNhV3hzSUdKbElISmxjR3hoWTJWa0lIZHBkR2dnZEdobElITmxjblpsY25NZ2MzUmhkSFZ6SUdOdlpHVXVYRzRnSUNBcUx5QmthV04wVW1WemNHOXVjMlZGY25KdmNqb2dYQ0pUWlhKMlpYSWdjbVZ6Y0c5dVpHVmtJSGRwZEdnZ2UzdHpkR0YwZFhORGIyUmxmWDBnWTI5a1pTNWNJaXhjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dTV1lnWUdGa1pGSmxiVzkyWlV4cGJtdHpZQ0JwY3lCMGNuVmxMQ0IwYUdVZ2RHVjRkQ0IwYnlCaVpTQjFjMlZrSUdadmNpQjBhR1VnWTJGdVkyVnNJSFZ3Ykc5aFpDQnNhVzVyTGx4dUlDQWdLaThnWkdsamRFTmhibU5sYkZWd2JHOWhaRG9nWENKRFlXNWpaV3dnZFhCc2IyRmtYQ0lzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRlJvWlNCMFpYaDBJSFJvWVhRZ2FYTWdaR2x6Y0d4aGVXVmtJR2xtSUdGdUlIVndiRzloWkNCM1lYTWdiV0Z1ZFdGc2JIa2dZMkZ1WTJWc1pXUmNiaUFnSUNvdklHUnBZM1JWY0d4dllXUkRZVzVqWld4bFpEb2dYQ0pWY0d4dllXUWdZMkZ1WTJWc1pXUXVYQ0lzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRWxtSUdCaFpHUlNaVzF2ZG1WTWFXNXJjMkFnYVhNZ2RISjFaU3dnZEdobElIUmxlSFFnZEc4Z1ltVWdkWE5sWkNCbWIzSWdZMjl1Wm1seWJXRjBhVzl1SUhkb1pXNGdZMkZ1WTJWc2JHbHVaeUIxY0d4dllXUXVYRzRnSUNBcUx5QmthV04wUTJGdVkyVnNWWEJzYjJGa1EyOXVabWx5YldGMGFXOXVPaUJjSWtGeVpTQjViM1VnYzNWeVpTQjViM1VnZDJGdWRDQjBieUJqWVc1alpXd2dkR2hwY3lCMWNHeHZZV1EvWENJc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVsbUlHQmhaR1JTWlcxdmRtVk1hVzVyYzJBZ2FYTWdkSEoxWlN3Z2RHaGxJSFJsZUhRZ2RHOGdZbVVnZFhObFpDQjBieUJ5WlcxdmRtVWdZU0JtYVd4bExseHVJQ0FnS2k4Z1pHbGpkRkpsYlc5MlpVWnBiR1U2SUZ3aVVtVnRiM1psSUdacGJHVmNJaXhjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dTV1lnZEdocGN5QnBjeUJ1YjNRZ2JuVnNiQ3dnZEdobGJpQjBhR1VnZFhObGNpQjNhV3hzSUdKbElIQnliMjF3ZEdWa0lHSmxabTl5WlNCeVpXMXZkbWx1WnlCaElHWnBiR1V1WEc0Z0lDQXFMeUJrYVdOMFVtVnRiM1psUm1sc1pVTnZibVpwY20xaGRHbHZiam9nYm5Wc2JDeGNiaUFnSUNBdktpcGNiaUFnSUNvZ1JHbHpjR3hoZVdWa0lHbG1JR0J0WVhoR2FXeGxjMkFnYVhNZ2MzUWdZVzVrSUdWNFkyVmxaR1ZrTGx4dUlDQWdLaUJVYUdVZ2MzUnlhVzVuSUdCN2UyMWhlRVpwYkdWemZYMWdJSGRwYkd3Z1ltVWdjbVZ3YkdGalpXUWdZbmtnZEdobElHTnZibVpwWjNWeVlYUnBiMjRnZG1Gc2RXVXVYRzRnSUNBcUx5QmthV04wVFdGNFJtbHNaWE5GZUdObFpXUmxaRG9nWENKWmIzVWdZMkZ1SUc1dmRDQjFjR3h2WVdRZ1lXNTVJRzF2Y21VZ1ptbHNaWE11WENJc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVGc2JHOTNjeUI1YjNVZ2RHOGdkSEpoYm5Oc1lYUmxJSFJvWlNCa2FXWm1aWEpsYm5RZ2RXNXBkSE11SUZOMFlYSjBhVzVuSUhkcGRHZ2dZSFJpWUNCbWIzSWdkR1Z5WVdKNWRHVnpJR0Z1WkNCbmIybHVaeUJrYjNkdUlIUnZYRzRnSUNBcUlHQmlZQ0JtYjNJZ1lubDBaWE11WEc0Z0lDQXFMeUJrYVdOMFJtbHNaVk5wZW1WVmJtbDBjem9nZTF4dUlDQWdJQ0FnSUNCMFlqb2dYQ0pVUWx3aUxGeHVJQ0FnSUNBZ0lDQm5Zam9nWENKSFFsd2lMRnh1SUNBZ0lDQWdJQ0J0WWpvZ1hDSk5RbHdpTEZ4dUlDQWdJQ0FnSUNCcllqb2dYQ0pMUWx3aUxGeHVJQ0FnSUNBZ0lDQmlPaUJjSW1KY0lseHVJQ0FnSUgwc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVOaGJHeGxaQ0IzYUdWdUlHUnliM0I2YjI1bElHbHVhWFJwWVd4cGVtVmtYRzRnSUNBcUlGbHZkU0JqWVc0Z1lXUmtJR1YyWlc1MElHeHBjM1JsYm1WeWN5Qm9aWEpsWEc0Z0lDQXFMeUJwYm1sME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFLbHh1SUNBZ0tpQkRZVzRnWW1VZ1lXNGdLaXB2WW1wbFkzUXFLaUJ2WmlCaFpHUnBkR2x2Ym1Gc0lIQmhjbUZ0WlhSbGNuTWdkRzhnZEhKaGJuTm1aWElnZEc4Z2RHaGxJSE5sY25abGNpd2dLaXB2Y2lvcUlHRWdZRVoxYm1OMGFXOXVZRnh1SUNBZ0tpQjBhR0YwSUdkbGRITWdhVzUyYjJ0bFpDQjNhWFJvSUhSb1pTQmdabWxzWlhOZ0xDQmdlR2h5WUNCaGJtUXNJR2xtSUdsMEozTWdZU0JqYUhWdWEyVmtJSFZ3Ykc5aFpDd2dZR05vZFc1cllDQmhjbWQxYldWdWRITXVJRWx1SUdOaGMyVmNiaUFnSUNvZ2IyWWdZU0JtZFc1amRHbHZiaXdnZEdocGN5QnVaV1ZrY3lCMGJ5QnlaWFIxY200Z1lTQnRZWEF1WEc0Z0lDQXFYRzRnSUNBcUlGUm9aU0JrWldaaGRXeDBJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHUnZaWE1nYm05MGFHbHVaeUJtYjNJZ2JtOXliV0ZzSUhWd2JHOWhaSE1zSUdKMWRDQmhaR1J6SUhKbGJHVjJZVzUwSUdsdVptOXliV0YwYVc5dUlHWnZjbHh1SUNBZ0tpQmphSFZ1YTJWa0lIVndiRzloWkhNdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2FYTWdkR2hsSUhOaGJXVWdZWE1nWVdSa2FXNW5JR2hwWkdSbGJpQnBibkIxZENCbWFXVnNaSE1nYVc0Z2RHaGxJR1p2Y20wZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ292SUhCaGNtRnRjem9nWm5WdVkzUnBiMjRvWm1sc1pYTXNJSGhvY2l3Z1kyaDFibXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05vZFc1cktTQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhwMWRXbGtPaUJqYUhWdWF5NW1hV3hsTG5Wd2JHOWhaQzUxZFdsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhwamFIVnVhMmx1WkdWNE9pQmphSFZ1YXk1cGJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjZkRzkwWVd4bWFXeGxjMmw2WlRvZ1kyaDFibXN1Wm1sc1pTNXphWHBsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaSHBqYUhWdWEzTnBlbVU2SUhSb2FYTXViM0IwYVc5dWN5NWphSFZ1YTFOcGVtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2VuUnZkR0ZzWTJoMWJtdGpiM1Z1ZERvZ1kyaDFibXN1Wm1sc1pTNTFjR3h2WVdRdWRHOTBZV3hEYUhWdWEwTnZkVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaSHBqYUhWdWEySjVkR1Z2Wm1aelpYUTZJR05vZFc1ckxtbHVaR1Y0SUNvZ2RHaHBjeTV2Y0hScGIyNXpMbU5vZFc1clUybDZaVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDBzWEc0Z0lDQWdMeW9xWEc0Z0lDQXFJRUVnWm5WdVkzUnBiMjRnZEdoaGRDQm5aWFJ6SUdFZ1cyWnBiR1ZkS0doMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG0xdmVtbHNiR0V1YjNKbkwyVnVMVlZUTDJSdlkzTXZSRTlOTDBacGJHVXBYRzRnSUNBcUlHRnVaQ0JoSUdCa2IyNWxZQ0JtZFc1amRHbHZiaUJoY3lCd1lYSmhiV1YwWlhKekxseHVJQ0FnS2x4dUlDQWdLaUJKWmlCMGFHVWdaRzl1WlNCbWRXNWpkR2x2YmlCcGN5QnBiblp2YTJWa0lIZHBkR2h2ZFhRZ1lYSm5kVzFsYm5SekxDQjBhR1VnWm1sc1pTQnBjeUJjSW1GalkyVndkR1ZrWENJZ1lXNWtJSGRwYkd4Y2JpQWdJQ29nWW1VZ2NISnZZMlZ6YzJWa0xpQkpaaUI1YjNVZ2NHRnpjeUJoYmlCbGNuSnZjaUJ0WlhOellXZGxMQ0IwYUdVZ1ptbHNaU0JwY3lCeVpXcGxZM1JsWkN3Z1lXNWtJSFJvWlNCbGNuSnZjbHh1SUNBZ0tpQnRaWE56WVdkbElIZHBiR3dnWW1VZ1pHbHpjR3hoZVdWa0xseHVJQ0FnS2lCVWFHbHpJR1oxYm1OMGFXOXVJSGRwYkd3Z2JtOTBJR0psSUdOaGJHeGxaQ0JwWmlCMGFHVWdabWxzWlNCcGN5QjBiMjhnWW1sbklHOXlJR1J2WlhOdUozUWdiV0YwWTJnZ2RHaGxJRzFwYldVZ2RIbHdaWE11WEc0Z0lDQXFMeUJoWTJObGNIUTZJR1oxYm1OMGFXOXVLR1pwYkdVc0lHUnZibVVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSdmJtVW9LVHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFLbHh1SUNBZ0tpQlVhR1VnWTJGc2JHSmhZMnNnZEdoaGRDQjNhV3hzSUdKbElHbHVkbTlyWldRZ2QyaGxiaUJoYkd3Z1kyaDFibXR6SUdoaGRtVWdZbVZsYmlCMWNHeHZZV1JsWkNCbWIzSWdZU0JtYVd4bExseHVJQ0FnS2lCSmRDQm5aWFJ6SUhSb1pTQm1hV3hsSUdadmNpQjNhR2xqYUNCMGFHVWdZMmgxYm10eklHaGhkbVVnWW1WbGJpQjFjR3h2WVdSbFpDQmhjeUIwYUdVZ1ptbHljM1FnY0dGeVlXMWxkR1Z5TEZ4dUlDQWdLaUJoYm1RZ2RHaGxJR0JrYjI1bFlDQm1kVzVqZEdsdmJpQmhjeUJ6WldOdmJtUXVJR0JrYjI1bEtDbGdJRzVsWldSeklIUnZJR0psSUdsdWRtOXJaV1FnZDJobGJpQmxkbVZ5ZVhSb2FXNW5YRzRnSUNBcUlHNWxaV1JsWkNCMGJ5Qm1hVzVwYzJnZ2RHaGxJSFZ3Ykc5aFpDQndjbTlqWlhOeklHbHpJR1J2Ym1VdVhHNGdJQ0FxTHlCamFIVnVhM05WY0d4dllXUmxaRG9nWm5WdVkzUnBiMjRnWTJoMWJtdHpWWEJzYjJGa1pXUW9abWxzWlN3Z1pHOXVaU2tnZTF4dUlDQWdJQ0FnSUNCa2IyNWxLQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dVMlZ1WkhNZ2RHaGxJR1pwYkdVZ1lYTWdZbWx1WVhKNUlHSnNiMklnYVc0Z1ltOWtlU0JwYm5OMFpXRmtJRzltSUdadmNtMGdaR0YwWVM1Y2JpQWdJQ29nU1dZZ2RHaHBjeUJwY3lCelpYUXNJSFJvWlNCZ2NHRnlZVzF6WUNCdmNIUnBiMjRnZDJsc2JDQmlaU0JwWjI1dmNtVmtMbHh1SUNBZ0tpQkpkQ2R6SUdGdUlHVnljbTl5SUhSdklITmxkQ0IwYUdseklIUnZJR0IwY25WbFlDQmhiRzl1WnlCM2FYUm9JR0IxY0d4dllXUk5kV3gwYVhCc1pXQWdjMmx1WTJWY2JpQWdJQ29nYlhWc2RHbHdiR1VnWm1sc1pYTWdZMkZ1Ym05MElHSmxJR2x1SUdFZ2MybHVaMnhsSUdKcGJtRnllU0JpYjJSNUxseHVJQ0FnS2k4Z1ltbHVZWEo1UW05a2VUb2dabUZzYzJVc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVkbGRITWdZMkZzYkdWa0lIZG9aVzRnZEdobElHSnliM2R6WlhJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkM1Y2JpQWdJQ29nVkdobElHUmxabUYxYkhRZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYzJodmQzTWdkR2hsSUdaaGJHeGlZV05ySUdsdWNIVjBJR1pwWld4a0lHRnVaQ0JoWkdSelhHNGdJQ0FxSUdFZ2RHVjRkQzVjYmlBZ0lDb3ZJR1poYkd4aVlXTnJPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCamIyUmxJSE5vYjNWc1pDQndZWE56SUdsdUlFbEZOeTR1TGlBNktGeHVJQ0FnSUNBZ0lDQjJZWElnYldWemMyRm5aVVZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMDVoYldVZ1BTQmNJbHdpTG1OdmJtTmhkQ2gwYUdsekxtVnNaVzFsYm5RdVkyeGhjM05PWVcxbExDQmNJaUJrZWkxaWNtOTNjMlZ5TFc1dmRDMXpkWEJ3YjNKMFpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQm1ZV3h6WlN3Z1gybDBaWEpoZEc5eVJYSnliM0lnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlGOXBkR1Z5WVhSdmNpQTlJSFJvYVhNdVpXeGxiV1Z1ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTaGNJbVJwZGx3aUtWdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtDa3NJRjl6ZEdWd095QWhLRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0FvWDNOMFpYQWdQU0JmYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bEtUc2dYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYUdsc1pDQTlJRjl6ZEdWd0xuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3ZLRjU4SUNsa2VpMXRaWE56WVdkbEtDUjhJQ2t2TG5SbGMzUW9ZMmhwYkdRdVkyeGhjM05PWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsUld4bGJXVnVkQ0E5SUdOb2FXeGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHbHNaQzVqYkdGemMwNWhiV1VnUFNCY0ltUjZMVzFsYzNOaFoyVmNJanNnTHk4Z1VtVnRiM1psY3lCMGFHVWdKMlI2TFdSbFptRjFiSFFuSUdOc1lYTnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUdWeWNqdGNiaUFnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lWOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z0ppWWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2k1eVpYUjFjbTRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOWthV1JKZEdWeVlYUnZja1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVcxbGMzTmhaMlZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFJXeGxiV1Z1ZENBOUlDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1WTNKbFlYUmxSV3hsYldWdWRDZ25QR1JwZGlCamJHRnpjejFjSW1SNkxXMWxjM05oWjJWY0lqNDhjM0JoYmo0OEwzTndZVzQrUEM5a2FYWStKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb2JXVnpjMkZuWlVWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0dGdUlEMGdiV1Z6YzJGblpVVnNaVzFsYm5RdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9YQ0p6Y0dGdVhDSXBXekJkTzF4dUlDQWdJQ0FnSUNCcFppQW9jM0JoYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITndZVzR1ZEdWNGRFTnZiblJsYm5RZ0lUMGdiblZzYkNrZ2MzQmhiaTUwWlhoMFEyOXVkR1Z1ZENBOUlIUm9hWE11YjNCMGFXOXVjeTVrYVdOMFJtRnNiR0poWTJ0TlpYTnpZV2RsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9jM0JoYmk1cGJtNWxjbFJsZUhRZ0lUMGdiblZzYkNrZ2MzQmhiaTVwYm01bGNsUmxlSFFnUFNCMGFHbHpMbTl3ZEdsdmJuTXVaR2xqZEVaaGJHeGlZV05yVFdWemMyRm5aVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWxiR1Z0Wlc1MExtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdVoyVjBSbUZzYkdKaFkydEdiM0p0S0NrcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnTHlvcVhHNGdJQ0FxSUVkbGRITWdZMkZzYkdWa0lIUnZJR05oYkdOMWJHRjBaU0IwYUdVZ2RHaDFiV0p1WVdsc0lHUnBiV1Z1YzJsdmJuTXVYRzRnSUNBcVhHNGdJQ0FxSUVsMElHZGxkSE1nWUdacGJHVmdMQ0JnZDJsa2RHaGdJR0Z1WkNCZ2FHVnBaMmgwWUNBb1ltOTBhQ0J0WVhrZ1ltVWdZRzUxYkd4Z0tTQmhjeUJ3WVhKaGJXVjBaWEp6SUdGdVpDQnRkWE4wSUhKbGRIVnliaUJoYmlCdlltcGxZM1FnWTI5dWRHRnBibWx1WnpwY2JpQWdJQ3BjYmlBZ0lDb2dJQzBnWUhOeVkxZHBaSFJvWUNBbUlHQnpjbU5JWldsbmFIUmdJQ2h5WlhGMWFYSmxaQ2xjYmlBZ0lDb2dJQzBnWUhSeVoxZHBaSFJvWUNBbUlHQjBjbWRJWldsbmFIUmdJQ2h5WlhGMWFYSmxaQ2xjYmlBZ0lDb2dJQzBnWUhOeVkxaGdJQ1lnWUhOeVkxbGdJQ2h2Y0hScGIyNWhiQ3dnWkdWbVlYVnNkQ0JnTUdBcFhHNGdJQ0FxSUNBdElHQjBjbWRZWUNBbUlHQjBjbWRaWUNBb2IzQjBhVzl1WVd3c0lHUmxabUYxYkhRZ1lEQmdLVnh1SUNBZ0tseHVJQ0FnS2lCVWFHOXpaU0IyWVd4MVpYTWdZWEpsSUdkdmFXNW5JSFJ2SUdKbElIVnpaV1FnWW5rZ1lHTjBlQzVrY21GM1NXMWhaMlVvS1dBdVhHNGdJQ0FxTHlCeVpYTnBlbVU2SUdaMWJtTjBhVzl1S0dacGJHVXNJSGRwWkhSb0xDQm9aV2xuYUhRc0lISmxjMmw2WlUxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdhVzVtYnlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOeVkxZzZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpjbU5aT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNKalYybGtkR2c2SUdacGJHVXVkMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y21OSVpXbG5hSFE2SUdacGJHVXVhR1ZwWjJoMFhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFpoY2lCemNtTlNZWFJwYnlBOUlHWnBiR1V1ZDJsa2RHZ2dMeUJtYVd4bExtaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ0x5OGdRWFYwYjIxaGRHbGpZV3hzZVNCallXeGpkV3hoZEdVZ1pHbHRaVzV6YVc5dWN5QnBaaUJ1YjNRZ2MzQmxZMmxtYVdWa1hHNGdJQ0FnSUNBZ0lHbG1JQ2gzYVdSMGFDQTlQU0J1ZFd4c0lDWW1JR2hsYVdkb2RDQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhQ0E5SUdsdVptOHVjM0pqVjJsa2RHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFFnUFNCcGJtWnZMbk55WTBobGFXZG9kRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoM2FXUjBhQ0E5UFNCdWRXeHNLU0IzYVdSMGFDQTlJR2hsYVdkb2RDQXFJSE55WTFKaGRHbHZPMXh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hvWldsbmFIUWdQVDBnYm5Wc2JDa2dhR1ZwWjJoMElEMGdkMmxrZEdnZ0x5QnpjbU5TWVhScGJ6dGNiaUFnSUNBZ0lDQWdMeThnVFdGclpTQnpkWEpsSUdsdFlXZGxjeUJoY21WdUozUWdkWEJ6WTJGc1pXUmNiaUFnSUNBZ0lDQWdkMmxrZEdnZ1BTQk5ZWFJvTG0xcGJpaDNhV1IwYUN3Z2FXNW1ieTV6Y21OWGFXUjBhQ2s3WEc0Z0lDQWdJQ0FnSUdobGFXZG9kQ0E5SUUxaGRHZ3ViV2x1S0dobGFXZG9kQ3dnYVc1bWJ5NXpjbU5JWldsbmFIUXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RISm5VbUYwYVc4Z1BTQjNhV1IwYUNBdklHaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1Wm04dWMzSmpWMmxrZEdnZ1BpQjNhV1IwYUNCOGZDQnBibVp2TG5OeVkwaGxhV2RvZENBK0lHaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXMWhaMlVnYVhNZ1ltbG5aMlZ5SUdGdVpDQnVaV1ZrY3lCeVpYTmpZV3hwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTnBlbVZOWlhSb2IyUWdQVDA5SUZ3aVkzSnZjRndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE55WTFKaGRHbHZJRDRnZEhKblVtRjBhVzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVtYnk1emNtTklaV2xuYUhRZ1BTQm1hV3hsTG1obGFXZG9kRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNW1ieTV6Y21OWGFXUjBhQ0E5SUdsdVptOHVjM0pqU0dWcFoyaDBJQ29nZEhKblVtRjBhVzg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNW1ieTV6Y21OWGFXUjBhQ0E5SUdacGJHVXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Wm04dWMzSmpTR1ZwWjJoMElEMGdhVzVtYnk1emNtTlhhV1IwYUNBdklIUnlaMUpoZEdsdk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVnphWHBsVFdWMGFHOWtJRDA5UFNCY0ltTnZiblJoYVc1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUUxbGRHaHZaQ0FuWTI5dWRHRnBiaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzSmpVbUYwYVc4Z1BpQjBjbWRTWVhScGJ5a2dhR1ZwWjJoMElEMGdkMmxrZEdnZ0x5QnpjbU5TWVhScGJ6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUhkcFpIUm9JRDBnYUdWcFoyaDBJQ29nYzNKalVtRjBhVzg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVZXNXJibTkzYmlCeVpYTnBlbVZOWlhSb2IyUWdKMXdpTG1OdmJtTmhkQ2h5WlhOcGVtVk5aWFJvYjJRc0lGd2lKMXdpS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhVzVtYnk1emNtTllJRDBnS0dacGJHVXVkMmxrZEdnZ0xTQnBibVp2TG5OeVkxZHBaSFJvS1NBdklESTdYRzRnSUNBZ0lDQWdJR2x1Wm04dWMzSmpXU0E5SUNobWFXeGxMbWhsYVdkb2RDQXRJR2x1Wm04dWMzSmpTR1ZwWjJoMEtTQXZJREk3WEc0Z0lDQWdJQ0FnSUdsdVptOHVkSEpuVjJsa2RHZ2dQU0IzYVdSMGFEdGNiaUFnSUNBZ0lDQWdhVzVtYnk1MGNtZElaV2xuYUhRZ1BTQm9aV2xuYUhRN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJtWnZPMXh1SUNBZ0lIMHNYRzRnSUNBZ0x5b3FYRzRnSUNBcUlFTmhiaUJpWlNCMWMyVmtJSFJ2SUhSeVlXNXpabTl5YlNCMGFHVWdabWxzWlNBb1ptOXlJR1Y0WVcxd2JHVXNJSEpsYzJsNlpTQmhiaUJwYldGblpTQnBaaUJ1WldObGMzTmhjbmtwTGx4dUlDQWdLbHh1SUNBZ0tpQlVhR1VnWkdWbVlYVnNkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQjFjMlZ6SUdCeVpYTnBlbVZYYVdSMGFHQWdZVzVrSUdCeVpYTnBlbVZJWldsbmFIUmdJQ2hwWmlCd2NtOTJhV1JsWkNrZ1lXNWtJSEpsYzJsNlpYTmNiaUFnSUNvZ2FXMWhaMlZ6SUdGalkyOXlaR2x1WnlCMGJ5QjBhRzl6WlNCa2FXMWxibk5wYjI1ekxseHVJQ0FnS2x4dUlDQWdLaUJIWlhSeklIUm9aU0JnWm1sc1pXQWdZWE1nZEdobElHWnBjbk4wSUhCaGNtRnRaWFJsY2l3Z1lXNWtJR0VnWUdSdmJtVW9LV0FnWm5WdVkzUnBiMjRnWVhNZ2RHaGxJSE5sWTI5dVpDd2dkR2hoZENCdVpXVmtjMXh1SUNBZ0tpQjBieUJpWlNCcGJuWnZhMlZrSUhkcGRHZ2dkR2hsSUdacGJHVWdkMmhsYmlCMGFHVWdkSEpoYm5ObWIzSnRZWFJwYjI0Z2FYTWdaRzl1WlM1Y2JpQWdJQ292SUhSeVlXNXpabTl5YlVacGJHVTZJR1oxYm1OMGFXOXVLR1pwYkdVc0lHUnZibVVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2gwYUdsekxtOXdkR2x2Ym5NdWNtVnphWHBsVjJsa2RHZ2dmSHdnZEdocGN5NXZjSFJwYjI1ekxuSmxjMmw2WlVobGFXZG9kQ2tnSmlZZ1ptbHNaUzUwZVhCbExtMWhkR05vS0M5cGJXRm5aUzRxTHlrcElISmxkSFZ5YmlCMGFHbHpMbkpsYzJsNlpVbHRZV2RsS0dacGJHVXNJSFJvYVhNdWIzQjBhVzl1Y3k1eVpYTnBlbVZYYVdSMGFDd2dkR2hwY3k1dmNIUnBiMjV6TG5KbGMybDZaVWhsYVdkb2RDd2dkR2hwY3k1dmNIUnBiMjV6TG5KbGMybDZaVTFsZEdodlpDd2daRzl1WlNrN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnY21WMGRYSnVJR1J2Ym1Vb1ptbHNaU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZLaXBjYmlBZ0lDb2dRU0J6ZEhKcGJtY2dkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdkR1Z0Y0d4aGRHVWdkWE5sWkNCbWIzSWdaV0ZqYUNCa2NtOXdjR1ZrWEc0Z0lDQXFJR1pwYkdVdUlFTm9ZVzVuWlNCcGRDQjBieUJtZFd4bWFXeHNJSGx2ZFhJZ2JtVmxaSE1nWW5WMElHMWhhMlVnYzNWeVpTQjBieUJ3Y205d1pYSnNlVnh1SUNBZ0tpQndjbTkyYVdSbElHRnNiQ0JsYkdWdFpXNTBjeTVjYmlBZ0lDcGNiaUFnSUNvZ1NXWWdlVzkxSUhkaGJuUWdkRzhnZFhObElHRnVJR0ZqZEhWaGJDQklWRTFNSUdWc1pXMWxiblFnYVc1emRHVmhaQ0J2WmlCd2NtOTJhV1JwYm1jZ1lTQlRkSEpwYm1kY2JpQWdJQ29nWVhNZ1lTQmpiMjVtYVdjZ2IzQjBhVzl1TENCNWIzVWdZMjkxYkdRZ1kzSmxZWFJsSUdFZ1pHbDJJSGRwZEdnZ2RHaGxJR2xrSUdCMGNHeGdMRnh1SUNBZ0tpQndkWFFnZEdobElIUmxiWEJzWVhSbElHbHVjMmxrWlNCcGRDQmhibVFnY0hKdmRtbGtaU0IwYUdVZ1pXeGxiV1Z1ZENCc2FXdGxJSFJvYVhNNlhHNGdJQ0FxWEc0Z0lDQXFJQ0FnSUNCa2IyTjFiV1Z1ZEZ4dUlDQWdLaUFnSUNBZ0lDQXVjWFZsY25sVFpXeGxZM1J2Y2lnbkkzUndiQ2NwWEc0Z0lDQXFJQ0FnSUNBZ0lDNXBibTVsY2toVVRVeGNiaUFnSUNwY2JpQWdJQ292SUhCeVpYWnBaWGRVWlcxd2JHRjBaVG9nS0M4cVFGOWZVRlZTUlY5ZktpOGtjR0Z5WTJWc0pHbHVkR1Z5YjNCRVpXWmhkV3gwS0NRMk9XTTJNVGc0T0dOak1XWTBZelUzSkdWNGNHOXlkSE1wS1N4Y2JpQWdJQ0F2S2x4dUlDQWdWR2h2YzJVZ1puVnVZM1JwYjI1eklISmxaMmx6ZEdWeUlIUm9aVzF6Wld4MlpYTWdkRzhnZEdobElHVjJaVzUwY3lCdmJpQnBibWwwSUdGdVpDQm9ZVzVrYkdVZ1lXeHNYRzRnSUNCMGFHVWdkWE5sY2lCcGJuUmxjbVpoWTJVZ2MzQmxZMmxtYVdNZ2MzUjFabVl1SUU5MlpYSjNjbWwwYVc1bklIUm9aVzBnZDI5dUozUWdZbkpsWVdzZ2RHaGxJSFZ3Ykc5aFpGeHVJQ0FnWW5WMElHTmhiaUJpY21WaGF5QjBhR1VnZDJGNUlHbDBKM01nWkdsemNHeGhlV1ZrTGx4dUlDQWdXVzkxSUdOaGJpQnZkbVZ5ZDNKcGRHVWdkR2hsYlNCcFppQjViM1VnWkc5dUozUWdiR2xyWlNCMGFHVWdaR1ZtWVhWc2RDQmlaV2hoZG1sdmNpNGdTV1lnZVc5MUlHcDFjM1JjYmlBZ0lIZGhiblFnZEc4Z1lXUmtJR0Z1SUdGa1pHbDBhVzl1WVd3Z1pYWmxiblFnYUdGdVpHeGxjaXdnY21WbmFYTjBaWElnYVhRZ2IyNGdkR2hsSUdSeWIzQjZiMjVsSUc5aWFtVmpkRnh1SUNBZ1lXNWtJR1J2YmlkMElHOTJaWEozY21sMFpTQjBhRzl6WlNCdmNIUnBiMjV6TGx4dUlDQWdLaThnTHk4Z1ZHaHZjMlVnWVhKbElITmxiR1lnWlhod2JHRnVZWFJ2Y25rZ1lXNWtJSE5wYlhCc2VTQmpiMjVqWlhKdUlIUm9aU0JFY21GbmJrUnliM0F1WEc0Z0lDQWdaSEp2Y0RvZ1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvWENKa2VpMWtjbUZuTFdodmRtVnlYQ0lwTzF4dUlDQWdJSDBzWEc0Z0lDQWdaSEpoWjNOMFlYSjBPaUJtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JrY21GblpXNWtPaUJtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaGNJbVI2TFdSeVlXY3RhRzkyWlhKY0lpazdYRzRnSUNBZ2ZTeGNiaUFnSUNCa2NtRm5aVzUwWlhJNklHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLRndpWkhvdFpISmhaeTFvYjNabGNsd2lLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHUnlZV2R2ZG1WeU9pQm1kVzVqZEdsdmJpaGxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hjSW1SNkxXUnlZV2N0YUc5MlpYSmNJaWs3WEc0Z0lDQWdmU3hjYmlBZ0lDQmtjbUZuYkdWaGRtVTZJR1oxYm1OMGFXOXVLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtGd2laSG90WkhKaFp5MW9iM1psY2x3aUtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhCaGMzUmxPaUJtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlCRFlXeHNaV1FnZDJobGJtVjJaWElnZEdobGNtVWdZWEpsSUc1dklHWnBiR1Z6SUd4bFpuUWdhVzRnZEdobElHUnliM0I2YjI1bElHRnVlVzF2Y21Vc0lHRnVaQ0IwYUdWY2JpQWdJQ0F2THlCa2NtOXdlbTl1WlNCemFHOTFiR1FnWW1VZ1pHbHpjR3hoZVdWa0lHRnpJR2xtSUdsdUlIUm9aU0JwYm1sMGFXRnNJSE4wWVhSbExseHVJQ0FnSUhKbGMyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtGd2laSG90YzNSaGNuUmxaRndpS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJQzh2SUVOaGJHeGxaQ0IzYUdWdUlHRWdabWxzWlNCcGN5QmhaR1JsWkNCMGJ5QjBhR1VnY1hWbGRXVmNiaUFnSUNBdkx5QlNaV05sYVhabGN5QmdabWxzWldCY2JpQWdJQ0JoWkdSbFpHWnBiR1U2SUdaMWJtTjBhVzl1S0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Wld4bGJXVnVkQ0E5UFQwZ2RHaHBjeTV3Y21WMmFXVjNjME52Ym5SaGFXNWxjaWtnZEdocGN5NWxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWhaR1FvWENKa2VpMXpkR0Z5ZEdWa1hDSXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMmFXVjNjME52Ym5SaGFXNWxjaUFtSmlBaGRHaHBjeTV2Y0hScGIyNXpMbVJwYzJGaWJHVlFjbVYyYVdWM2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWNISmxkbWxsZDBWc1pXMWxiblFnUFNBa1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVMbU55WldGMFpVVnNaVzFsYm5Rb2RHaHBjeTV2Y0hScGIyNXpMbkJ5WlhacFpYZFVaVzF3YkdGMFpTNTBjbWx0S0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNXdjbVYyYVdWM1ZHVnRjR3hoZEdVZ1BTQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBPeUF2THlCQ1lXTnJkMkZ5WkhNZ1kyOXRjR0YwYVdKcGJHbDBlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WMmFXVjNjME52Ym5SaGFXNWxjaTVoY0hCbGJtUkRhR2xzWkNobWFXeGxMbkJ5WlhacFpYZEZiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQm1ZV3h6WlN3Z1gybDBaWEpoZEc5eVJYSnliM0lnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ1gybDBaWEpoZEc5eUlEMGdabWxzWlM1d2NtVjJhV1YzUld4bGJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLRndpVzJSaGRHRXRaSG90Ym1GdFpWMWNJaWxiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjRHNnSVNoZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ0tGOXpkR1Z3SUQwZ1gybDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaU2s3SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2WkdVZ1BTQmZjM1JsY0M1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzUwWlhoMFEyOXVkR1Z1ZENBOUlHWnBiR1V1Ym1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQmxjbkk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUNZbUlGOXBkR1Z5WVhSdmNpNXlaWFIxY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJScFpFbDBaWEpoZEc5eVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNHhJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXhJRDBnWm1Gc2MyVXNJRjlwZEdWeVlYUnZja1Z5Y205eU1TQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJmYVhSbGNtRjBiM0l4SUQwZ1ptbHNaUzV3Y21WMmFXVjNSV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tGd2lXMlJoZEdFdFpIb3RjMmw2WlYxY0lpbGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmYzNSbGNERTdJQ0VvWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiakVnUFNBb1gzTjBaWEF4SUQwZ1gybDBaWEpoZEc5eU1TNXVaWGgwS0NrcExtUnZibVVwT3lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1TVNBOUlIUnlkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsSUQwZ1gzTjBaWEF4TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbWx1Ym1WeVNGUk5UQ0E5SUhSb2FYTXVabWxzWlhOcGVtVW9abWxzWlM1emFYcGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2pFZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2tWeWNtOXlNU0E5SUdWeWNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNHhJQ1ltSUY5cGRHVnlZWFJ2Y2pFdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2pFdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjakVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlXUmtVbVZ0YjNabFRHbHVhM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbDl5WlcxdmRtVk1hVzVySUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lQR0VnWTJ4aGMzTTlYRnhjSW1SNkxYSmxiVzkyWlZ4Y1hDSWdhSEpsWmoxY1hGd2lhbUYyWVhOamNtbHdkRHAxYm1SbFptbHVaV1E3WEZ4Y0lpQmtZWFJoTFdSNkxYSmxiVzkyWlQ1Y0lpNWpiMjVqWVhRb2RHaHBjeTV2Y0hScGIyNXpMbVJwWTNSU1pXMXZkbVZHYVd4bExDQmNJand2WVQ1Y0lpa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWNISmxkbWxsZDBWc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb1ptbHNaUzVmY21WdGIzWmxUR2x1YXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WdGIzWmxSbWxzWlVWMlpXNTBJRDBnWm5WdVkzUnBiMjRvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN6RWdQU0JmZEdocGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaUzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptbHNaUzV6ZEdGMGRYTWdQVDA5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VWVkJNVDBGRVNVNUhLU0J5WlhSMWNtNGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1amIyNW1hWEp0S0Y5MGFHbHpMbTl3ZEdsdmJuTXVaR2xqZEVOaGJtTmxiRlZ3Ykc5aFpFTnZibVpwY20xaGRHbHZiaXdnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3pFdWNtVnRiM1psUm1sc1pTaG1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpNaUE5SUY5MGFHbHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWIzQjBhVzl1Y3k1a2FXTjBVbVZ0YjNabFJtbHNaVU52Ym1acGNtMWhkR2x2YmlrZ2NtVjBkWEp1SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VZMjl1Wm1seWJTaGZkR2hwY3k1dmNIUnBiMjV6TG1ScFkzUlNaVzF2ZG1WR2FXeGxRMjl1Wm1seWJXRjBhVzl1TENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjekl1Y21WdGIzWmxSbWxzWlNobWFXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdjbVYwZFhKdUlGOTBhR2x6TG5KbGJXOTJaVVpwYkdVb1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVNaUE5SUhSeWRXVXNJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlNaUE5SUdaaGJITmxMQ0JmYVhSbGNtRjBiM0pGY25KdmNqSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5TWlBOUlHWnBiR1V1Y0hKbGRtbGxkMFZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGNJbHRrWVhSaExXUjZMWEpsYlc5MlpWMWNJaWxiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjREk3SUNFb1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmpJZ1BTQW9YM04wWlhBeUlEMGdYMmwwWlhKaGRHOXlNaTV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dU1pQTlJSFJ5ZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVnRiM1psVEdsdWF5QTlJRjl6ZEdWd01pNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ0YjNabFRHbHVheTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpWTJ4cFkydGNJaXdnY21WdGIzWmxSbWxzWlVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2pJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2tWeWNtOXlNaUE5SUdWeWNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNHlJQ1ltSUY5cGRHVnlZWFJ2Y2pJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2pJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU1qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc0Z0lDQWdMeThnUTJGc2JHVmtJSGRvWlc1bGRtVnlJR0VnWm1sc1pTQnBjeUJ5WlcxdmRtVmtMbHh1SUNBZ0lISmxiVzkyWldSbWFXeGxPaUJtZFc1amRHbHZiaWhtYVd4bEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbkJ5WlhacFpYZEZiR1Z0Wlc1MElDRTlJRzUxYkd3Z0ppWWdabWxzWlM1d2NtVjJhV1YzUld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsSUNFOUlHNTFiR3dwSUdacGJHVXVjSEpsZG1sbGQwVnNaVzFsYm5RdWNHRnlaVzUwVG05a1pTNXlaVzF2ZG1WRGFHbHNaQ2htYVd4bExuQnlaWFpwWlhkRmJHVnRaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM1Z3WkdGMFpVMWhlRVpwYkdWelVtVmhZMmhsWkVOc1lYTnpLQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUJEWVd4c1pXUWdkMmhsYmlCaElIUm9kVzFpYm1GcGJDQm9ZWE1nWW1WbGJpQm5aVzVsY21GMFpXUmNiaUFnSUNBdkx5QlNaV05sYVhabGN5QmdabWxzWldBZ1lXNWtJR0JrWVhSaFZYSnNZRnh1SUNBZ0lIUm9kVzFpYm1GcGJEb2dablZ1WTNScGIyNG9abWxzWlN3Z1pHRjBZVlZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWm1sc1pTNXdjbVYyYVdWM1JXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNXdjbVYyYVdWM1JXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0Z3aVpIb3RabWxzWlMxd2NtVjJhV1YzWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQjBjblZsTENCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlHWmhiSE5sTENCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCZmFYUmxjbUYwYjNJZ1BTQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29YQ0piWkdGMFlTMWtlaTEwYUhWdFltNWhhV3hkWENJcFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM04wWlhBN0lDRW9YMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJQ2hmYzNSbGNDQTlJRjlwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFIVnRZbTVoYVd4RmJHVnRaVzUwSUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2RXMWlibUZwYkVWc1pXMWxiblF1WVd4MElEMGdabWxzWlM1dVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFIVnRZbTVoYVd4RmJHVnRaVzUwTG5OeVl5QTlJR1JoZEdGVmNtdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFgybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBbUppQmZhWFJsY21GMGIzSXVjbVYwZFhKdUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNpNXlaWFIxY200b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y5a2FXUkpkR1Z5WVhSdmNrVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJmYVhSbGNtRjBiM0pGY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1hDSmtlaTFwYldGblpTMXdjbVYyYVdWM1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dNU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJQzh2SUVOaGJHeGxaQ0IzYUdWdVpYWmxjaUJoYmlCbGNuSnZjaUJ2WTJOMWNuTmNiaUFnSUNBdkx5QlNaV05sYVhabGN5QmdabWxzWldBZ1lXNWtJR0J0WlhOellXZGxZRnh1SUNBZ0lHVnljbTl5T2lCbWRXNWpkR2x2YmlobWFXeGxMQ0J0WlhOellXZGxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaG1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1hDSmtlaTFsY25KdmNsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiV1Z6YzJGblpTQWhQVDBnWENKemRISnBibWRjSWlBbUppQnRaWE56WVdkbExtVnljbTl5S1NCdFpYTnpZV2RsSUQwZ2JXVnpjMkZuWlM1bGNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpTd2dYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdYMmwwWlhKaGRHOXlJRDBnWm1sc1pTNXdjbVYyYVdWM1JXeGxiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0Z3aVcyUmhkR0V0WkhvdFpYSnliM0p0WlhOellXZGxYVndpS1Z0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3T3lBaEtGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1RzZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJRjl6ZEdWd0xuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG5SbGVIUkRiMjUwWlc1MElEMGdiV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQmxjbkk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUNZbUlGOXBkR1Z5WVhSdmNpNXlaWFIxY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJScFpFbDBaWEpoZEc5eVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmlBZ0lDQmxjbkp2Y20xMWJIUnBjR3hsT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCOUxGeHVJQ0FnSUM4dklFTmhiR3hsWkNCM2FHVnVJR0VnWm1sc1pTQm5aWFJ6SUhCeWIyTmxjM05sWkM0Z1UybHVZMlVnZEdobGNtVWdhWE1nWVNCamRXVXNJRzV2ZENCaGJHd2dZV1JrWldSY2JpQWdJQ0F2THlCbWFXeGxjeUJoY21VZ2NISnZZMlZ6YzJWa0lHbHRiV1ZrYVdGMFpXeDVMbHh1SUNBZ0lDOHZJRkpsWTJWcGRtVnpJR0JtYVd4bFlGeHVJQ0FnSUhCeWIyTmxjM05wYm1jNklHWjFibU4wYVc5dUtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1pwYkdVdWNISmxkbWxsZDBWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWNISmxkbWxsZDBWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDaGNJbVI2TFhCeWIyTmxjM05wYm1kY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abWxzWlM1ZmNtVnRiM1psVEdsdWF5a2djbVYwZFhKdUlHWnBiR1V1WDNKbGJXOTJaVXhwYm1zdWFXNXVaWEpJVkUxTUlEMGdkR2hwY3k1dmNIUnBiMjV6TG1ScFkzUkRZVzVqWld4VmNHeHZZV1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJSEJ5YjJObGMzTnBibWR0ZFd4MGFYQnNaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlCRFlXeHNaV1FnZDJobGJtVjJaWElnZEdobElIVndiRzloWkNCd2NtOW5jbVZ6Y3lCblpYUnpJSFZ3WkdGMFpXUXVYRzRnSUNBZ0x5OGdVbVZqWldsMlpYTWdZR1pwYkdWZ0xDQmdjSEp2WjNKbGMzTmdJQ2h3WlhKalpXNTBZV2RsSURBdE1UQXdLU0JoYm1RZ1lHSjVkR1Z6VTJWdWRHQXVYRzRnSUNBZ0x5OGdWRzhnWjJWMElIUm9aU0IwYjNSaGJDQnVkVzFpWlhJZ2IyWWdZbmwwWlhNZ2IyWWdkR2hsSUdacGJHVXNJSFZ6WlNCZ1ptbHNaUzV6YVhwbFlGeHVJQ0FnSUhWd2JHOWhaSEJ5YjJkeVpYTnpPaUJtZFc1amRHbHZiaWhtYVd4bExDQndjbTluY21WemN5d2dZbmwwWlhOVFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQm1ZV3h6WlN3Z1gybDBaWEpoZEc5eVJYSnliM0lnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2htYVd4bExuQnlaWFpwWlhkRmJHVnRaVzUwS1NCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCZmFYUmxjbUYwYjNJZ1BTQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29YQ0piWkdGMFlTMWtlaTExY0d4dllXUndjbTluY21WemMxMWNJaWxiVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjRHNnSVNoZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ0tGOXpkR1Z3SUQwZ1gybDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaU2s3SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUY5emRHVndMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1Ym05a1pVNWhiV1VnUFQwOUlGd2lVRkpQUjFKRlUxTmNJaUEvSUc1dlpHVXVkbUZzZFdVZ1BTQndjbTluY21WemN5QTZJRzV2WkdVdWMzUjViR1V1ZDJsa2RHZ2dQU0JjSWx3aUxtTnZibU5oZENod2NtOW5jbVZ6Y3l3Z1hDSWxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5a2FXUkpkR1Z5WVhSdmNrVnljbTl5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ1pYSnlPMXh1SUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWDJsMFpYSmhkRzl5UlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNBdkx5QkRZV3hzWldRZ2QyaGxibVYyWlhJZ2RHaGxJSFJ2ZEdGc0lIVndiRzloWkNCd2NtOW5jbVZ6Y3lCblpYUnpJSFZ3WkdGMFpXUXVYRzRnSUNBZ0x5OGdRMkZzYkdWa0lIZHBkR2dnZEc5MFlXeFZjR3h2WVdSUWNtOW5jbVZ6Y3lBb01DMHhNREFwTENCMGIzUmhiRUo1ZEdWeklHRnVaQ0IwYjNSaGJFSjVkR1Z6VTJWdWRGeHVJQ0FnSUhSdmRHRnNkWEJzYjJGa2NISnZaM0psYzNNNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIMHNYRzRnSUNBZ0x5OGdRMkZzYkdWa0lHcDFjM1FnWW1WbWIzSmxJSFJvWlNCbWFXeGxJR2x6SUhObGJuUXVJRWRsZEhNZ2RHaGxJR0I0YUhKZ0lHOWlhbVZqZENCaGN5QnpaV052Ym1SY2JpQWdJQ0F2THlCd1lYSmhiV1YwWlhJc0lITnZJSGx2ZFNCallXNGdiVzlrYVdaNUlHbDBJQ2htYjNJZ1pYaGhiWEJzWlNCMGJ5QmhaR1FnWVNCRFUxSkdJSFJ2YTJWdUtTQmhibVFnWVZ4dUlDQWdJQzh2SUdCbWIzSnRSR0YwWVdBZ2IySnFaV04wSUhSdklHRmtaQ0JoWkdScGRHbHZibUZzSUdsdVptOXliV0YwYVc5dUxseHVJQ0FnSUhObGJtUnBibWM2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWdVpHbHVaMjExYkhScGNHeGxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0I5TEZ4dUlDQWdJQzh2SUZkb1pXNGdkR2hsSUdOdmJYQnNaWFJsSUhWd2JHOWhaQ0JwY3lCbWFXNXBjMmhsWkNCaGJtUWdjM1ZqWTJWemMyWjFiRnh1SUNBZ0lDOHZJRkpsWTJWcGRtVnpJR0JtYVd4bFlGeHVJQ0FnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1V1Y0hKbGRtbGxkMFZzWlcxbGJuUXBJSEpsZEhWeWJpQm1hV3hsTG5CeVpYWnBaWGRGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1hDSmtlaTF6ZFdOalpYTnpYQ0lwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjM1ZqWTJWemMyMTFiSFJwY0d4bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHZJRmRvWlc0Z2RHaGxJSFZ3Ykc5aFpDQnBjeUJqWVc1alpXeGxaQzVjYmlBZ0lDQmpZVzVqWld4bFpEb2dablZ1WTNScGIyNG9abWxzWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsYldsMEtGd2laWEp5YjNKY0lpd2dabWxzWlN3Z2RHaHBjeTV2Y0hScGIyNXpMbVJwWTNSVmNHeHZZV1JEWVc1alpXeGxaQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQmpZVzVqWld4bFpHMTFiSFJwY0d4bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHZJRmRvWlc0Z2RHaGxJSFZ3Ykc5aFpDQnBjeUJtYVc1cGMyaGxaQ3dnWldsMGFHVnlJSGRwZEdnZ2MzVmpZMlZ6Y3lCdmNpQmhiaUJsY25KdmNpNWNiaUFnSUNBdkx5QlNaV05sYVhabGN5QmdabWxzWldCY2JpQWdJQ0JqYjIxd2JHVjBaVG9nWm5WdVkzUnBiMjRvWm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptbHNaUzVmY21WdGIzWmxUR2x1YXlrZ1ptbHNaUzVmY21WdGIzWmxUR2x1YXk1cGJtNWxja2hVVFV3Z1BTQjBhR2x6TG05d2RHbHZibk11WkdsamRGSmxiVzkyWlVacGJHVTdYRzRnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbkJ5WlhacFpYZEZiR1Z0Wlc1MEtTQnlaWFIxY200Z1ptbHNaUzV3Y21WMmFXVjNSV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0Z3aVpIb3RZMjl0Y0d4bGRHVmNJaWs3WEc0Z0lDQWdmU3hjYmlBZ0lDQmpiMjF3YkdWMFpXMTFiSFJwY0d4bE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQjlMRnh1SUNBZ0lHMWhlR1pwYkdWelpYaGpaV1ZrWldRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIMHNYRzRnSUNBZ2JXRjRabWxzWlhOeVpXRmphR1ZrT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCOUxGeHVJQ0FnSUhGMVpYVmxZMjl0Y0d4bGRHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSDBzWEc0Z0lDQWdZV1JrWldSbWFXeGxjem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnZlZ4dWZUdGNiblpoY2lBa1lqWTFOMk13TXpFMU5XWmpNamRsTWlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVJRDBnSkdJMk5UZGpNRE14TlRWbVl6STNaVElrZG1GeUpHUmxabUYxYkhSUGNIUnBiMjV6TzF4dVhHNWNiblpoY2lBa1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVJRDBnTHlvalgxOVFWVkpGWDE4cUx5Qm1kVzVqZEdsdmJpaEZiV2wwZEdWeUtTQjdYRzRnSUNBZ1hDSjFjMlVnYzNSeWFXTjBYQ0k3WEc0Z0lDQWdKRFp0VlRoM0pITjNZMmhsYkhCbGNuTXVhVzVvWlhKcGRITW9KR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1N3Z1JXMXBkSFJsY2lrN1hHNGdJQ0FnWm5WdVkzUnBiMjRnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TaGxiQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBa05tMVZPSGNrYzNkamFHVnNjR1Z5Y3k1amJHRnpjME5oYkd4RGFHVmpheWgwYUdsekxDQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01S1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdsek8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3lBOUlDUTJiVlU0ZHlSemQyTm9aV3h3WlhKekxuQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200b2RHaHBjeXdnSkRadFZUaDNKSE4zWTJobGJIQmxjbk11WjJWMFVISnZkRzkwZVhCbFQyWW9KR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1NrdVkyRnNiQ2gwYUdsektTazdYRzRnSUNBZ0lDQWdJSFpoY2lCbVlXeHNZbUZqYXl3Z2JHVm1kRHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVaV3hsYldWdWRDQTlJR1ZzTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVqYkdsamEyRmliR1ZGYkdWdFpXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1c2FYTjBaVzVsY25NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVabWxzWlhNZ1BTQmJYVHNnTHk4Z1FXeHNJR1pwYkdWelhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdYM1JvYVhNdVpXeGxiV1Z1ZENBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnWDNSb2FYTXVaV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1gzUm9hWE11Wld4bGJXVnVkQ2s3WEc0Z0lDQWdJQ0FnSUM4dklFNXZkQ0JqYUdWamEybHVaeUJwWmlCcGJuTjBZVzVqWlNCdlppQklWRTFNUld4bGJXVnVkQ0J2Y2lCRmJHVnRaVzUwSUhOcGJtTmxJRWxGT1NCcGN5QmxlSFJ5WlcxbGJIa2dkMlZwY21RdVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWDNSb2FYTXVaV3hsYldWdWRDQjhmQ0JmZEdocGN5NWxiR1Z0Wlc1MExtNXZaR1ZVZVhCbElEMDlJRzUxYkd3cElIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrbHVkbUZzYVdRZ1pISnZjSHB2Ym1VZ1pXeGxiV1Z1ZEM1Y0lpazdYRzRnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTVsYkdWdFpXNTBMbVJ5YjNCNmIyNWxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pFY205d2VtOXVaU0JoYkhKbFlXUjVJR0YwZEdGamFHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdUbTkzSUdGa1pDQjBhR2x6SUdSeWIzQjZiMjVsSUhSdklIUm9aU0JwYm5OMFlXNWpaWE11WEc0Z0lDQWdJQ0FnSUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VhVzV6ZEdGdVkyVnpMbkIxYzJnb0pEWnRWVGgzSkhOM1kyaGxiSEJsY25NdVlYTnpaWEowVkdocGMwbHVhWFJwWVd4cGVtVmtLRjkwYUdsektTazdYRzRnSUNBZ0lDQWdJQzh2SUZCMWRDQjBhR1VnWkhKdmNIcHZibVVnYVc1emFXUmxJSFJvWlNCbGJHVnRaVzUwSUdsMGMyVnNaaTVjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVaV3hsYldWdWRDNWtjbTl3ZW05dVpTQTlJQ1EyYlZVNGR5UnpkMk5vWld4d1pYSnpMbUZ6YzJWeWRGUm9hWE5KYm1sMGFXRnNhWHBsWkNoZmRHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiR1Z0Wlc1MFQzQjBhVzl1Y3lBOUlDaHNaV1owSUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzV2Y0hScGIyNXpSbTl5Uld4bGJXVnVkQ2hmZEdocGN5NWxiR1Z0Wlc1MEtTa2dJVDBnYm5Wc2JDQS9JR3hsWm5RZ09pQjdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbTl3ZEdsdmJuTWdQU0FrY0dGeVkyVnNKR2x1ZEdWeWIzQkVaV1poZFd4MEtDUTJiVlU0ZHlScWRYTjBaWGgwWlc1a0tTaDBjblZsTENCN1hHNGdJQ0FnSUNBZ0lIMHNJQ1JpTmpVM1l6QXpNVFUxWm1NeU4yVXlKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprc0lHVnNaVzFsYm5SUGNIUnBiMjV6TENCdmNIUnBiMjV6SUNFOUlHNTFiR3dnUHlCdmNIUnBiMjV6SURvZ2UxeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXViM0IwYVc5dWN5NXdjbVYyYVdWM1ZHVnRjR3hoZEdVZ1BTQmZkR2hwY3k1dmNIUnBiMjV6TG5CeVpYWnBaWGRVWlcxd2JHRjBaUzV5WlhCc1lXTmxLQzljWEc0cUwyY3NJRndpWENJcE8xeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdZbkp2ZDNObGNpQm1ZV2xzWldRc0lHcDFjM1FnWTJGc2JDQjBhR1VnWm1Gc2JHSmhZMnNnWVc1a0lHeGxZWFpsWEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1dmNIUnBiMjV6TG1admNtTmxSbUZzYkdKaFkyc2dmSHdnSVNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VhWE5DY205M2MyVnlVM1Z3Y0c5eWRHVmtLQ2twSUhKbGRIVnliaUFrTm0xVk9IY2tjM2RqYUdWc2NHVnljeTV3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVLRjkwYUdsekxDQmZkR2hwY3k1dmNIUnBiMjV6TG1aaGJHeGlZV05yTG1OaGJHd29KRFp0VlRoM0pITjNZMmhsYkhCbGNuTXVZWE56WlhKMFZHaHBjMGx1YVhScFlXeHBlbVZrS0Y5MGFHbHpLU2twTzF4dUlDQWdJQ0FnSUNBdkx5QkFiM0IwYVc5dWN5NTFjbXdnUFNCQVpXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVWdYQ0poWTNScGIyNWNJaUIxYm14bGMzTWdRRzl3ZEdsdmJuTXVkWEpzUDF4dUlDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWIzQjBhVzl1Y3k1MWNtd2dQVDBnYm5Wc2JDa2dYM1JvYVhNdWIzQjBhVzl1Y3k1MWNtd2dQU0JmZEdocGN5NWxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2hjSW1GamRHbHZibHdpS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NXZjSFJwYjI1ekxuVnliQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVG04Z1ZWSk1JSEJ5YjNacFpHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtOXdkR2x2Ym5NdVlXTmpaWEIwWldSR2FXeGxjeUFtSmlCZmRHaHBjeTV2Y0hScGIyNXpMbUZqWTJWd2RHVmtUV2x0WlZSNWNHVnpLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0paYjNVZ1kyRnVKM1FnY0hKdmRtbGtaU0JpYjNSb0lDZGhZMk5sY0hSbFpFWnBiR1Z6SnlCaGJtUWdKMkZqWTJWd2RHVmtUV2x0WlZSNWNHVnpKeTRnSjJGalkyVndkR1ZrVFdsdFpWUjVjR1Z6SnlCcGN5QmtaWEJ5WldOaGRHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtOXdkR2x2Ym5NdWRYQnNiMkZrVFhWc2RHbHdiR1VnSmlZZ1gzUm9hWE11YjNCMGFXOXVjeTVqYUhWdWEybHVaeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpV1c5MUlHTmhibTV2ZENCelpYUWdZbTkwYURvZ2RYQnNiMkZrVFhWc2RHbHdiR1VnWVc1a0lHTm9kVzVyYVc1bkxsd2lLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG05d2RHbHZibk11WW1sdVlYSjVRbTlrZVNBbUppQmZkR2hwY3k1dmNIUnBiMjV6TG5Wd2JHOWhaRTExYkhScGNHeGxLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0paYjNVZ1kyRnVibTkwSUhObGRDQmliM1JvT2lCaWFXNWhjbmxDYjJSNUlHRnVaQ0IxY0d4dllXUk5kV3gwYVhCc1pTNWNJaWs3WEc0Z0lDQWdJQ0FnSUM4dklFSmhZMnQzWVhKa2N5QmpiMjF3WVhScFltbHNhWFI1WEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1dmNIUnBiMjV6TG1GalkyVndkR1ZrVFdsdFpWUjVjR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXZjSFJwYjI1ekxtRmpZMlZ3ZEdWa1JtbHNaWE1nUFNCZmRHaHBjeTV2Y0hScGIyNXpMbUZqWTJWd2RHVmtUV2x0WlZSNWNHVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbTl3ZEdsdmJuTXVZV05qWlhCMFpXUk5hVzFsVkhsd1pYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1FtRmphM2RoY21SeklHTnZiWEJoZEdsaWFXeHBkSGxjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG05d2RHbHZibk11Y21WdVlXMWxSbWxzWlc1aGJXVWdJVDBnYm5Wc2JDa2dYM1JvYVhNdWIzQjBhVzl1Y3k1eVpXNWhiV1ZHYVd4bElEMGdablZ1WTNScGIyNG9abWxzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtOXdkR2x2Ym5NdWNtVnVZVzFsUm1sc1pXNWhiV1V1WTJGc2JDZ2tObTFWT0hja2MzZGphR1ZzY0dWeWN5NWhjM05sY25SVWFHbHpTVzVwZEdsaGJHbDZaV1FvWDNSb2FYTXBMQ0JtYVd4bExtNWhiV1VzSUdacGJHVXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlGOTBhR2x6TG05d2RHbHZibk11YldWMGFHOWtJRDA5UFNCY0luTjBjbWx1WjF3aUtTQmZkR2hwY3k1dmNIUnBiMjV6TG0xbGRHaHZaQ0E5SUY5MGFHbHpMbTl3ZEdsdmJuTXViV1YwYUc5a0xuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ29abUZzYkdKaFkyc2dQU0JmZEdocGN5NW5aWFJGZUdsemRHbHVaMFpoYkd4aVlXTnJLQ2twSUNZbUlHWmhiR3hpWVdOckxuQmhjbVZ1ZEU1dlpHVXBJQzh2SUZKbGJXOTJaU0IwYUdVZ1ptRnNiR0poWTJ0Y2JpQWdJQ0FnSUNBZ1ptRnNiR0poWTJzdWNHRnlaVzUwVG05a1pTNXlaVzF2ZG1WRGFHbHNaQ2htWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ0FnSUM4dklFUnBjM0JzWVhrZ2NISmxkbWxsZDNNZ2FXNGdkR2hsSUhCeVpYWnBaWGR6UTI5dWRHRnBibVZ5SUdWc1pXMWxiblFnYjNJZ2RHaGxJRVJ5YjNCNmIyNWxJR1ZzWlcxbGJuUWdkVzVzWlhOeklHVjRjR3hwWTJsMGJIa2djMlYwSUhSdklHWmhiSE5sWEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1dmNIUnBiMjV6TG5CeVpYWnBaWGR6UTI5dWRHRnBibVZ5SUNFOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG05d2RHbHZibk11Y0hKbGRtbGxkM05EYjI1MFlXbHVaWElwSUY5MGFHbHpMbkJ5WlhacFpYZHpRMjl1ZEdGcGJtVnlJRDBnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNW5aWFJGYkdWdFpXNTBLRjkwYUdsekxtOXdkR2x2Ym5NdWNISmxkbWxsZDNORGIyNTBZV2x1WlhJc0lGd2ljSEpsZG1sbGQzTkRiMjUwWVdsdVpYSmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUY5MGFHbHpMbkJ5WlhacFpYZHpRMjl1ZEdGcGJtVnlJRDBnWDNSb2FYTXVaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1gzUm9hWE11YjNCMGFXOXVjeTVqYkdsamEyRmliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTV2Y0hScGIyNXpMbU5zYVdOcllXSnNaU0E5UFQwZ2RISjFaU2tnWDNSb2FYTXVZMnhwWTJ0aFlteGxSV3hsYldWdWRITWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVaV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ1gzUm9hWE11WTJ4cFkydGhZbXhsUld4bGJXVnVkSE1nUFNBa1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVMbWRsZEVWc1pXMWxiblJ6S0Y5MGFHbHpMbTl3ZEdsdmJuTXVZMnhwWTJ0aFlteGxMQ0JjSW1Oc2FXTnJZV0pzWlZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JmZEdocGN5NXBibWwwS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ0pEWnRWVGgzSkhOM1kyaGxiSEJsY25NdVkzSmxZWFJsUTJ4aGMzTW9KR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1N3Z1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaWFIxY201eklHRnNiQ0JtYVd4bGN5QjBhR0YwSUdoaGRtVWdZbVZsYmlCaFkyTmxjSFJsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0ltZGxkRUZqWTJWd2RHVmtSbWxzWlhOY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJuWlhSQlkyTmxjSFJsWkVacGJHVnpLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiR1Z6TG1acGJIUmxjaWhtZFc1amRHbHZiaWhtYVd4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtYVd4bExtRmpZMlZ3ZEdWa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMbTFoY0NobWRXNWpkR2x2YmlobWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWFXeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCU1pYUjFjbTV6SUdGc2JDQm1hV3hsY3lCMGFHRjBJR2hoZG1VZ1ltVmxiaUJ5WldwbFkzUmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUbTkwSUhOMWNtVWdkMmhsYmlCMGFHRjBKM01nWjI5cGJtY2dkRzhnWW1VZ2RYTmxablZzTENCaWRYUWdZV1JrWldRZ1ptOXlJR052YlhCc1pYUmxibVZ6Y3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSm5aWFJTWldwbFkzUmxaRVpwYkdWelhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWjJWMFVtVnFaV04wWldSR2FXeGxjeWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1hV3hsY3k1bWFXeDBaWElvWm5WdVkzUnBiMjRvWm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSVdacGJHVXVZV05qWlhCMFpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2t1YldGd0tHWjFibU4wYVc5dUtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWnBiR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0puWlhSR2FXeGxjMWRwZEdoVGRHRjBkWE5jSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJHYVd4bGMxZHBkR2hUZEdGMGRYTW9jM1JoZEhWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm1sc1pYTXVabWxzZEdWeUtHWjFibU4wYVc5dUtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWnBiR1V1YzNSaGRIVnpJRDA5UFNCemRHRjBkWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrdWJXRndLR1oxYm1OMGFXOXVLR1pwYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsZEhWeWJuTWdZV3hzSUdacGJHVnpJSFJvWVhRZ1lYSmxJR2x1SUhSb1pTQnhkV1YxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0ltZGxkRkYxWlhWbFpFWnBiR1Z6WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwVVhWbGRXVmtSbWxzWlhNb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFJtbHNaWE5YYVhSb1UzUmhkSFZ6S0NSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VVVlZGVlVWRUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW1kbGRGVndiRzloWkdsdVowWnBiR1Z6WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwVlhCc2IyRmthVzVuUm1sc1pYTW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBSbWxzWlhOWGFYUm9VM1JoZEhWektDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1VlZCTVQwRkVTVTVIS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbWRsZEVGa1pHVmtSbWxzWlhOY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJuWlhSQlpHUmxaRVpwYkdWektDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFWnBiR1Z6VjJsMGFGTjBZWFIxY3lna1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVMa0ZFUkVWRUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSbWxzWlhNZ2RHaGhkQ0JoY21VZ1pXbDBhR1Z5SUhGMVpYVmxaQ0J2Y2lCMWNHeHZZV1JwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSm5aWFJCWTNScGRtVkdhV3hsYzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR2RsZEVGamRHbDJaVVpwYkdWektDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1acGJHVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpaG1hV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1hV3hsTG5OMFlYUjFjeUE5UFQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVWVUV4UFFVUkpUa2NnZkh3Z1ptbHNaUzV6ZEdGMGRYTWdQVDA5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VVVlZGVlVWRU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBMbTFoY0NobWRXNWpkR2x2YmlobWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWFXeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHVWdablZ1WTNScGIyNGdkR2hoZENCblpYUnpJR05oYkd4bFpDQjNhR1Z1SUVSeWIzQjZiMjVsSUdseklHbHVhWFJwWVd4cGVtVmtMaUJaYjNWY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOaGJpQW9ZVzVrSUhOb2IzVnNaQ2tnYzJWMGRYQWdaWFpsYm5RZ2JHbHpkR1Z1WlhKeklHbHVjMmxrWlNCMGFHbHpJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW1sdWFYUmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCcGJtbDBLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3pFeUlEMGdkR2hwY3l3Z1gzUm9hWE14SUQwZ2RHaHBjeXdnWDNSb2FYTXlJRDBnZEdocGN5d2dYM1JvYVhNeklEMGdkR2hwY3l3Z1gzUm9hWE0wSUQwZ2RHaHBjeXdnWDNSb2FYTTFJRDBnZEdocGN5d2dYM1JvYVhNMklEMGdkR2hwY3l3Z1gzUm9hWE0zSUQwZ2RHaHBjeXdnWDNSb2FYTTRJRDBnZEdocGN5d2dYM1JvYVhNNUlEMGdkR2hwY3l3Z1gzUm9hWE14TUNBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXNGdZMkZ6WlNCcGRDQnBjMjRuZENCelpYUWdZV3h5WldGa2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnNaVzFsYm5RdWRHRm5UbUZ0WlNBOVBUMGdYQ0ptYjNKdFhDSXBJSFJvYVhNdVpXeGxiV1Z1ZEM1elpYUkJkSFJ5YVdKMWRHVW9YQ0psYm1OMGVYQmxYQ0lzSUZ3aWJYVnNkR2x3WVhKMEwyWnZjbTB0WkdGMFlWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWhjSW1SeWIzQjZiMjVsWENJcElDWW1JQ0YwYUdsekxtVnNaVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWhjSWk1a2VpMXRaWE56WVdkbFhDSXBLU0IwYUdsekxtVnNaVzFsYm5RdVlYQndaVzVrUTJocGJHUW9KR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1amNtVmhkR1ZGYkdWdFpXNTBLRndpUEdScGRpQmpiR0Z6Y3oxY1hGd2laSG90WkdWbVlYVnNkQ0JrZWkxdFpYTnpZV2RsWEZ4Y0lqNDhZblYwZEc5dUlHTnNZWE56UFZ4Y1hDSmtlaTFpZFhSMGIyNWNYRndpSUhSNWNHVTlYRnhjSW1KMWRIUnZibHhjWENJK1hDSXVZMjl1WTJGMEtIUm9hWE11YjNCMGFXOXVjeTVrYVdOMFJHVm1ZWFZzZEUxbGMzTmhaMlVzSUZ3aVBDOWlkWFIwYjI0K1BDOWthWFkrWENJcEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVZMnhwWTJ0aFlteGxSV3hsYldWdWRITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WlhSMWNFaHBaR1JsYmtacGJHVkpibkIxZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpNVEVnUFNCZmRHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTVvYVdSa1pXNUdhV3hsU1c1d2RYUXBJRjkwYUdsekxtaHBaR1JsYmtacGJHVkpibkIxZEM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLRjkwYUdsekxtaHBaR1JsYmtacGJHVkpibkIxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVvYVdSa1pXNUdhV3hsU1c1d2RYUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhVzV3ZFhSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1b2FXUmtaVzVHYVd4bFNXNXdkWFF1YzJWMFFYUjBjbWxpZFhSbEtGd2lkSGx3WlZ3aUxDQmNJbVpwYkdWY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXViM0IwYVc5dWN5NXRZWGhHYVd4bGN5QTlQVDBnYm5Wc2JDQjhmQ0JmZEdocGN5NXZjSFJwYjI1ekxtMWhlRVpwYkdWeklENGdNU2tnWDNSb2FYTXVhR2xrWkdWdVJtbHNaVWx1Y0hWMExuTmxkRUYwZEhKcFluVjBaU2hjSW0xMWJIUnBjR3hsWENJc0lGd2liWFZzZEdsd2JHVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NW9hV1JrWlc1R2FXeGxTVzV3ZFhRdVkyeGhjM05PWVcxbElEMGdYQ0prZWkxb2FXUmtaVzR0YVc1d2RYUmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTV2Y0hScGIyNXpMbUZqWTJWd2RHVmtSbWxzWlhNZ0lUMDlJRzUxYkd3cElGOTBhR2x6TG1ocFpHUmxia1pwYkdWSmJuQjFkQzV6WlhSQmRIUnlhV0oxZEdVb1hDSmhZMk5sY0hSY0lpd2dYM1JvYVhNdWIzQjBhVzl1Y3k1aFkyTmxjSFJsWkVacGJHVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTV2Y0hScGIyNXpMbU5oY0hSMWNtVWdJVDA5SUc1MWJHd3BJRjkwYUdsekxtaHBaR1JsYmtacGJHVkpibkIxZEM1elpYUkJkSFJ5YVdKMWRHVW9YQ0pqWVhCMGRYSmxYQ0lzSUY5MGFHbHpMbTl3ZEdsdmJuTXVZMkZ3ZEhWeVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJOWVd0cGJtY2djM1Z5WlNCMGFHRjBJRzV2SUc5dVpTQmpZVzRnWENKMFlXSmNJaUJwYm5SdklIUm9hWE1nWm1sbGJHUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1b2FXUmtaVzVHYVd4bFNXNXdkWFF1YzJWMFFYUjBjbWxpZFhSbEtGd2lkR0ZpYVc1a1pYaGNJaXdnWENJdE1Wd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1dmRDQnpaWFIwYVc1bklHQmthWE53YkdGNVBWd2libTl1WlZ3aVlDQmlaV05oZFhObElITnZiV1VnWW5KdmQzTmxjbk1nWkc5dUozUWdZV05qWlhCMElHTnNhV05yYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2IyNGdaV3hsYldWdWRITWdkR2hoZENCaGNtVnVKM1FnWkdsemNHeGhlV1ZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVhR2xrWkdWdVJtbHNaVWx1Y0hWMExuTjBlV3hsTG5acGMybGlhV3hwZEhrZ1BTQmNJbWhwWkdSbGJsd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaR1Z1Um1sc1pVbHVjSFYwTG5OMGVXeGxMbkJ2YzJsMGFXOXVJRDBnWENKaFluTnZiSFYwWlZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YUdsa1pHVnVSbWxzWlVsdWNIVjBMbk4wZVd4bExuUnZjQ0E5SUZ3aU1Gd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaR1Z1Um1sc1pVbHVjSFYwTG5OMGVXeGxMbXhsWm5RZ1BTQmNJakJjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWhwWkdSbGJrWnBiR1ZKYm5CMWRDNXpkSGxzWlM1b1pXbG5hSFFnUFNCY0lqQmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1JsYmtacGJHVkpibkIxZEM1emRIbHNaUzUzYVdSMGFDQTlJRndpTUZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVuWlhSRmJHVnRaVzUwS0Y5MGFHbHpMbTl3ZEdsdmJuTXVhR2xrWkdWdVNXNXdkWFJEYjI1MFlXbHVaWElzSUZ3aWFHbGtaR1Z1U1c1d2RYUkRiMjUwWVdsdVpYSmNJaWt1WVhCd1pXNWtRMmhwYkdRb1gzUm9hWE11YUdsa1pHVnVSbWxzWlVsdWNIVjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1JsYmtacGJHVkpibkIxZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVkyaGhibWRsWENJc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZhR2xrWkdWdVJtbHNaVWx1Y0hWMElEMGdYM1JvYVhNeE1TNW9hV1JrWlc1R2FXeGxTVzV3ZFhRc0lHWnBiR1Z6SUQwZ1gyaHBaR1JsYmtacGJHVkpibkIxZEM1bWFXeGxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVc0lGOWthV1JKZEdWeVlYUnZja1Z5Y205eUlEMGdabUZzYzJVc0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxjeTVzWlc1bmRHZ3BJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ1ptbHNaWE5iVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjRHNnSVNoZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ0tGOXpkR1Z3SUQwZ1gybDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaU2s3SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsSUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN6RXhMbUZrWkVacGJHVW9abWxzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlHVnljanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lWOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z0ppWWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJmYVhSbGNtRjBiM0pGY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3pFeExtVnRhWFFvWENKaFpHUmxaR1pwYkdWelhDSXNJR1pwYkdWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMWNFaHBaR1JsYmtacGJHVkpibkIxZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhWd1NHbGtaR1Z1Um1sc1pVbHVjSFYwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11VlZKTUlEMGdkMmx1Wkc5M0xsVlNUQ0FoUFQwZ2JuVnNiQ0EvSUhkcGJtUnZkeTVWVWt3Z09pQjNhVzVrYjNjdWQyVmlhMmwwVlZKTU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpTd2dYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJWMGRYQWdZV3hzSUdWMlpXNTBJR3hwYzNSbGJtVnljeUJ2YmlCMGFHVWdSSEp2Y0hwdmJtVWdiMkpxWldOMElHbDBjMlZzWmk1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkdobGVTZHlaU0J1YjNRZ2FXNGdRSE5sZEhWd1JYWmxiblJNYVhOMFpXNWxjbk1vS1NCaVpXTmhkWE5sSUhSb1pYa2djMmh2ZFd4a2JpZDBJR0psSUhKbGJXOTJaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZV2RoYVc0Z2QyaGxiaUIwYUdVZ1pISnZjSHB2Ym1VZ1oyVjBjeUJrYVhOaFlteGxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCZmFYUmxjbUYwYjNJZ1BTQjBhR2x6TG1WMlpXNTBjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWMlpXNTBUbUZ0WlNBOUlGOXpkR1Z3TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJpaGxkbVZ1ZEU1aGJXVXNJSFJvYVhNdWIzQjBhVzl1YzF0bGRtVnVkRTVoYldWZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ1pYSnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFgybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBbUppQmZhWFJsY21GMGIzSXVjbVYwZFhKdUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0l1Y21WMGRYSnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUY5cGRHVnlZWFJ2Y2tWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI0b1hDSjFjR3h2WVdSd2NtOW5jbVZ6YzF3aUxDQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpNVEl1ZFhCa1lYUmxWRzkwWVd4VmNHeHZZV1JRY205bmNtVnpjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI0b1hDSnlaVzF2ZG1Wa1ptbHNaVndpTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsek1TNTFjR1JoZEdWVWIzUmhiRlZ3Ykc5aFpGQnliMmR5WlhOektDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZiaWhjSW1OaGJtTmxiR1ZrWENJc0lHWjFibU4wYVc5dUtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TWk1bGJXbDBLRndpWTI5dGNHeGxkR1ZjSWl3Z1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSVzFwZENCaElHQnhkV1YxWldOdmJYQnNaWFJsWUNCbGRtVnVkQ0JwWmlCaGJHd2dabWxzWlhNZ1ptbHVhWE5vWldRZ2RYQnNiMkZrYVc1bkxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI0b1hDSmpiMjF3YkdWMFpWd2lMQ0JtZFc1amRHbHZiaWhtYVd4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3pFeElEMGdYM1JvYVhNek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gzUm9hWE16TG1kbGRFRmtaR1ZrUm1sc1pYTW9LUzVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdYM1JvYVhNekxtZGxkRlZ3Ykc5aFpHbHVaMFpwYkdWektDa3ViR1Z1WjNSb0lEMDlQU0F3SUNZbUlGOTBhR2x6TXk1blpYUlJkV1YxWldSR2FXeGxjeWdwTG14bGJtZDBhQ0E5UFQwZ01Da2dMeThnVkdocGN5QnVaV1ZrY3lCMGJ5QmlaU0JrWldabGNuSmxaQ0J6YnlCMGFHRjBJR0J4ZFdWMVpXTnZiWEJzWlhSbFlDQnlaV0ZzYkhrZ2RISnBaMmRsY25NZ1lXWjBaWElnWUdOdmJYQnNaWFJsWUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3pFeExtVnRhWFFvWENKeGRXVjFaV052YlhCc1pYUmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5dWRHRnBibk5HYVd4bGN5QTlJR1oxYm1OMGFXOXVJR052Ym5SaGFXNXpSbWxzWlhNb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzVrWVhSaFZISmhibk5tWlhJdWRIbHdaWE1wSUM4dklFSmxZMkYxYzJVZ1pTNWtZWFJoVkhKaGJuTm1aWEl1ZEhsd1pYTWdhWE1nWVc0Z1QySnFaV04wSUdsdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsRkxDQjNaU0J1WldWa0lIUnZJR2wwWlhKaGRHVWdiR2xyWlNCMGFHbHpJR2x1YzNSbFlXUWdiMlpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkWE5wYm1jZ1pTNWtZWFJoVkhKaGJuTm1aWEl1ZEhsd1pYTXVjMjl0WlNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdhU0E5SURBN0lHa2dQQ0JsTG1SaGRHRlVjbUZ1YzJabGNpNTBlWEJsY3k1c1pXNW5kR2c3SUdrckt5bDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlM1a1lYUmhWSEpoYm5ObVpYSXVkSGx3WlhOYmFWMGdQVDA5SUZ3aVJtbHNaWE5jSWlrZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2VUhKdmNHRm5ZWFJwYjI0Z1BTQm1kVzVqZEdsdmJpQnViMUJ5YjNCaFoyRjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsY21VZ1lYSmxJRzV2SUdacGJHVnpMQ0IzWlNCa2IyNG5kQ0IzWVc1MElIUnZJSE4wYjNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnY0hKdmNHRm5ZWFJwYjI0Z2MyOGdkMlVnWkc5dUozUWdhVzUwWlhKbVpYSmxJSGRwZEdnZ2IzUm9aWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaSEpoWnlCaGJtUWdaSEp2Y0NCaVpXaGhkbWx2ZFhJdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyOXVkR0ZwYm5OR2FXeGxjeWhsS1NrZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzV3Y21WMlpXNTBSR1ZtWVhWc2RDa2djbVYwZFhKdUlHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnlaWFIxY200Z1pTNXlaWFIxY201V1lXeDFaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUhSb1pTQnNhWE4wWlc1bGNuTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14cGMzUmxibVZ5Y3lBOUlGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkRG9nZEdocGN5NWxiR1Z0Wlc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblJ6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEpoWjNOMFlYSjBPaUJtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN6UXVaVzFwZENoY0ltUnlZV2R6ZEdGeWRGd2lMQ0JsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSeVlXZGxiblJsY2pvZ1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMUJ5YjNCaFoyRjBhVzl1S0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTTFMbVZ0YVhRb1hDSmtjbUZuWlc1MFpYSmNJaXdnWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2NtRm5iM1psY2pvZ1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJOWVd0bGN5QnBkQ0J3YjNOemFXSnNaU0IwYnlCa2NtRm5JR1pwYkdWeklHWnliMjBnWTJoeWIyMWxKM01nWkc5M2JteHZZV1FnWW1GeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHaDBkSEE2THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5eGRXVnpkR2x2Ym5Ndk1UazFNalkwTXpBdlpISmhaeTFoYm1RdFpISnZjQzFtYVd4bExYVndiRzloWkhNdFpuSnZiUzFqYUhKdmJXVXRaRzkzYm14dllXUnpMV0poY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWNua2dhWE1nY21WeGRXbHlaV1FnZEc4Z2NISmxkbVZ1ZENCaWRXY2dhVzRnU1c1MFpYSnVaWFFnUlhod2JHOXlaWElnTVRFZ0tGTkRVa2xRVkRZMU5UTTFJR1Y0WTJWd2RHbHZiaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWbVkzUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbFptTjBJRDBnWlM1a1lYUmhWSEpoYm5ObVpYSXVaV1ptWldOMFFXeHNiM2RsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbVJoZEdGVWNtRnVjMlpsY2k1a2NtOXdSV1ptWldOMElEMGdYQ0p0YjNabFhDSWdQVDA5SUdWbVkzUWdmSHdnWENKc2FXNXJUVzkyWlZ3aUlEMDlQU0JsWm1OMElEOGdYQ0p0YjNabFhDSWdPaUJjSW1OdmNIbGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlRY205d1lXZGhkR2x2YmlobEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpOaTVsYldsMEtGd2laSEpoWjI5MlpYSmNJaXdnWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2NtRm5iR1ZoZG1VNklHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6Tnk1bGJXbDBLRndpWkhKaFoyeGxZWFpsWENJc0lHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEp2Y0RvZ1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMUJ5YjNCaFoyRjBhVzl1S0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTTRMbVJ5YjNBb1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtjbUZuWlc1a09pQm1kVzVqZEdsdmJpaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3prdVpXMXBkQ2hjSW1SeVlXZGxibVJjSWl3Z1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMnhwWTJ0aFlteGxSV3hsYldWdWRITXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGpiR2xqYTJGaWJHVkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3pFeElEMGdYM1JvYVhNeE1EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsek1UQXViR2x6ZEdWdVpYSnpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZERvZ1kyeHBZMnRoWW14bFJXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNhV05yT2lCbWRXNWpkR2x2YmlobGRuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVDI1c2VTQjBhR1VnWVdOMGRXRnNJR1J5YjNCNmIyNWxJRzl5SUhSb1pTQnRaWE56WVdkbElHVnNaVzFsYm5RZ2MyaHZkV3hrSUhSeWFXZG5aWElnWm1sc1pTQnpaV3hsWTNScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05zYVdOcllXSnNaVVZzWlcxbGJuUWdJVDA5SUY5MGFHbHpNVEV1Wld4bGJXVnVkQ0I4ZkNCbGRuUXVkR0Z5WjJWMElEMDlQU0JmZEdocGN6RXhMbVZzWlcxbGJuUWdmSHdnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNWxiR1Z0Wlc1MFNXNXphV1JsS0dWMmRDNTBZWEpuWlhRc0lGOTBhR2x6TVRFdVpXeGxiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLRndpTG1SNkxXMWxjM05oWjJWY0lpa3BLU0JmZEdocGN6RXhMbWhwWkdSbGJrWnBiR1ZKYm5CMWRDNWpiR2xqYXlncE95QXZMeUJHYjNKM1lYSmtJSFJvWlNCamJHbGphMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wlc1aFlteGxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzQjBhVzl1Y3k1cGJtbDBMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUU1dmRDQm1kV3hzZVNCMFpYTjBaV1FnZVdWMFhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2laR1Z6ZEhKdmVWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOaFlteGxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WQmJHeEdhV3hsY3loMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvYVdSa1pXNUdhV3hsU1c1d2RYUWdJVDBnYm5Wc2JDQS9JSFJvYVhNdWFHbGtaR1Z1Um1sc1pVbHVjSFYwTG5CaGNtVnVkRTV2WkdVZ09pQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYVdSa1pXNUdhV3hsU1c1d2RYUXVjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNoMGFHbHpMbWhwWkdSbGJrWnBiR1ZKYm5CMWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR2xrWkdWdVJtbHNaVWx1Y0hWMElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVaV3hsYldWdWRDNWtjbTl3ZW05dVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVwYm5OMFlXNWpaWE11YzNCc2FXTmxLQ1JoTmpBeFptWXpNR1kwT0RObE9URTNKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprdWFXNXpkR0Z1WTJWekxtbHVaR1Y0VDJZb2RHaHBjeWtzSURFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpZFhCa1lYUmxWRzkwWVd4VmNHeHZZV1JRY205bmNtVnpjMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlIVndaR0YwWlZSdmRHRnNWWEJzYjJGa1VISnZaM0psYzNNb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSdmRHRnNWWEJzYjJGa1VISnZaM0psYzNNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJ2ZEdGc1FubDBaWE5UWlc1MElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHOTBZV3hDZVhSbGN5QTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRmpkR2wyWlVacGJHVnpJRDBnZEdocGN5NW5aWFJCWTNScGRtVkdhV3hsY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGRtVkdhV3hsY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxMQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUdaaGJITmxMQ0JmYVhSbGNtRjBiM0pGY25KdmNpQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdYMmwwWlhKaGRHOXlJRDBnZEdocGN5NW5aWFJCWTNScGRtVkdhV3hsY3lncFcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM04wWlhBN0lDRW9YMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJQ2hmYzNSbGNDQTlJRjlwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJHVWdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiM1JoYkVKNWRHVnpVMlZ1ZENBclBTQm1hV3hsTG5Wd2JHOWhaQzVpZVhSbGMxTmxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOTBZV3hDZVhSbGN5QXJQU0JtYVd4bExuVndiRzloWkM1MGIzUmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlHVnljanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdKaVlnWDJsMFpYSmhkRzl5TG5KbGRIVnliaUFoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZjaTV5WlhSMWNtNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Y5a2FXUkpkR1Z5WVhSdmNrVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNSaGJGVndiRzloWkZCeWIyZHlaWE56SUQwZ01UQXdJQ29nZEc5MFlXeENlWFJsYzFObGJuUWdMeUIwYjNSaGJFSjVkR1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0IwYjNSaGJGVndiRzloWkZCeWIyZHlaWE56SUQwZ01UQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1WdGFYUW9YQ0owYjNSaGJIVndiRzloWkhCeWIyZHlaWE56WENJc0lIUnZkR0ZzVlhCc2IyRmtVSEp2WjNKbGMzTXNJSFJ2ZEdGc1FubDBaWE1zSUhSdmRHRnNRbmwwWlhOVFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUUc5d2RHbHZibk11Y0dGeVlXMU9ZVzFsSUdOaGJpQmlaU0JoSUdaMWJtTjBhVzl1SUhSaGEybHVaeUJ2Ym1VZ2NHRnlZVzFsZEdWeUlISmhkR2hsY2lCMGFHRnVJR0VnYzNSeWFXNW5MbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRU0J3WVhKaGJXVjBaWElnYm1GdFpTQm1iM0lnWVNCbWFXeGxJR2x6SUc5aWRHRnBibVZrSUhOcGJYQnNlU0JpZVNCallXeHNhVzVuSUhSb2FYTWdkMmwwYUNCaGJpQnBibVJsZUNCdWRXMWlaWEl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVgyZGxkRkJoY21GdFRtRnRaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOW5aWFJRWVhKaGJVNWhiV1VvYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1dmNIUnBiMjV6TG5CaGNtRnRUbUZ0WlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCeVpYUjFjbTRnZEdocGN5NXZjSFJwYjI1ekxuQmhjbUZ0VG1GdFpTaHVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElISmxkSFZ5YmlCY0lsd2lMbU52Ym1OaGRDaDBhR2x6TG05d2RHbHZibk11Y0dGeVlXMU9ZVzFsS1M1amIyNWpZWFFvZEdocGN5NXZjSFJwYjI1ekxuVndiRzloWkUxMWJIUnBjR3hsSUQ4Z1hDSmJYQ0l1WTI5dVkyRjBLRzRzSUZ3aVhWd2lLU0E2SUZ3aVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCQWIzQjBhVzl1Y3k1eVpXNWhiV1ZHYVd4bElHbHpJR0VnWm5WdVkzUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ1puVnVZM1JwYjI0Z2QybHNiQ0JpWlNCMWMyVmtJSFJ2SUhKbGJtRnRaU0IwYUdVZ1ptbHNaUzV1WVcxbElHSmxabTl5WlNCaGNIQmxibVJwYm1jZ2FYUWdkRzhnZEdobElHWnZjbTFFWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2lYM0psYm1GdFpVWnBiR1ZjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQmZjbVZ1WVcxbFJtbHNaU2htYVd4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtOXdkR2x2Ym5NdWNtVnVZVzFsUm1sc1pTQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQnlaWFIxY200Z1ptbHNaUzV1WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl3ZEdsdmJuTXVjbVZ1WVcxbFJtbHNaU2htYVd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVbVYwZFhKdWN5QmhJR1p2Y20wZ2RHaGhkQ0JqWVc0Z1ltVWdkWE5sWkNCaGN5Qm1ZV3hzWW1GamF5QnBaaUIwYUdVZ1luSnZkM05sY2lCa2IyVnpJRzV2ZENCemRYQndiM0owSUVSeVlXZHVSSEp2Y0Z4dUlDQWdJQ0FnSUNBZ0lDQWdMeTljYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmtjbTl3ZW05dVpTQnBjeUJoYkhKbFlXUjVJR0VnWm05eWJTd2diMjVzZVNCMGFHVWdhVzV3ZFhRZ1ptbGxiR1FnWVc1a0lHSjFkSFJ2YmlCaGNtVWdjbVYwZFhKdVpXUXVJRTkwYUdWeWQybHpaU0JoSUdOdmJYQnNaWFJsSUdadmNtMGdaV3hsYldWdWRDQnBjeUJ3Y205MmFXUmxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ1kyOWtaU0JvWVhNZ2RHOGdjR0Z6Y3lCcGJpQkpSVGNnT2loY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSm5aWFJHWVd4c1ltRmphMFp2Y20xY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJuWlhSR1lXeHNZbUZqYTBadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVjRhWE4wYVc1blJtRnNiR0poWTJzc0lHWnZjbTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjRhWE4wYVc1blJtRnNiR0poWTJzZ1BTQjBhR2x6TG1kbGRFVjRhWE4wYVc1blJtRnNiR0poWTJzb0tTa2djbVYwZFhKdUlHVjRhWE4wYVc1blJtRnNiR0poWTJzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1pwWld4a2MxTjBjbWx1WnlBOUlDYzhaR2wySUdOc1lYTnpQVndpWkhvdFptRnNiR0poWTJ0Y0lqNG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVaR2xqZEVaaGJHeGlZV05yVkdWNGRDa2dabWxsYkdSelUzUnlhVzVuSUNzOUlGd2lQSEErWENJdVkyOXVZMkYwS0hSb2FYTXViM0IwYVc5dWN5NWthV04wUm1Gc2JHSmhZMnRVWlhoMExDQmNJand2Y0Q1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxsYkdSelUzUnlhVzVuSUNzOUlGd2lQR2x1Y0hWMElIUjVjR1U5WEZ4Y0ltWnBiR1ZjWEZ3aUlHNWhiV1U5WEZ4Y0lsd2lMbU52Ym1OaGRDaDBhR2x6TGw5blpYUlFZWEpoYlU1aGJXVW9NQ2tzSUZ3aVhGeGNJaUJjSWlrdVkyOXVZMkYwS0hSb2FYTXViM0IwYVc5dWN5NTFjR3h2WVdSTmRXeDBhWEJzWlNBL0lDZHRkV3gwYVhCc1pUMWNJbTExYkhScGNHeGxYQ0luSURvZ2RXNWtaV1pwYm1Wa0xDQmNJaUF2UGp4cGJuQjFkQ0IwZVhCbFBWeGNYQ0p6ZFdKdGFYUmNYRndpSUhaaGJIVmxQVnhjWENKVmNHeHZZV1FoWEZ4Y0lqNDhMMlJwZGo1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacFpXeGtjeUE5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VZM0psWVhSbFJXeGxiV1Z1ZENobWFXVnNaSE5UZEhKcGJtY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZzWlcxbGJuUXVkR0ZuVG1GdFpTQWhQVDBnWENKR1QxSk5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5YlNBOUlDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1WTNKbFlYUmxSV3hsYldWdWRDaGNJanhtYjNKdElHRmpkR2x2YmoxY1hGd2lYQ0l1WTI5dVkyRjBLSFJvYVhNdWIzQjBhVzl1Y3k1MWNtd3NJRndpWEZ4Y0lpQmxibU4wZVhCbFBWeGNYQ0p0ZFd4MGFYQmhjblF2Wm05eWJTMWtZWFJoWEZ4Y0lpQnRaWFJvYjJROVhGeGNJbHdpS1M1amIyNWpZWFFvZEdocGN5NXZjSFJwYjI1ekxtMWxkR2h2WkN3Z1hDSmNYRndpUGp3dlptOXliVDVjSWlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNKdExtRndjR1Z1WkVOb2FXeGtLR1pwWld4a2N5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9ZWFFnZEdobElHVnVZM1I1Y0dVZ1lXNWtJRzFsZEdodlpDQmhkSFJ5YVdKMWRHVnpJR0Z5WlNCelpYUWdjSEp2Y0dWeWJIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2hjSW1WdVkzUjVjR1ZjSWl3Z1hDSnRkV3gwYVhCaGNuUXZabTl5YlMxa1lYUmhYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtGd2liV1YwYUc5a1hDSXNJSFJvYVhNdWIzQjBhVzl1Y3k1dFpYUm9iMlFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm05eWJTQWhQU0J1ZFd4c0lEOGdabTl5YlNBNklHWnBaV3hrY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1VtVjBkWEp1Y3lCMGFHVWdabUZzYkdKaFkyc2daV3hsYldWdWRITWdhV1lnZEdobGVTQmxlR2x6ZENCaGJISmxZV1I1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCamIyUmxJR2hoY3lCMGJ5QndZWE56SUdsdUlFbEZOeUE2S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0ltZGxkRVY0YVhOMGFXNW5SbUZzYkdKaFkydGNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCblpYUkZlR2x6ZEdsdVowWmhiR3hpWVdOcktDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCblpYUkdZV3hzWW1GamF5QTlJR1oxYm1OMGFXOXVJR2RsZEVaaGJHeGlZV05yS0dWc1pXMWxiblJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU3dnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCbVlXeHpaU3dnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJRjlwZEdWeVlYUnZjaUE5SUdWc1pXMWxiblJ6VzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1N3Z1gzTjBaWEE3SUNFb1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlDaGZjM1JsY0NBOUlGOXBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVVwT3lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1ZzSUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDOG9YbndnS1daaGJHeGlZV05yS0NSOElDa3ZMblJsYzNRb1pXd3VZMnhoYzNOT1lXMWxLU2tnY21WMGRYSnVJR1ZzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5a2FXUkpkR1Z5WVhSdmNrVnljbTl5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUFtSmlCZmFYUmxjbUYwYjNJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsMFpYSmhkRzl5TG5KbGRIVnliaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWDJsMFpYSmhkRzl5UlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VzSUY5a2FXUkpkR1Z5WVhSdmNrVnljbTl5SUQwZ1ptRnNjMlVzSUY5cGRHVnlZWFJ2Y2tWeWNtOXlJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSmthWFpjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVptOXliVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMWJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmYzNSbGNEc2dJU2hmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnS0Y5emRHVndJRDBnWDJsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpTazdJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwWVdkT1lXMWxJRDBnWDNOMFpYQXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabUZzYkdKaFkyczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1Gc2JHSmhZMnNnUFNCblpYUkdZV3hzWW1GamF5aDBhR2x6TG1Wc1pXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb2RHRm5UbUZ0WlNrcEtTQnlaWFIxY200Z1ptRnNiR0poWTJzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUdWeWNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnSmlZZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJmYVhSbGNtRjBiM0pGY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1FXTjBhWFpoZEdWeklHRnNiQ0JzYVhOMFpXNWxjbk1nYzNSdmNtVmtJR2x1SUVCc2FYTjBaVzVsY25OY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSnpaWFIxY0VWMlpXNTBUR2x6ZEdWdVpYSnpYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2MyVjBkWEJGZG1WdWRFeHBjM1JsYm1WeWN5Z3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1c2FYTjBaVzVsY25NdWJXRndLR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUk1hWE4wWlc1bGNuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWlhabGJuUWdhVzRnWld4bGJXVnVkRXhwYzNSbGJtVnljeTVsZG1WdWRITXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNhWE4wWlc1bGNpQTlJR1ZzWlcxbGJuUk1hWE4wWlc1bGNuTXVaWFpsYm5SelcyVjJaVzUwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2hsYkdWdFpXNTBUR2x6ZEdWdVpYSnpMbVZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEN3Z2JHbHpkR1Z1WlhJc0lHWmhiSE5sS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCRVpXRmpkR2wyWVhSbGN5QmhiR3dnYkdsemRHVnVaWEp6SUhOMGIzSmxaQ0JwYmlCQWJHbHpkR1Z1WlhKelhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjbk5jSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnljeWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNhWE4wWlc1bGNuTXViV0Z3S0daMWJtTjBhVzl1S0dWc1pXMWxiblJNYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ1pYWmxiblFnYVc0Z1pXeGxiV1Z1ZEV4cGMzUmxibVZ5Y3k1bGRtVnVkSE1wZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJzYVhOMFpXNWxjaUE5SUdWc1pXMWxiblJNYVhOMFpXNWxjbk11WlhabGJuUnpXMlYyWlc1MFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNobGJHVnRaVzUwVEdsemRHVnVaWEp6TG1Wc1pXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkQ3dnYkdsemRHVnVaWElzSUdaaGJITmxLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWlcxdmRtVnpJR0ZzYkNCbGRtVnVkQ0JzYVhOMFpXNWxjbk1nWVc1a0lHTmhibU5sYkhNZ1lXeHNJR1pwYkdWeklHbHVJSFJvWlNCeGRXVjFaU0J2Y2lCaVpXbHVaeUJ3Y205alpYTnpaV1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVpHbHpZV0pzWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JwYzJGaWJHVW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNhV05yWVdKc1pVVnNaVzFsYm5SekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtGd2laSG90WTJ4cFkydGhZbXhsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUnBjMkZpYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NW1hV3hsY3k1dFlYQW9ablZ1WTNScGIyNG9abWxzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkyRnVZMlZzVlhCc2IyRmtLR1pwYkdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVpXNWhZbXhsWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaVzVoWW14bEtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG1ScGMyRmliR1ZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMnhwWTJ0aFlteGxSV3hsYldWdWRITXVabTl5UldGamFDaG1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1hDSmtlaTFqYkdsamEyRmliR1ZjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzJWMGRYQkZkbVZ1ZEV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaWFIxY201eklHRWdibWxqWld4NUlHWnZjbTFoZEhSbFpDQm1hV3hsYzJsNlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbVpwYkdWemFYcGxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1ptbHNaWE5wZW1Vb2MybDZaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpaV3hsWTNSbFpGTnBlbVVnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6Wld4bFkzUmxaRlZ1YVhRZ1BTQmNJbUpjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMmw2WlNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFZ1YVhSeklEMGdXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0owWWx3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSm5ZbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKdFlsd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pyWWx3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSmlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJwSUQwZ01Ec2dhU0E4SUhWdWFYUnpMbXhsYm1kMGFEc2dhU3NyS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFibWwwSUQwZ2RXNXBkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZM1YwYjJabUlEMGdUV0YwYUM1d2IzY29kR2hwY3k1dmNIUnBiMjV6TG1acGJHVnphWHBsUW1GelpTd2dOQ0F0SUdrcElDOGdNVEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MybDZaU0ErUFNCamRYUnZabVlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpGTnBlbVVnUFNCemFYcGxJQzhnVFdGMGFDNXdiM2NvZEdocGN5NXZjSFJwYjI1ekxtWnBiR1Z6YVhwbFFtRnpaU3dnTkNBdElHa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkR1ZrVlc1cGRDQTlJSFZ1YVhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldSVGFYcGxJRDBnVFdGMGFDNXliM1Z1WkNneE1DQXFJSE5sYkdWamRHVmtVMmw2WlNrZ0x5QXhNRHNnTHk4Z1EzVjBkR2x1WnlCdlppQmthV2RwZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVBITjBjbTl1Wno1Y0lpNWpiMjVqWVhRb2MyVnNaV04wWldSVGFYcGxMQ0JjSWp3dmMzUnliMjVuUGlCY0lpa3VZMjl1WTJGMEtIUm9hWE11YjNCMGFXOXVjeTVrYVdOMFJtbHNaVk5wZW1WVmJtbDBjMXR6Wld4bFkzUmxaRlZ1YVhSZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRV1JrY3lCdmNpQnlaVzF2ZG1WeklIUm9aU0JnWkhvdGJXRjRMV1pwYkdWekxYSmxZV05vWldSZ0lHTnNZWE56SUdaeWIyMGdkR2hsSUdadmNtMHVYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpWDNWd1pHRjBaVTFoZUVacGJHVnpVbVZoWTJobFpFTnNZWE56WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdYM1Z3WkdGMFpVMWhlRVpwYkdWelVtVmhZMmhsWkVOc1lYTnpLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11YldGNFJtbHNaWE1nSVQwZ2JuVnNiQ0FtSmlCMGFHbHpMbWRsZEVGalkyVndkR1ZrUm1sc1pYTW9LUzVzWlc1bmRHZ2dQajBnZEdocGN5NXZjSFJwYjI1ekxtMWhlRVpwYkdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1kbGRFRmpZMlZ3ZEdWa1JtbHNaWE1vS1M1c1pXNW5kR2dnUFQwOUlIUm9hWE11YjNCMGFXOXVjeTV0WVhoR2FXeGxjeWtnZEdocGN5NWxiV2wwS0Z3aWJXRjRabWxzWlhOeVpXRmphR1ZrWENJc0lIUm9hWE11Wm1sc1pYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWhaR1FvWENKa2VpMXRZWGd0Wm1sc1pYTXRjbVZoWTJobFpGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVYwZFhKdUlIUm9hWE11Wld4bGJXVnVkQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLRndpWkhvdGJXRjRMV1pwYkdWekxYSmxZV05vWldSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKa2NtOXdYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1pISnZjQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZsTG1SaGRHRlVjbUZ1YzJabGNpa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRDaGNJbVJ5YjNCY0lpd2daU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EyOXVkbVZ5ZENCMGFHVWdSbWxzWlV4cGMzUWdkRzhnWVc0Z1FYSnlZWGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUc1bFkyVnpjMkZ5ZVNCbWIzSWdTVVV4TVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdhU0E5SURBN0lHa2dQQ0JsTG1SaGRHRlVjbUZ1YzJabGNpNW1hV3hsY3k1c1pXNW5kR2c3SUdrckt5bG1hV3hsYzF0cFhTQTlJR1V1WkdGMFlWUnlZVzV6Wm1WeUxtWnBiR1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVYyWlc0Z2FXWWdhWFFuY3lCaElHWnZiR1JsY2l3Z1ptbHNaWE11YkdWdVozUm9JSGRwYkd3Z1kyOXVkR0ZwYmlCMGFHVWdabTlzWkdWeWN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1sc1pYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZaR0YwWVZSeVlXNXpabVZ5SUQwZ1pTNWtZWFJoVkhKaGJuTm1aWElzSUdsMFpXMXpJRDBnWDJSaGRHRlVjbUZ1YzJabGNpNXBkR1Z0Y3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMXpJQ1ltSUdsMFpXMXpMbXhsYm1kMGFDQW1KaUJwZEdWdGMxc3dYUzUzWldKcmFYUkhaWFJCYzBWdWRISjVJQ0U5SUc1MWJHd3BJQzh2SUZSb1pTQmljbTkzYzJWeUlITjFjSEJ2Y25SeklHUnliM0J3YVc1bklHOW1JR1p2YkdSbGNuTXNJSE52SUdoaGJtUnNaU0JwZEdWdGN5QnBibk4wWldGa0lHOW1JR1pwYkdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaRVpwYkdWelJuSnZiVWwwWlcxektHbDBaVzF6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCMGFHbHpMbWhoYm1Sc1pVWnBiR1Z6S0dacGJHVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwS0Z3aVlXUmtaV1JtYVd4bGMxd2lMQ0JtYVd4bGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKd1lYTjBaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlIQmhjM1JsS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrZG1GeUpGOWZaM1ZoY21SZlh5aGxJQ0U5SUc1MWJHd2dQeUJsTG1Oc2FYQmliMkZ5WkVSaGRHRWdPaUIxYm1SbFptbHVaV1FzSUdaMWJtTjBhVzl1S0hncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGd1YVhSbGJYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2tnUFQwZ2JuVnNiQ2tnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2hjSW5CaGMzUmxYQ0lzSUdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmWTJ4cGNHSnZZWEprUkdGMFlTQTlJR1V1WTJ4cGNHSnZZWEprUkdGMFlTd2dhWFJsYlhNZ1BTQmZZMnhwY0dKdllYSmtSR0YwWVM1cGRHVnRjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYUmxiWE11YkdWdVozUm9LU0J5WlhSMWNtNGdkR2hwY3k1ZllXUmtSbWxzWlhOR2NtOXRTWFJsYlhNb2FYUmxiWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2lhR0Z1Wkd4bFJtbHNaWE5jSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm9ZVzVrYkdWR2FXeGxjeWhtYVd4bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU3dnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCbVlXeHpaU3dnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJmYVhSbGNtRjBiM0lnUFNCbWFXeGxjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJHVWdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrUm1sc1pTaG1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2tWeWNtOXlJRDBnWlhKeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUFtSmlCZmFYUmxjbUYwYjNJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSXVjbVYwZFhKdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZaR2xrU1hSbGNtRjBiM0pGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJR0VnWm05c1pHVnlJR2x6SUdSeWIzQndaV1FnS0c5eUlHWnBiR1Z6SUdGeVpTQndZWE4wWldRcExDQnBkR1Z0Y3lCdGRYTjBJR0psSUdoaGJtUnNaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2x1YzNSbFlXUWdiMllnWm1sc1pYTXVYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpWDJGa1pFWnBiR1Z6Um5KdmJVbDBaVzF6WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdYMkZrWkVacGJHVnpSbkp2YlVsMFpXMXpLR2wwWlcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpTd2dYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlGOXBkR1Z5WVhSdmNpQTlJR2wwWlcxelcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM04wWlhBN0lDRW9YMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJQ2hmYzNSbGNDQTlJRjlwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsMFpXMGdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWlc1MGNuazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbDBaVzB1ZDJWaWEybDBSMlYwUVhORmJuUnllU0FoUFNCdWRXeHNJQ1ltSUNobGJuUnllU0E5SUdsMFpXMHVkMlZpYTJsMFIyVjBRWE5GYm5SeWVTZ3BLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1YVhOR2FXeGxLU0J5WlhOMWJIUXVjSFZ6YUNoZmRHaHBjeTVoWkdSR2FXeGxLR2wwWlcwdVoyVjBRWE5HYVd4bEtDa3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9aVzUwY25rdWFYTkVhWEpsWTNSdmNua3BJQzh2SUVGd2NHVnVaQ0JoYkd3Z1ptbHNaWE1nWm5KdmJTQjBhR0YwSUdScGNtVmpkRzl5ZVNCMGJ5Qm1hV3hsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoZmRHaHBjeTVmWVdSa1JtbHNaWE5HY205dFJHbHlaV04wYjNKNUtHVnVkSEo1TENCbGJuUnllUzV1WVcxbEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnY21WemRXeDBMbkIxYzJnb2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dsMFpXMHVaMlYwUVhOR2FXeGxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMHVhMmx1WkNBOVBTQnVkV3hzSUh4OElHbDBaVzB1YTJsdVpDQTlQVDBnWENKbWFXeGxYQ0lwSUhKbGMzVnNkQzV3ZFhOb0tGOTBhR2x6TG1Ga1pFWnBiR1VvYVhSbGJTNW5aWFJCYzBacGJHVW9LU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElISmxjM1ZzZEM1d2RYTm9LSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGMzVnNkQzV3ZFhOb0tIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eVJYSnliM0lnUFNCbGNuSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlDWW1JRjlwZEdWeVlYUnZjaTV5WlhSMWNtNGdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSXVjbVYwZFhKdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmZhWFJsY21GMGIzSkZjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJIYjJWeklIUm9jbTkxWjJnZ2RHaGxJR1JwY21WamRHOXllU3dnWVc1a0lHRmtaSE1nWldGamFDQm1hV3hsSUdsMElHWnBibVJ6SUhKbFkzVnljMmwyWld4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2lYMkZrWkVacGJHVnpSbkp2YlVScGNtVmpkRzl5ZVZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRjloWkdSR2FXeGxjMFp5YjIxRWFYSmxZM1J2Y25rb1pHbHlaV04wYjNKNUxDQndZWFJvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR2x5VW1WaFpHVnlJRDBnWkdseVpXTjBiM0o1TG1OeVpXRjBaVkpsWVdSbGNpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGNuSnZja2hoYm1Sc1pYSWdQU0JtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrZG1GeUpGOWZaM1ZoY21STlpYUm9iMlJmWHloamIyNXpiMnhsTENCY0lteHZaMXdpTENCbWRXNWpkR2x2YmlodktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2J5NXNiMmNvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXRmtSVzUwY21sbGN5QTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTXhJRDBnWDNSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJrYVhKU1pXRmtaWEl1Y21WaFpFVnVkSEpwWlhNb1puVnVZM1JwYjI0b1pXNTBjbWxsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKcFpYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpTd2dYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCZmFYUmxjbUYwYjNJZ1BTQmxiblJ5YVdWelcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM04wWlhBN0lDRW9YMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJQ2hmYzNSbGNDQTlJRjlwZEdWeVlYUnZjaTV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN6SWdQU0JmZEdocGN6RTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1YVhOR2FXeGxLU0JsYm5SeWVTNW1hV3hsS0daMWJtTjBhVzl1S0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXlMbTl3ZEdsdmJuTXVhV2R1YjNKbFNHbGtaR1Z1Um1sc1pYTWdKaVlnWm1sc1pTNXVZVzFsTG5OMVluTjBjbWx1Wnlnd0xDQXhLU0E5UFQwZ1hDSXVYQ0lwSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG1aMWJHeFFZWFJvSUQwZ1hDSmNJaTVqYjI1allYUW9jR0YwYUN3Z1hDSXZYQ0lwTG1OdmJtTmhkQ2htYVd4bExtNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3pJdVlXUmtSbWxzWlNobWFXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9aVzUwY25rdWFYTkVhWEpsWTNSdmNua3BJRjkwYUdsek1TNWZZV1JrUm1sc1pYTkdjbTl0UkdseVpXTjBiM0o1S0dWdWRISjVMQ0JjSWx3aUxtTnZibU5oZENod1lYUm9MQ0JjSWk5Y0lpa3VZMjl1WTJGMEtHVnVkSEo1TG01aGJXVXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2tWeWNtOXlJRDBnWlhKeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUFtSmlCZmFYUmxjbUYwYjNJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0l1Y21WMGRYSnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGSmxZM1Z5YzJsMlpXeDVJR05oYkd3Z2NtVmhaRVZ1ZEhKcFpYTW9LU0JoWjJGcGJpd2djMmx1WTJVZ1luSnZkM05sY2lCdmJteDVJR2hoYm1Sc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQm1hWEp6ZENBeE1EQWdaVzUwY21sbGN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpXVTZJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMEZRU1M5RWFYSmxZM1J2Y25sU1pXRmtaWElqY21WaFpFVnVkSEpwWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrUlc1MGNtbGxjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUdWeWNtOXlTR0Z1Wkd4bGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZoWkVWdWRISnBaWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZR1J2Ym1Vb0tXQWdhWE1nWTJGc2JHVmtJSGRwZEdodmRYUWdZWEpuZFcxbGJuUWdkR2hsSUdacGJHVWdhWE1nWVdOalpYQjBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhsdmRTQmpZV3hzSUdsMElIZHBkR2dnWVc0Z1pYSnliM0lnYldWemMyRm5aU3dnZEdobElHWnBiR1VnYVhNZ2NtVnFaV04wWldSY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNoVWFHbHpJR0ZzYkc5M2N5Qm1iM0lnWVhONWJtTm9jbTl1YjNWeklIWmhiR2xrWVhScGIyNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJtZFc1amRHbHZiaUJqYUdWamEzTWdkR2hsSUdacGJHVnphWHBsTENCaGJtUWdhV1lnZEdobElHWnBiR1V1ZEhsd1pTQndZWE56WlhNZ2RHaGxYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmdZV05qWlhCMFpXUkdhV3hsYzJBZ1kyaGxZMnN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVlXTmpaWEIwWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZV05qWlhCMEtHWnBiR1VzSUdSdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbTFoZUVacGJHVnphWHBsSUNZbUlHWnBiR1V1YzJsNlpTQStJSFJvYVhNdWIzQjBhVzl1Y3k1dFlYaEdhV3hsYzJsNlpTQXFJREV3TkRnMU56WXBJR1J2Ym1Vb2RHaHBjeTV2Y0hScGIyNXpMbVJwWTNSR2FXeGxWRzl2UW1sbkxuSmxjR3hoWTJVb1hDSjdlMlpwYkdWemFYcGxmWDFjSWl3Z1RXRjBhQzV5YjNWdVpDaG1hV3hsTG5OcGVtVWdMeUF4TURJMElDOGdNVEF1TWpRcElDOGdNVEF3S1M1eVpYQnNZV05sS0Z3aWUzdHRZWGhHYVd4bGMybDZaWDE5WENJc0lIUm9hWE11YjNCMGFXOXVjeTV0WVhoR2FXeGxjMmw2WlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRWtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TG1selZtRnNhV1JHYVd4bEtHWnBiR1VzSUhSb2FYTXViM0IwYVc5dWN5NWhZMk5sY0hSbFpFWnBiR1Z6S1NrZ1pHOXVaU2gwYUdsekxtOXdkR2x2Ym5NdVpHbGpkRWx1ZG1Gc2FXUkdhV3hsVkhsd1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG0xaGVFWnBiR1Z6SUNFOUlHNTFiR3dnSmlZZ2RHaHBjeTVuWlhSQlkyTmxjSFJsWkVacGJHVnpLQ2t1YkdWdVozUm9JRDQ5SUhSb2FYTXViM0IwYVc5dWN5NXRZWGhHYVd4bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyNWxLSFJvYVhNdWIzQjBhVzl1Y3k1a2FXTjBUV0Y0Um1sc1pYTkZlR05sWldSbFpDNXlaWEJzWVdObEtGd2llM3R0WVhoR2FXeGxjMzE5WENJc0lIUm9hWE11YjNCMGFXOXVjeTV0WVhoR2FXeGxjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9YQ0p0WVhobWFXeGxjMlY0WTJWbFpHVmtYQ0lzSUdacGJHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjBhR2x6TG05d2RHbHZibk11WVdOalpYQjBMbU5oYkd3b2RHaHBjeXdnWm1sc1pTd2daRzl1WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0poWkdSR2FXeGxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1lXUmtSbWxzWlNobWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuVndiRzloWkNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhWcFpEb2dKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1MWRXbGtkalFvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2WjNKbGMzTTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5sZEhScGJtY2dkR2hsSUhSdmRHRnNJSFZ3Ykc5aFpDQnphWHBsSUhSdklHWnBiR1V1YzJsNlpTQm1iM0lnZEdobElHSmxaMmx1Ym1sdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSmRDZHpJR0ZqZEhWaGJDQmthV1ptWlhKbGJuUWdkR2hoYmlCMGFHVWdjMmw2WlNCMGJ5QmlaU0IwY21GdWMyMXBkSFJsWkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkwWVd3NklHWnBiR1V1YzJsNlpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpYTlRaVzUwT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bGJtRnRaVG9nZEdocGN5NWZjbVZ1WVcxbFJtbHNaU2htYVd4bEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWFXeGxjeTV3ZFhOb0tHWnBiR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVXVjM1JoZEhWeklEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1QlJFUkZSRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvWENKaFpHUmxaR1pwYkdWY0lpd2dabWxzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1eGRXVjFaVlJvZFcxaWJtRnBiQ2htYVd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GalkyVndkQ2htYVd4bExDQm1kVzVqZEdsdmJpaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVXVZV05qWlhCMFpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5bGNuSnZjbEJ5YjJObGMzTnBibWNvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBzSUdWeWNtOXlLVHNnTHk4Z1YybHNiQ0J6WlhRZ2RHaGxJR1pwYkdVdWMzUmhkSFZ6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbUZqWTJWd2RHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NXZjSFJwYjI1ekxtRjFkRzlSZFdWMVpTa2dYM1JvYVhNdVpXNXhkV1YxWlVacGJHVW9abWxzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMmxzYkNCelpYUWdMbUZqWTJWd2RHVmtJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5MWNHUmhkR1ZOWVhoR2FXeGxjMUpsWVdOb1pXUkRiR0Z6Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYY21Gd2NHVnlJR1p2Y2lCbGJuRjFaWFZsUm1sc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbVZ1Y1hWbGRXVkdhV3hsYzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1Z1Y1hWbGRXVkdhV3hsY3lobWFXeGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQm1ZV3h6WlN3Z1gybDBaWEpoZEc5eVJYSnliM0lnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLSFpoY2lCZmFYUmxjbUYwYjNJZ1BTQm1hV3hsYzF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3T3lBaEtGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1RzZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWnBiR1VnUFNCZmMzUmxjQzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wlc1eGRXVjFaVVpwYkdVb1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0pGY25KdmNpQTlJR1Z5Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdKaVlnWDJsMFpYSmhkRzl5TG5KbGRIVnliaUFoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmZhWFJsY21GMGIzSkZjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbVZ1Y1hWbGRXVkdhV3hsWENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaVzV4ZFdWMVpVWnBiR1VvWm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbk4wWVhSMWN5QTlQVDBnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNUJSRVJGUkNBbUppQm1hV3hsTG1GalkyVndkR1ZrSUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVXVjM1JoZEhWeklEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1UlZVVlZSVVE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVlYVjBiMUJ5YjJObGMzTlJkV1YxWlNrZ2NtVjBkWEp1SUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y0hKdlkyVnpjMUYxWlhWbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lEQXBPeUF2THlCRVpXWmxjbkpwYm1jZ2RHaGxJR05oYkd4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVkdocGN5Qm1hV3hsSUdOaGJpZDBJR0psSUhGMVpYVmxaQ0JpWldOaGRYTmxJR2wwSUdoaGN5QmhiSEpsWVdSNUlHSmxaVzRnY0hKdlkyVnpjMlZrSUc5eUlIZGhjeUJ5WldwbFkzUmxaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0pmWlc1eGRXVjFaVlJvZFcxaWJtRnBiRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOWxibkYxWlhWbFZHaDFiV0p1WVdsc0tHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1OeVpXRjBaVWx0WVdkbFZHaDFiV0p1WVdsc2N5QW1KaUJtYVd4bExuUjVjR1V1YldGMFkyZ29MMmx0WVdkbExpb3ZLU0FtSmlCbWFXeGxMbk5wZW1VZ1BEMGdkR2hwY3k1dmNIUnBiMjV6TG0xaGVGUm9kVzFpYm1GcGJFWnBiR1Z6YVhwbElDb2dNVEEwT0RVM05pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MGFIVnRZbTVoYVd4UmRXVjFaUzV3ZFhOb0tHWnBiR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmNISnZZMlZ6YzFSb2RXMWlibUZwYkZGMVpYVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJREFwT3lBdkx5QkVaV1psY25KcGJtY2dkR2hsSUdOaGJHeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKZmNISnZZMlZ6YzFSb2RXMWlibUZwYkZGMVpYVmxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1gzQnliMk5sYzNOVWFIVnRZbTVoYVd4UmRXVjFaU2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5d2NtOWpaWE56YVc1blZHaDFiV0p1WVdsc0lIeDhJSFJvYVhNdVgzUm9kVzFpYm1GcGJGRjFaWFZsTG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCeWIyTmxjM05wYm1kVWFIVnRZbTVoYVd3Z1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsSUQwZ2RHaHBjeTVmZEdoMWJXSnVZV2xzVVhWbGRXVXVjMmhwWm5Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVlVhSFZ0WW01aGFXd29abWxzWlN3Z2RHaHBjeTV2Y0hScGIyNXpMblJvZFcxaWJtRnBiRmRwWkhSb0xDQjBhR2x6TG05d2RHbHZibk11ZEdoMWJXSnVZV2xzU0dWcFoyaDBMQ0IwYUdsekxtOXdkR2x2Ym5NdWRHaDFiV0p1WVdsc1RXVjBhRzlrTENCMGNuVmxMQ0JtZFc1amRHbHZiaWhrWVhSaFZYSnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1WdGFYUW9YQ0owYUhWdFltNWhhV3hjSWl3Z1ptbHNaU3dnWkdGMFlWVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5d2NtOWpaWE56YVc1blZHaDFiV0p1WVdsc0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmNISnZZMlZ6YzFSb2RXMWlibUZwYkZGMVpYVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFTmhiaUJpWlNCallXeHNaV1FnWW5rZ2RHaGxJSFZ6WlhJZ2RHOGdjbVZ0YjNabElHRWdabWxzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0luSmxiVzkyWlVacGJHVmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCeVpXMXZkbVZHYVd4bEtHWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abWxzWlM1emRHRjBkWE1nUFQwOUlDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1VlZCTVQwRkVTVTVIS1NCMGFHbHpMbU5oYm1ObGJGVndiRzloWkNobWFXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnBiR1Z6SUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja2RtRnlKSGRwZEdodmRYUW9kR2hwY3k1bWFXeGxjeXdnWm1sc1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJXbDBLRndpY21WdGIzWmxaR1pwYkdWY0lpd2dabWxzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVptbHNaWE11YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z2RHaHBjeTVsYldsMEtGd2ljbVZ6WlhSY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRkpsYlc5MlpYTWdZV3hzSUdacGJHVnpJSFJvWVhRZ1lYSmxiaWQwSUdOMWNuSmxiblJzZVNCd2NtOWpaWE56WldRZ1puSnZiU0IwYUdVZ2JHbHpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW5KbGJXOTJaVUZzYkVacGJHVnpYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2NtVnRiM1psUVd4c1JtbHNaWE1vWTJGdVkyVnNTV1pPWldObGMzTmhjbmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRjbVZoZEdVZ1lTQmpiM0I1SUc5bUlHWnBiR1Z6SUhOcGJtTmxJSEpsYlc5MlpVWnBiR1VvS1NCamFHRnVaMlZ6SUhSb1pTQkFabWxzWlhNZ1lYSnlZWGt1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmhibU5sYkVsbVRtVmpaWE56WVhKNUlEMDlJRzUxYkd3cElHTmhibU5sYkVsbVRtVmpaWE56WVhKNUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbExDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJR1poYkhObExDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlGOXBkR1Z5WVhSdmNpQTlJSFJvYVhNdVptbHNaWE11YzJ4cFkyVW9LVnRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJHVWdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1hV3hsTG5OMFlYUjFjeUFoUFQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVWVUV4UFFVUkpUa2NnZkh3Z1kyRnVZMlZzU1daT1pXTmxjM05oY25rcElIUm9hWE11Y21WdGIzWmxSbWxzWlNobWFXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCU1pYTnBlbVZ6SUdGdUlHbHRZV2RsSUdKbFptOXlaU0JwZENCblpYUnpJSE5sYm5RZ2RHOGdkR2hsSUhObGNuWmxjaTRnVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUIwYUdVZ1pHVm1ZWFZzZENCaVpXaGhkbWx2Y2lCdlpseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lHOXdkR2x2Ym5NdWRISmhibk5tYjNKdFJtbHNaV0FnYVdZZ1lISmxjMmw2WlZkcFpIUm9ZQ0J2Y2lCZ2NtVnphWHBsU0dWcFoyaDBZQ0JoY21VZ2MyVjBMaUJVYUdVZ1kyRnNiR0poWTJzZ2FYTWdhVzUyYjJ0bFpDQjNhWFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2NtVnphWHBsWkNCaWJHOWlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW5KbGMybDZaVWx0WVdkbFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnY21WemFYcGxTVzFoWjJVb1ptbHNaU3dnZDJsa2RHZ3NJR2hsYVdkb2RDd2djbVZ6YVhwbFRXVjBhRzlrTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFZHaDFiV0p1WVdsc0tHWnBiR1VzSUhkcFpIUm9MQ0JvWldsbmFIUXNJSEpsYzJsNlpVMWxkR2h2WkN3Z2RISjFaU3dnWm5WdVkzUnBiMjRvWkdGMFlWVnliQ3dnWTJGdWRtRnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVc1MllYTWdQVDBnYm5Wc2JDa2dMeThnVkdobElHbHRZV2RsSUdoaGN5QnViM1FnWW1WbGJpQnlaWE5wZW1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5aG1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMjl3ZEdsdmJuTWdQU0JmZEdocGN5NXZjSFJwYjI1ekxDQnlaWE5wZW1WTmFXMWxWSGx3WlNBOUlGOXZjSFJwYjI1ekxuSmxjMmw2WlUxcGJXVlVlWEJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjMmw2WlUxcGJXVlVlWEJsSUQwOUlHNTFiR3dwSUhKbGMybDZaVTFwYldWVWVYQmxJRDBnWm1sc1pTNTBlWEJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjMmw2WldSRVlYUmhWVkpNSUQwZ1kyRnVkbUZ6TG5SdlJHRjBZVlZTVENoeVpYTnBlbVZOYVcxbFZIbHdaU3dnWDNSb2FYTXViM0IwYVc5dWN5NXlaWE5wZW1WUmRXRnNhWFI1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE5wZW1WTmFXMWxWSGx3WlNBOVBUMGdYQ0pwYldGblpTOXFjR1ZuWENJZ2ZId2djbVZ6YVhwbFRXbHRaVlI1Y0dVZ1BUMDlJRndpYVcxaFoyVXZhbkJuWENJcElDOHZJRTV2ZHlCaFpHUWdkR2hsSUc5eWFXZHBibUZzSUVWWVNVWWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzJsNlpXUkVZWFJoVlZKTUlEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2tkbUZ5SkVWNGFXWlNaWE4wYjNKbExuSmxjM1J2Y21Vb1ptbHNaUzVrWVhSaFZWSk1MQ0J5WlhOcGVtVmtSR0YwWVZWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVrWVhSaFZWSkpkRzlDYkc5aUtISmxjMmw2WldSRVlYUmhWVkpNS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbU55WldGMFpWUm9kVzFpYm1GcGJGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdOeVpXRjBaVlJvZFcxaWJtRnBiQ2htYVd4bExDQjNhV1IwYUN3Z2FHVnBaMmgwTENCeVpYTnBlbVZOWlhSb2IyUXNJR1pwZUU5eWFXVnVkR0YwYVc5dUxDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJHVlNaV0ZrWlhJZ1BTQnVaWGNnUm1sc1pWSmxZV1JsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1ZTWldGa1pYSXViMjVzYjJGa0lEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1WkdGMFlWVlNUQ0E5SUdacGJHVlNaV0ZrWlhJdWNtVnpkV3gwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJFYjI0bmRDQmliM1JvWlhJZ1kzSmxZWFJwYm1jZ1lTQjBhSFZ0WW01aGFXd2dabTl5SUZOV1J5QnBiV0ZuWlhNZ2MybHVZMlVnZEdobGVTZHlaU0IyWldOMGIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1V1ZEhsd1pTQTlQVDBnWENKcGJXRm5aUzl6ZG1jcmVHMXNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpZV3hzWW1GamF5QWhQU0J1ZFd4c0tTQmpZV3hzWW1GamF5aG1hV3hsVW1WaFpHVnlMbkpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKbFlYUmxWR2gxYldKdVlXbHNSbkp2YlZWeWJDaG1hV3hsTENCM2FXUjBhQ3dnYUdWcFoyaDBMQ0J5WlhOcGVtVk5aWFJvYjJRc0lHWnBlRTl5YVdWdWRHRjBhVzl1TENCallXeHNZbUZqYXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsVW1WaFpHVnlMbkpsWVdSQmMwUmhkR0ZWVWt3b1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdCdGIyTnJSbWxzWldBZ2JtVmxaSE1nZEc4Z2FHRjJaU0IwYUdWelpTQmhkSFJ5YVdKMWRHVnpPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0I3SUc1aGJXVTZJQ2R1WVcxbEp5d2djMmw2WlRvZ01USXpORFVzSUdsdFlXZGxWWEpzT2lBbkp5QjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lHTmhiR3hpWVdOcllDQjNhV3hzSUdKbElHbHVkbTlyWldRZ2QyaGxiaUIwYUdVZ2FXMWhaMlVnYUdGeklHSmxaVzRnWkc5M2JteHZZV1JsWkNCaGJtUWdaR2x6Y0d4aGVXVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZR055YjNOelQzSnBaMmx1WUNCM2FXeHNJR0psSUdGa1pHVmtJSFJ2SUhSb1pTQmdhVzFuWUNCMFlXY2dkMmhsYmlCaFkyTmxjM05wYm1jZ2RHaGxJR1pwYkdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2laR2x6Y0d4aGVVVjRhWE4wYVc1blJtbHNaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlHUnBjM0JzWVhsRmVHbHpkR2x1WjBacGJHVW9iVzlqYTBacGJHVXNJR2x0WVdkbFZYSnNMQ0JqWVd4c1ltRmpheXdnWTNKdmMzTlBjbWxuYVc0c0lIQmhjbUZ0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzJsNlpWUm9kVzFpYm1GcGJDQTlJSEJoY21GdElEMDlQU0IyYjJsa0lEQWdQeUIwY25WbElEb2djR0Z5WVcwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMEtGd2lZV1JrWldSbWFXeGxYQ0lzSUcxdlkydEdhV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb1hDSmpiMjF3YkdWMFpWd2lMQ0J0YjJOclJtbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE5wZW1WVWFIVnRZbTVoYVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwS0Z3aWRHaDFiV0p1WVdsc1hDSXNJRzF2WTJ0R2FXeGxMQ0JwYldGblpWVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ltRmpheWtnWTJGc2JHSmhZMnNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IyNUViMjVsSUQwZ1puVnVZM1JwYjI0b2RHaDFiV0p1WVdsc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1bGJXbDBLRndpZEdoMWJXSnVZV2xzWENJc0lHMXZZMnRHYVd4bExDQjBhSFZ0WW01aGFXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGJHeGlZV05yS1NCallXeHNZbUZqYXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiMk5yUm1sc1pTNWtZWFJoVlZKTUlEMGdhVzFoWjJWVmNtdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFZHaDFiV0p1WVdsc1JuSnZiVlZ5YkNodGIyTnJSbWxzWlN3Z2RHaHBjeTV2Y0hScGIyNXpMblJvZFcxaWJtRnBiRmRwWkhSb0xDQjBhR2x6TG05d2RHbHZibk11ZEdoMWJXSnVZV2xzU0dWcFoyaDBMQ0IwYUdsekxtOXdkR2x2Ym5NdWRHaDFiV0p1WVdsc1RXVjBhRzlrTENCMGFHbHpMbTl3ZEdsdmJuTXVabWw0VDNKcFpXNTBZWFJwYjI0c0lHOXVSRzl1WlN3Z1kzSnZjM05QY21sbmFXNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0ltTnlaV0YwWlZSb2RXMWlibUZwYkVaeWIyMVZjbXhjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQmpjbVZoZEdWVWFIVnRZbTVoYVd4R2NtOXRWWEpzS0dacGJHVXNJSGRwWkhSb0xDQm9aV2xuYUhRc0lISmxjMmw2WlUxbGRHaHZaQ3dnWm1sNFQzSnBaVzUwWVhScGIyNHNJR05oYkd4aVlXTnJMQ0JqY205emMwOXlhV2RwYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUbTkwSUhWemFXNW5JR0J1WlhjZ1NXMWhaMlZnSUdobGNtVWdZbVZqWVhWelpTQnZaaUJoSUdKMVp5QnBiaUJzWVhSbGMzUWdRMmh5YjIxbElIWmxjbk5wYjI1ekxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5sWlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlpXNTVieTlrY205d2VtOXVaUzl3ZFd4c0x6SXlObHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGJXY2dQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lhVzFuWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqY205emMwOXlhV2RwYmlrZ2FXMW5MbU55YjNOelQzSnBaMmx1SUQwZ1kzSnZjM05QY21sbmFXNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWm1sNFQzSnBaVzUwWVhScGIyNGdhWE1nYm05MElHNWxaV1JsWkNCaGJubHRiM0psSUhkcGRHZ2dZbkp2ZDNObGNuTWdhR0Z1Wkd4cGJtY2dhVzFoWjJWUGNtbGxiblJoZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBlRTl5YVdWdWRHRjBhVzl1SUQwZ1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNoa2IyTjFiV1Z1ZEM1aWIyUjVLVnRjSW1sdFlXZGxUM0pwWlc1MFlYUnBiMjVjSWwwZ1BUMGdYQ0ptY205dExXbHRZV2RsWENJZ1B5Qm1ZV3h6WlNBNklHWnBlRTl5YVdWdWRHRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdFp5NXZibXh2WVdRZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRjkwYUdsek1TQTlJRjkwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHOWhaRVY0YVdZZ1BTQm1kVzVqZEdsdmJpaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOcktERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUVWWVNVWWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnUlZoSlJpQWhQVDBnYm5Wc2JDQW1KaUJtYVhoUGNtbGxiblJoZEdsdmJpa2diRzloWkVWNGFXWWdQU0JtZFc1amRHbHZiaWhqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVZZU1VZdVoyVjBSR0YwWVNocGJXY3NJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXloRldFbEdMbWRsZEZSaFp5aDBhR2x6TENCY0lrOXlhV1Z1ZEdGMGFXOXVYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JHOWhaRVY0YVdZb1puVnVZM1JwYjI0b2IzSnBaVzUwWVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWQybGtkR2dnUFNCcGJXY3VkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbWhsYVdkb2RDQTlJR2x0Wnk1b1pXbG5hSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVnphWHBsU1c1bWJ5QTlJRjkwYUdsek1TNXZjSFJwYjI1ekxuSmxjMmw2WlM1allXeHNLRjkwYUdsek1Td2dabWxzWlN3Z2QybGtkR2dzSUdobGFXZG9kQ3dnY21WemFYcGxUV1YwYUc5a0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqWVc1MllYTWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtGd2lZMkZ1ZG1GelhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOMGVDQTlJR05oYm5aaGN5NW5aWFJEYjI1MFpYaDBLRndpTW1SY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZVzUyWVhNdWQybGtkR2dnUFNCeVpYTnBlbVZKYm1adkxuUnlaMWRwWkhSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnVkbUZ6TG1obGFXZG9kQ0E5SUhKbGMybDZaVWx1Wm04dWRISm5TR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl5YVdWdWRHRjBhVzl1SUQ0Z05Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjeTUzYVdSMGFDQTlJSEpsYzJsNlpVbHVabTh1ZEhKblNHVnBaMmgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiblpoY3k1b1pXbG5hSFFnUFNCeVpYTnBlbVZKYm1adkxuUnlaMWRwWkhSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vS0c5eWFXVnVkR0YwYVc5dUtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElESTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2h2Y21sNmIyNTBZV3dnWm14cGNGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRIZ3VkSEpoYm5Oc1lYUmxLR05oYm5aaGN5NTNhV1IwYUN3Z01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzV6WTJGc1pTZ3RNU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnTVRnd3dyQWdjbTkwWVhSbElHeGxablJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1I0TG5SeVlXNXpiR0YwWlNoallXNTJZWE11ZDJsa2RHZ3NJR05oYm5aaGN5NW9aV2xuYUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRIZ3VjbTkwWVhSbEtFMWhkR2d1VUVrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhabGNuUnBZMkZzSUdac2FYQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzUjRMblJ5WVc1emJHRjBaU2d3TENCallXNTJZWE11YUdWcFoyaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1I0TG5OallXeGxLREVzSUMweEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0ExT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCMlpYSjBhV05oYkNCbWJHbHdJQ3NnT1RBZ2NtOTBZWFJsSUhKcFoyaDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjBlQzV5YjNSaGRHVW9NQzQxSUNvZ1RXRjBhQzVRU1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNXpZMkZzWlNneExDQXRNU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ05qcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdPVERDc0NCeWIzUmhkR1VnY21sbmFIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzUjRMbkp2ZEdGMFpTZ3dMalVnS2lCTllYUm9MbEJKS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNSNExuUnlZVzV6YkdGMFpTZ3dMQ0F0WTJGdWRtRnpMbmRwWkhSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0EzT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCb2IzSnBlbTl1ZEdGc0lHWnNhWEFnS3lBNU1DQnliM1JoZEdVZ2NtbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1I0TG5KdmRHRjBaU2d3TGpVZ0tpQk5ZWFJvTGxCSktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzUjRMblJ5WVc1emJHRjBaU2hqWVc1MllYTXVhR1ZwWjJoMExDQXRZMkZ1ZG1GekxuZHBaSFJvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNSNExuTmpZV3hsS0MweExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBNE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QTVNTUt3SUhKdmRHRjBaU0JzWldaMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNXliM1JoZEdVb0xUQXVOU0FxSUUxaGRHZ3VVRWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEhndWRISmhibk5zWVhSbEtDMWpZVzUyWVhNdWFHVnBaMmgwTENBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUdFZ1luVm5abWw0SUdadmNpQnBUMU1uSUhOallXeHBibWNnWW5WbkxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja2RtRnlKR1J5WVhkSmJXRm5aVWxQVTBacGVDaGpkSGdzSUdsdFp5d2djbVZ6YVhwbFNXNW1ieTV6Y21OWUlDRTlJRzUxYkd3Z1B5QnlaWE5wZW1WSmJtWnZMbk55WTFnZ09pQXdMQ0J5WlhOcGVtVkpibVp2TG5OeVkxa2dJVDBnYm5Wc2JDQS9JSEpsYzJsNlpVbHVabTh1YzNKaldTQTZJREFzSUhKbGMybDZaVWx1Wm04dWMzSmpWMmxrZEdnc0lISmxjMmw2WlVsdVptOHVjM0pqU0dWcFoyaDBMQ0J5WlhOcGVtVkpibVp2TG5SeVoxZ2dJVDBnYm5Wc2JDQS9JSEpsYzJsNlpVbHVabTh1ZEhKbldDQTZJREFzSUhKbGMybDZaVWx1Wm04dWRISm5XU0FoUFNCdWRXeHNJRDhnY21WemFYcGxTVzVtYnk1MGNtZFpJRG9nTUN3Z2NtVnphWHBsU1c1bWJ5NTBjbWRYYVdSMGFDd2djbVZ6YVhwbFNXNW1ieTUwY21kSVpXbG5hSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUm9kVzFpYm1GcGJDQTlJR05oYm5aaGN5NTBiMFJoZEdGVlVrd29YQ0pwYldGblpTOXdibWRjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkyc2dJVDBnYm5Wc2JDa2djbVYwZFhKdUlHTmhiR3hpWVdOcktIUm9kVzFpYm1GcGJDd2dZMkZ1ZG1GektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJGc2JHSmhZMnNnSVQwZ2JuVnNiQ2tnYVcxbkxtOXVaWEp5YjNJZ1BTQmpZV3hzWW1GamF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXMW5Mbk55WXlBOUlHWnBiR1V1WkdGMFlWVlNURHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUjI5bGN5QjBhSEp2ZFdkb0lIUm9aU0J4ZFdWMVpTQmhibVFnY0hKdlkyVnpjMlZ6SUdacGJHVnpJR2xtSUhSb1pYSmxJR0Z5Wlc0bmRDQjBiMjhnYldGdWVTQmhiSEpsWVdSNUxseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbkJ5YjJObGMzTlJkV1YxWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSEJ5YjJObGMzTlJkV1YxWlNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDI5d2RHbHZibk1nUFNCMGFHbHpMbTl3ZEdsdmJuTXNJSEJoY21Gc2JHVnNWWEJzYjJGa2N5QTlJRjl2Y0hScGIyNXpMbkJoY21Gc2JHVnNWWEJzYjJGa2N6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0hKdlkyVnpjMmx1WjB4bGJtZDBhQ0E5SUhSb2FYTXVaMlYwVlhCc2IyRmthVzVuUm1sc1pYTW9LUzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdrZ1BTQndjbTlqWlhOemFXNW5UR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlhKbElHRnlaU0JoYkhKbFlXUjVJR0YwSUd4bFlYTjBJR0Z6SUcxaGJua2dabWxzWlhNZ2RYQnNiMkZrYVc1bklIUm9ZVzRnYzJodmRXeGtJR0psWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliMk5sYzNOcGJtZE1aVzVuZEdnZ1BqMGdjR0Z5WVd4c1pXeFZjR3h2WVdSektTQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEYxWlhWbFpFWnBiR1Z6SUQwZ2RHaHBjeTVuWlhSUmRXVjFaV1JHYVd4bGN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaEtIRjFaWFZsWkVacGJHVnpMbXhsYm1kMGFDQStJREFwS1NCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTUxY0d4dllXUk5kV3gwYVhCc1pTa2dMeThnVkdobElHWnBiR1Z6SUhOb2IzVnNaQ0JpWlNCMWNHeHZZV1JsWkNCcGJpQnZibVVnY21WeGRXVnpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIyTmxjM05HYVd4bGN5aHhkV1YxWldSR2FXeGxjeTV6YkdsalpTZ3dMQ0J3WVhKaGJHeGxiRlZ3Ykc5aFpITWdMU0J3Y205alpYTnphVzVuVEdWdVozUm9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjNhR2xzWlNocElEd2djR0Z5WVd4c1pXeFZjR3h2WVdSektYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnhkV1YxWldSR2FXeGxjeTVzWlc1bmRHZ3BJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFNXZkR2hwYm1jZ2JHVm1kQ0IwYnlCd2NtOWpaWE56WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdlkyVnpjMFpwYkdVb2NYVmxkV1ZrUm1sc1pYTXVjMmhwWm5Rb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrckt6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmR5WVhCd1pYSWdabTl5SUdCd2NtOWpaWE56Um1sc1pYTmdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpY0hKdlkyVnpjMFpwYkdWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ3Y205alpYTnpSbWxzWlNobWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNISnZZMlZ6YzBacGJHVnpLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCTWIyRmtjeUIwYUdVZ1ptbHNaU3dnZEdobGJpQmpZV3hzY3lCbWFXNXBjMmhsWkV4dllXUnBibWNvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0luQnliMk5sYzNOR2FXeGxjMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlIQnliMk5sYzNOR2FXeGxjeWhtYVd4bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU3dnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCbVlXeHpaU3dnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJmYVhSbGNtRjBiM0lnUFNCbWFXeGxjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJHVWdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVXVjSEp2WTJWemMybHVaeUE5SUhSeWRXVTdJQzh2SUVKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5OMFlYUjFjeUE5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VWVkJNVDBGRVNVNUhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJXbDBLRndpY0hKdlkyVnpjMmx1WjF3aUxDQm1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2tWeWNtOXlJRDBnWlhKeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUFtSmlCZmFYUmxjbUYwYjNJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSXVjbVYwZFhKdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZaR2xrU1hSbGNtRjBiM0pGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11ZFhCc2IyRmtUWFZzZEdsd2JHVXBJSFJvYVhNdVpXMXBkQ2hjSW5CeWIyTmxjM05wYm1kdGRXeDBhWEJzWlZ3aUxDQm1hV3hsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkWEJzYjJGa1JtbHNaWE1vWm1sc1pYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVgyZGxkRVpwYkdWelYybDBhRmhvY2x3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRjluWlhSR2FXeGxjMWRwZEdoWWFISW9lR2h5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1pwYkdWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWFXeGxjeUE5SUhSb2FYTXVabWxzWlhNdVptbHNkR1Z5S0daMWJtTjBhVzl1S0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdacGJHVXVlR2h5SUQwOVBTQjRhSEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrdWJXRndLR1oxYm1OMGFXOXVLR1pwYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5oYm1ObGJITWdkR2hsSUdacGJHVWdkWEJzYjJGa0lHRnVaQ0J6WlhSeklIUm9aU0J6ZEdGMGRYTWdkRzhnUTBGT1EwVk1SVVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ29xYVdZcUtpQjBhR1VnWm1sc1pTQnBjeUJoWTNSMVlXeHNlU0JpWldsdVp5QjFjR3h2WVdSbFpDNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JR2wwSjNNZ2MzUnBiR3dnYVc0Z2RHaGxJSEYxWlhWbExDQjBhR1VnWm1sc1pTQnBjeUJpWldsdVp5QnlaVzF2ZG1Wa0lHWnliMjBnYVhRZ1lXNWtJSFJvWlNCemRHRjBkWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCMGJ5QkRRVTVEUlV4RlJDNWNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0pqWVc1alpXeFZjR3h2WVdSY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJqWVc1alpXeFZjR3h2WVdRb1ptbHNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1hV3hsTG5OMFlYUjFjeUE5UFQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVWVUV4UFFVUkpUa2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdkeWIzVndaV1JHYVd4bGN5QTlJSFJvYVhNdVgyZGxkRVpwYkdWelYybDBhRmhvY2lobWFXeGxMbmhvY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU3dnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCbVlXeHpaU3dnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJRjlwZEdWeVlYUnZjaUE5SUdkeWIzVndaV1JHYVd4bGMxdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtDa3NJRjl6ZEdWd095QWhLRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0FvWDNOMFpYQWdQU0JmYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bEtUc2dYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbmNtOTFjR1ZrUm1sc1pTQTlJRjl6ZEdWd0xuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3WldSR2FXeGxMbk4wWVhSMWN5QTlJQ1JoTmpBeFptWXpNR1kwT0RObE9URTNKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprdVEwRk9RMFZNUlVRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0JsY25JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUNZbUlGOXBkR1Z5WVhSdmNpNXlaWFIxY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZaR2xrU1hSbGNtRjBiM0pGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCZmFYUmxjbUYwYjNKRmNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm1hV3hsTG5ob2NpQWhQVDBnWENKMWJtUmxabWx1WldSY0lpa2dabWxzWlM1NGFISXVZV0p2Y25Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0eElEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJeElEMGdabUZzYzJVc0lGOXBkR1Z5WVhSdmNrVnljbTl5TVNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ1gybDBaWEpoZEc5eU1TQTlJR2R5YjNWd1pXUkdhV3hsYzF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3TVRzZ0lTaGZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dU1TQTlJQ2hmYzNSbGNERWdQU0JmYVhSbGNtRjBiM0l4TG01bGVIUW9LU2t1Wkc5dVpTazdJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNHhJRDBnZEhKMVpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHZHliM1Z3WldSR2FXeGxJRDBnWDNOMFpYQXhMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2hjSW1OaGJtTmxiR1ZrWENJc0lHZHliM1Z3WldSR2FXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjakVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlSWEp5YjNJeElEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiakVnSmlZZ1gybDBaWEpoZEc5eU1TNXlaWFIxY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJeExuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NTFjR3h2WVdSTmRXeDBhWEJzWlNrZ2RHaHBjeTVsYldsMEtGd2lZMkZ1WTJWc1pXUnRkV3gwYVhCc1pWd2lMQ0JuY205MWNHVmtSbWxzWlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9abWxzWlM1emRHRjBkWE1nUFQwOUlDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1UVVSRVJVUWdmSHdnWm1sc1pTNXpkR0YwZFhNZ1BUMDlJQ1JoTmpBeFptWXpNR1kwT0RObE9URTNKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprdVVWVkZWVVZFS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWMzUmhkSFZ6SUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVEUVU1RFJVeEZSRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMEtGd2lZMkZ1WTJWc1pXUmNJaXdnWm1sc1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11ZFhCc2IyRmtUWFZzZEdsd2JHVXBJSFJvYVhNdVpXMXBkQ2hjSW1OaGJtTmxiR1ZrYlhWc2RHbHdiR1ZjSWl3Z1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWhkWFJ2VUhKdlkyVnpjMUYxWlhWbEtTQnlaWFIxY200Z2RHaHBjeTV3Y205alpYTnpVWFZsZFdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW5KbGMyOXNkbVZQY0hScGIyNWNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCeVpYTnZiSFpsVDNCMGFXOXVLRzl3ZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdYMnhsYmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc0lHRnlaM01nUFNCdVpYY2dRWEp5WVhrb1gyeGxiaUErSURFZ1B5QmZiR1Z1SUMwZ01TQTZJREFwTENCZmEyVjVJRDBnTVRzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5bDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVozTmJYMnRsZVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzE5clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZiaUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0J5WlhSMWNtNGdiM0IwYVc5dUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmNIUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSjFjR3h2WVdSR2FXeGxYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2RYQnNiMkZrUm1sc1pTaG1hV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkWEJzYjJGa1JtbHNaWE1vVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0oxY0d4dllXUkdhV3hsYzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSFZ3Ykc5aFpFWnBiR1Z6S0dacGJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBjbUZ1YzJadmNtMUdhV3hsY3lobWFXeGxjeXdnWm5WdVkzUnBiMjRvZEhKaGJuTm1iM0p0WldSR2FXeGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXViM0IwYVc5dWN5NWphSFZ1YTJsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUTJoMWJtdHBibWNnYVhNZ2JtOTBJR0ZzYkc5M1pXUWdkRzhnWW1VZ2RYTmxaQ0IzYVhSb0lHQjFjR3h2WVdSTmRXeDBhWEJzWldBZ2MyOGdkMlVnYTI1dmQxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hoZENCMGFHVnlaU0JwY3lCdmJteDVJRjlmYjI1bFgxOW1hV3hsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnlZVzV6Wm05eWJXVmtSbWxzWlNBOUlIUnlZVzV6Wm05eWJXVmtSbWxzWlhOYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsYzFzd1hTNTFjR3h2WVdRdVkyaDFibXRsWkNBOUlGOTBhR2x6TG05d2RHbHZibk11WTJoMWJtdHBibWNnSmlZZ0tGOTBhR2x6TG05d2RHbHZibk11Wm05eVkyVkRhSFZ1YTJsdVp5QjhmQ0IwY21GdWMyWnZjbTFsWkVacGJHVXVjMmw2WlNBK0lGOTBhR2x6TG05d2RHbHZibk11WTJoMWJtdFRhWHBsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVnpXekJkTG5Wd2JHOWhaQzUwYjNSaGJFTm9kVzVyUTI5MWJuUWdQU0JOWVhSb0xtTmxhV3dvZEhKaGJuTm1iM0p0WldSR2FXeGxMbk5wZW1VZ0x5QmZkR2hwY3k1dmNIUnBiMjV6TG1Ob2RXNXJVMmw2WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwYkdWeld6QmRMblZ3Ykc5aFpDNWphSFZ1YTJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTXhJRDBnWDNSb2FYTXNJRjkwYUdsek5DQTlJRjkwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCbWFXeGxJSE5vYjNWc1pDQmlaU0J6Wlc1MElHbHVJR05vZFc1cmN5RmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmphSFZ1YTJsdVp5QnZjSFJwYjI0Z2FYTWdjMlYwTENCM1pTQXFLbXR1YjNjcUtpQjBhR0YwSUhSb1pYSmxJR05oYmlCdmJteDVJR0psSUNvcWIyNWxLaW9nWm1sc1pTd2djMmx1WTJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIVndiRzloWkUxMWJIUnBjR3hsSUdseklHNXZkQ0JoYkd4dmQyVmtJSGRwZEdnZ2RHaHBjeUJ2Y0hScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sc1pTQTlJR1pwYkdWeld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSeVlXNXpabTl5YldWa1JtbHNaU0E5SUhSeVlXNXpabTl5YldWa1JtbHNaWE5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM1JoY25SbFpFTm9kVzVyUTI5MWJuUWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNTFjR3h2WVdRdVkyaDFibXR6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYUdGdVpHeGxUbVY0ZEVOb2RXNXJJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOb2RXNXJTVzVrWlhnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFWnBibVFnZEdobElHNWxlSFFnYVhSbGJTQnBiaUJtYVd4bExuVndiRzloWkM1amFIVnVhM01nZEdoaGRDQnBjeUJ1YjNRZ1pHVm1hVzVsWkNCNVpYUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVW9abWxzWlM1MWNHeHZZV1F1WTJoMWJtdHpXMk5vZFc1clNXNWtaWGhkSUNFOVBTQjFibVJsWm1sdVpXUXBZMmgxYm10SmJtUmxlQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2JXVmhibk1zSUhSb1lYUWdZV3hzSUdOb2RXNXJjeUJvWVhabElHRnNjbVZoWkhrZ1ltVmxiaUJ6ZEdGeWRHVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGphSFZ1YTBsdVpHVjRJRDQ5SUdacGJHVXVkWEJzYjJGa0xuUnZkR0ZzUTJoMWJtdERiM1Z1ZENrZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowWldSRGFIVnVhME52ZFc1MEt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBZWEowSUQwZ1kyaDFibXRKYm1SbGVDQXFJRjkwYUdsek1TNXZjSFJwYjI1ekxtTm9kVzVyVTJsNlpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pXNWtJRDBnVFdGMGFDNXRhVzRvYzNSaGNuUWdLeUJmZEdocGN6RXViM0IwYVc5dWN5NWphSFZ1YTFOcGVtVXNJSFJ5WVc1elptOXliV1ZrUm1sc1pTNXphWHBsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdGMFlVSnNiMk5ySUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUJmZEdocGN6RXVYMmRsZEZCaGNtRnRUbUZ0WlNnd0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nZEhKaGJuTm1iM0p0WldSR2FXeGxMbmRsWW10cGRGTnNhV05sSUQ4Z2RISmhibk5tYjNKdFpXUkdhV3hsTG5kbFltdHBkRk5zYVdObEtITjBZWEowTENCbGJtUXBJRG9nZEhKaGJuTm1iM0p0WldSR2FXeGxMbk5zYVdObEtITjBZWEowTENCbGJtUXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsYm1GdFpUb2dabWxzWlM1MWNHeHZZV1F1Wm1sc1pXNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vZFc1clNXNWtaWGc2SUdOb2RXNXJTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVXVkWEJzYjJGa0xtTm9kVzVyYzF0amFIVnVhMGx1WkdWNFhTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlRvZ1ptbHNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklHTm9kVzVyU1c1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZDYkc5amF6b2daR0YwWVVKc2IyTnJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNNklDUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1VlZCTVQwRkVTVTVITEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjem9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGNtbGxjem9nTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXhMbDkxY0d4dllXUkVZWFJoS0dacGJHVnpMQ0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGQ2JHOWphMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZFhCc2IyRmtMbVpwYm1semFHVmtRMmgxYm10VmNHeHZZV1FnUFNCbWRXNWpkR2x2YmloamFIVnVheXdnY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTTFJRDBnWDNSb2FYTTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhiR3hHYVc1cGMyaGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoMWJtc3VjM1JoZEhWeklEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1VFZVTkRSVk5UTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU5zWldGeUlIUm9aU0JrWVhSaElHWnliMjBnZEdobElHTm9kVzVyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaDFibXN1WkdGMFlVSnNiMk5ySUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFIVnVheTV5WlhOd2IyNXpaU0E5SUdOb2RXNXJMbmhvY2k1eVpYTndiMjV6WlZSbGVIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoMWJtc3VjbVZ6Y0c5dWMyVklaV0ZrWlhKeklEMGdZMmgxYm1zdWVHaHlMbWRsZEVGc2JGSmxjM0J2Ym5ObFNHVmhaR1Z5Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUV4bFlYWnBibWNnZEdocGN5QnlaV1psY21WdVkyVWdkRzhnZUdoeUlIZHBiR3dnWTJGMWMyVWdiV1Z0YjNKNUlHeGxZV3R6TGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9kVzVyTG5ob2NpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1pwYkdVdWRYQnNiMkZrTG5SdmRHRnNRMmgxYm10RGIzVnVkRHNnYVNzcktYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwYkdVdWRYQnNiMkZrTG1Ob2RXNXJjMXRwWFNBOVBUMGdkVzVrWldacGJtVmtLU0J5WlhSMWNtNGdhR0Z1Wkd4bFRtVjRkRU5vZFc1cktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVd4bExuVndiRzloWkM1amFIVnVhM05iYVYwdWMzUmhkSFZ6SUNFOVBTQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TGxOVlEwTkZVMU1wSUdGc2JFWnBibWx6YUdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhiR3hHYVc1cGMyaGxaQ2tnWDNSb2FYTTBMbTl3ZEdsdmJuTXVZMmgxYm10elZYQnNiMkZrWldRb1ptbHNaU3dnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpOUzVmWm1sdWFYTm9aV1FvWm1sc1pYTXNJSEpsYzNCdmJuTmxMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWIzQjBhVzl1Y3k1d1lYSmhiR3hsYkVOb2RXNXJWWEJzYjJGa2N5a2dabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1pwYkdVdWRYQnNiMkZrTG5SdmRHRnNRMmgxYm10RGIzVnVkRHNnYVNzcktXaGhibVJzWlU1bGVIUkRhSFZ1YXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JvWVc1a2JHVk9aWGgwUTJoMWJtc29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtZWFJoUW14dlkydHpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1ptbHNaWE11YkdWdVozUm9PeUJwS3lzcFpHRjBZVUpzYjJOcmMxdHBYU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCZmRHaHBjeTVmWjJWMFVHRnlZVzFPWVcxbEtHa3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJSFJ5WVc1elptOXliV1ZrUm1sc1pYTmJhVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaVzVoYldVNklHWnBiR1Z6VzJsZExuVndiRzloWkM1bWFXeGxibUZ0WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkxY0d4dllXUkVZWFJoS0dacGJHVnpMQ0JrWVhSaFFteHZZMnR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THk4Z1VtVjBkWEp1Y3lCMGFHVWdjbWxuYUhRZ1kyaDFibXNnWm05eUlHZHBkbVZ1SUdacGJHVWdZVzVrSUhob2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbDluWlhSRGFIVnVhMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOW5aWFJEYUhWdWF5aG1hV3hsTENCNGFISXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR2tnUFNBd095QnBJRHdnWm1sc1pTNTFjR3h2WVdRdWRHOTBZV3hEYUhWdWEwTnZkVzUwT3lCcEt5c3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abWxzWlM1MWNHeHZZV1F1WTJoMWJtdHpXMmxkSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnWm1sc1pTNTFjR3h2WVdRdVkyaDFibXR6VzJsZExuaG9jaUE5UFQwZ2VHaHlLU0J5WlhSMWNtNGdabWxzWlM1MWNHeHZZV1F1WTJoMWJtdHpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJtZFc1amRHbHZiaUJoWTNSMVlXeHNlU0IxY0d4dllXUnpJSFJvWlNCbWFXeGxLSE1wSUhSdklIUm9aU0J6WlhKMlpYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lFbG1JR1JoZEdGQ2JHOWphM01nWTI5dWRHRnBibk1nZEdobElHRmpkSFZoYkNCa1lYUmhJSFJ2SUhWd2JHOWhaQ0FvYldWaGJtbHVaeXdnZEdoaGRDQjBhR2x6SUdOdmRXeGtYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmxhWFJvWlhJZ1ltVWdkSEpoYm5ObWIzSnRaV1FnWm1sc1pYTXNJRzl5SUdsdVpHbDJhV1IxWVd3Z1kyaDFibXR6SUdadmNpQmphSFZ1YTJWa0lIVndiRzloWkNrZ2RHaGxibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hsZVNCM2FXeHNJR0psSUhWelpXUWdabTl5SUhSb1pTQmhZM1IxWVd3Z1pHRjBZU0IwYnlCMWNHeHZZV1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVgzVndiRzloWkVSaGRHRmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCZmRYQnNiMkZrUkdGMFlTaG1hV3hsY3l3Z1pHRjBZVUpzYjJOcmN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTXNJRjkwYUdsek55QTlJSFJvYVhNc0lGOTBhR2x6T0NBOUlIUm9hWE1zSUY5MGFHbHpPU0E5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhob2NpQTlJRzVsZHlCWVRVeElkSFJ3VW1WeGRXVnpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdkSEoxWlN3Z1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQm1ZV3h6WlN3Z1gybDBaWEpoZEc5eVJYSnliM0lnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVSFYwSUhSb1pTQjRhSElnYjJKcVpXTjBJR2x1SUhSb1pTQm1hV3hsSUc5aWFtVmpkSE1nZEc4Z1ltVWdZV0pzWlNCMGJ5QnlaV1psY21WdVkyVWdhWFFnYkdGMFpYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ1ptbHNaWE5iVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjRHNnSVNoZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ0tGOXpkR1Z3SUQwZ1gybDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaU2s3SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWFXeGxJRDBnWDNOMFpYQXVkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbmhvY2lBOUlIaG9janRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxjMXN3WFM1MWNHeHZZV1F1WTJoMWJtdGxaQ2tnTHk4Z1VIVjBJSFJvWlNCNGFISWdiMkpxWldOMElHbHVJSFJvWlNCeWFXZG9kQ0JqYUhWdWF5QnZZbXBsWTNRc0lITnZJR2wwSUdOaGJpQmlaU0JoYzNOdlkybGhkR1ZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JHRjBaWElzSUdGdVpDQm1iM1Z1WkNCM2FYUm9JRjluWlhSRGFIVnVheTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bGMxc3dYUzUxY0d4dllXUXVZMmgxYm10elcyUmhkR0ZDYkc5amEzTmJNRjB1WTJoMWJtdEpibVJsZUYwdWVHaHlJRDBnZUdoeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WlhSb2IyUWdQU0IwYUdsekxuSmxjMjlzZG1WUGNIUnBiMjRvZEdocGN5NXZjSFJwYjI1ekxtMWxkR2h2WkN3Z1ptbHNaWE1zSUdSaGRHRkNiRzlqYTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIxY213Z1BTQjBhR2x6TG5KbGMyOXNkbVZQY0hScGIyNG9kR2hwY3k1dmNIUnBiMjV6TG5WeWJDd2dabWxzWlhNc0lHUmhkR0ZDYkc5amEzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGhvY2k1dmNHVnVLRzFsZEdodlpDd2dkWEpzTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjBhVzVuSUhSb1pTQjBhVzFsYjNWMElHRm1kR1Z5SUc5d1pXNGdZbVZqWVhWelpTQnZaaUJKUlRFeElHbHpjM1ZsT2lCb2RIUndjem92TDJkcGRHeGhZaTVqYjIwdmJXVnVieTlrY205d2VtOXVaUzlwYzNOMVpYTXZPRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFXMWxiM1YwSUQwZ2RHaHBjeTV5WlhOdmJIWmxUM0IwYVc5dUtIUm9hWE11YjNCMGFXOXVjeTUwYVcxbGIzVjBMQ0JtYVd4bGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hScGJXVnZkWFFwSUhob2NpNTBhVzFsYjNWMElEMGdkR2hwY3k1eVpYTnZiSFpsVDNCMGFXOXVLSFJvYVhNdWIzQjBhVzl1Y3k1MGFXMWxiM1YwTENCbWFXeGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NHRnpJSFJ2SUdKbElHRm1kR1Z5SUdBdWIzQmxiaWdwWUM0Z1UyVmxJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlsYm5sdkwyUnliM0I2YjI1bEwybHpjM1ZsY3k4eE56bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRhSEl1ZDJsMGFFTnlaV1JsYm5ScFlXeHpJRDBnSVNGMGFHbHpMbTl3ZEdsdmJuTXVkMmwwYUVOeVpXUmxiblJwWVd4ek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV2Ym14dllXUWdQU0JtZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOW1hVzVwYzJobFpGVndiRzloWkdsdVp5aG1hV3hsY3l3Z2VHaHlMQ0JsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV2Ym5ScGJXVnZkWFFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTTNMbDlvWVc1a2JHVlZjR3h2WVdSRmNuSnZjaWhtYVd4bGN5d2dlR2h5TENCY0lsSmxjWFZsYzNRZ2RHbHRaV1J2ZFhRZ1lXWjBaWElnWENJdVkyOXVZMkYwS0Y5MGFHbHpOeTV2Y0hScGIyNXpMblJwYldWdmRYUWdMeUF4TURBd0xDQmNJaUJ6WldOdmJtUnpYQ0lwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIaG9jaTV2Ym1WeWNtOXlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsek9DNWZhR0Z1Wkd4bFZYQnNiMkZrUlhKeWIzSW9abWxzWlhNc0lIaG9jaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRiMjFsSUdKeWIzZHpaWEp6SUdSdklHNXZkQ0JvWVhabElIUm9aU0F1ZFhCc2IyRmtJSEJ5YjNCbGNuUjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCeWIyZHlaWE56VDJKcUlEMGdlR2h5TG5Wd2JHOWhaQ0FoUFNCdWRXeHNJRDhnZUdoeUxuVndiRzloWkNBNklIaG9janRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjMDlpYWk1dmJuQnliMmR5WlhOeklEMGdablZ1WTNScGIyNG9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE01TGw5MWNHUmhkR1ZHYVd4bGMxVndiRzloWkZCeWIyZHlaWE56S0dacGJHVnpMQ0I0YUhJc0lHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHaGxZV1JsY25NZ1BTQjBhR2x6TG05d2RHbHZibk11WkdWbVlYVnNkRWhsWVdSbGNuTWdQeUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFRmpZMlZ3ZERvZ1hDSmhjSEJzYVdOaGRHbHZiaTlxYzI5dVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVEyRmphR1V0UTI5dWRISnZiRndpT2lCY0ltNXZMV05oWTJobFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVdDMVNaWEYxWlhOMFpXUXRWMmwwYUZ3aU9pQmNJbGhOVEVoMGRIQlNaWEYxWlhOMFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aWFXNWhjbmxDYjJSNUtTQm9aV0ZrWlhKelcxd2lRMjl1ZEdWdWRDMVVlWEJsWENKZElEMGdabWxzWlhOYk1GMHVkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1obFlXUmxjbk1wSUNSd1lYSmpaV3drYVc1MFpYSnZjRVJsWm1GMWJIUW9KRFp0VlRoM0pHcDFjM1JsZUhSbGJtUXBLR2hsWVdSbGNuTXNJSFJvYVhNdWIzQjBhVzl1Y3k1b1pXRmtaWEp6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdobFlXUmxjazVoYldVZ2FXNGdhR1ZoWkdWeWN5bDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm9aV0ZrWlhKV1lXeDFaU0E5SUdobFlXUmxjbk5iYUdWaFpHVnlUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1pXRmtaWEpXWVd4MVpTa2dlR2h5TG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvYUdWaFpHVnlUbUZ0WlN3Z2FHVmhaR1Z5Vm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbUpwYm1GeWVVSnZaSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxMQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUdaaGJITmxMQ0JmYVhSbGNtRjBiM0pGY25KdmNpQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOcGJtTmxJSFJvWlNCbWFXeGxJR2x6SUdkdmFXNW5JSFJ2SUdKbElITmxiblFnWVhNZ1ltbHVZWEo1SUdKdlpIa3NJR2wwSUdSdlpYTnVKM1FnYldGclpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZVzU1SUhObGJuTmxJSFJ2SUdkbGJtVnlZWFJsSUdCR2IzSnRSR0YwWVdBZ1ptOXlJR2wwTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJmYVhSbGNtRjBiM0lnUFNCbWFXeGxjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsSUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwS0Z3aWMyVnVaR2x1WjF3aUxDQm1hV3hsTENCNGFISXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ1pYSnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJScFpFbDBaWEpoZEc5eVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dYMmwwWlhKaGRHOXlSWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVkWEJzYjJGa1RYVnNkR2x3YkdVcElIUm9hWE11WlcxcGRDaGNJbk5sYm1ScGJtZHRkV3gwYVhCc1pWd2lMQ0JtYVd4bGN5d2dlR2h5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRXSnRhWFJTWlhGMVpYTjBLSGhvY2l3Z2JuVnNiQ3dnWm1sc1pYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1iM0p0UkdGMFlTQTlJRzVsZHlCR2IzSnRSR0YwWVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQlpHUnBibWNnWVd4c0lFQnZjSFJwYjI1eklIQmhjbUZ0WlhSbGNuTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV3WVhKaGJYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaFpHUnBkR2x2Ym1Gc1VHRnlZVzF6SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbkJoY21GdGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZV1JrYVhScGIyNWhiRkJoY21GdGN5QTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQmhaR1JwZEdsdmJtRnNVR0Z5WVcxeklEMGdZV1JrYVhScGIyNWhiRkJoY21GdGN5NWpZV3hzS0hSb2FYTXNJR1pwYkdWekxDQjRhSElzSUdacGJHVnpXekJkTG5Wd2JHOWhaQzVqYUhWdWEyVmtJRDhnZEdocGN5NWZaMlYwUTJoMWJtc29abWxzWlhOYk1GMHNJSGhvY2lrZ09pQnVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnYTJWNUlHbHVJR0ZrWkdsMGFXOXVZV3hRWVhKaGJYTXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHRmtaR2wwYVc5dVlXeFFZWEpoYlhOYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMllXeDFaU2twSUM4dklGUm9aU0JoWkdScGRHbHZibUZzSUhCaGNtRnRaWFJsY2lCamIyNTBZV2x1Y3lCaGJpQmhjbkpoZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6YnlCc1pYUnpJR2wwWlhKaGRHVWdiM1psY2lCcGRDQjBieUJoZEhSaFkyZ2daV0ZqYUNCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHbHVaR2wyYVdSMVlXeHNlUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RtRnNkV1V1YkdWdVozUm9PeUJwS3lzcFptOXliVVJoZEdFdVlYQndaVzVrS0d0bGVTd2dkbUZzZFdWYmFWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdabTl5YlVSaGRHRXVZWEJ3Wlc1a0tHdGxlU3dnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU3dnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCbVlXeHpaU3dnWDJsMFpYSmhkRzl5UlhKeWIzSWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCTVpYUWdkR2hsSUhWelpYSWdZV1JrSUdGa1pHbDBhVzl1WVd3Z1pHRjBZU0JwWmlCdVpXTmxjM05oY25sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ1ptbHNaWE5iVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwTENCZmMzUmxjRHNnSVNoZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ0tGOXpkR1Z3SUQwZ1gybDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaU2s3SUY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNCMGNuVmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabWxzWlNBOUlGOXpkR1Z3TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENoY0luTmxibVJwYm1kY0lpd2dabWxzWlN3Z2VHaHlMQ0JtYjNKdFJHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJScFpFbDBaWEpoZEc5eVJYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQmxjbkk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJQ1ltSUY5cGRHVnlZWFJ2Y2k1eVpYUjFjbTRnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0l1Y21WMGRYSnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJmYVhSbGNtRjBiM0pGY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTUxY0d4dllXUk5kV3gwYVhCc1pTa2dkR2hwY3k1bGJXbDBLRndpYzJWdVpHbHVaMjExYkhScGNHeGxYQ0lzSUdacGJHVnpMQ0I0YUhJc0lHWnZjbTFFWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZV1JrUm05eWJVVnNaVzFsYm5SRVlYUmhLR1p2Y20xRVlYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSbWx1WVd4c2VTQmhaR1FnZEdobElHWnBiR1Z6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWhoY3lCMGJ5QmlaU0JzWVhOMElHSmxZMkYxYzJVZ2MyOXRaU0J6WlhKMlpYSnpJQ2hsWnpvZ1V6TXBJR1Y0Y0dWamRDQjBhR1VnWm1sc1pTQjBieUJpWlNCMGFHVWdiR0Z6ZENCd1lYSmhiV1YwWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1JoZEdGQ2JHOWphM011YkdWdVozUm9PeUJwS3lzcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JoZEdGQ2JHOWpheUE5SUdSaGRHRkNiRzlqYTNOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0p0UkdGMFlTNWhjSEJsYm1Rb1pHRjBZVUpzYjJOckxtNWhiV1VzSUdSaGRHRkNiRzlqYXk1a1lYUmhMQ0JrWVhSaFFteHZZMnN1Wm1sc1pXNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1ZpYldsMFVtVnhkV1Z6ZENoNGFISXNJR1p2Y20xRVlYUmhMQ0JtYVd4bGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY21GdWMyWnZjbTF6SUdGc2JDQm1hV3hsY3lCM2FYUm9JSFJvYVhNdWIzQjBhVzl1Y3k1MGNtRnVjMlp2Y20xR2FXeGxJR0Z1WkNCcGJuWnZhMlZ6SUdSdmJtVWdkMmwwYUNCMGFHVWdkSEpoYm5ObWIzSnRaV1FnWm1sc1pYTWdkMmhsYmlCa2IyNWxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSWw5MGNtRnVjMlp2Y20xR2FXeGxjMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlGOTBjbUZ1YzJadmNtMUdhV3hsY3lobWFXeGxjeXdnWkc5dVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTXNJRjlzYjI5d0lEMGdablZ1WTNScGIyNG9hU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1dmNIUnBiMjV6TG5SeVlXNXpabTl5YlVacGJHVXVZMkZzYkNoZmRHaHBjeXdnWm1sc1pYTmJhVjBzSUdaMWJtTjBhVzl1S0hSeVlXNXpabTl5YldWa1JtbHNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0WldSR2FXeGxjMXRwWFNBOUlIUnlZVzV6Wm05eWJXVmtSbWxzWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3JLMlJ2Ym1WRGIzVnVkR1Z5SUQwOVBTQm1hV3hsY3k1c1pXNW5kR2dwSUdSdmJtVW9kSEpoYm5ObWIzSnRaV1JHYVd4bGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSeVlXNXpabTl5YldWa1JtbHNaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYkhWdGMza2dkMkY1SUc5bUlHaGhibVJzYVc1bklHRnplVzVqYUhKdmJtOTFjeUJqWVd4c2N5d2dkVzUwYVd3Z1NTQm5aWFFnZEc4Z1lXUmtJR0VnY0hKdmNHVnlJRVoxZEhWeVpTQnNhV0p5WVhKNUxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrYjI1bFEyOTFiblJsY2lBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR1pwYkdWekxteGxibWQwYURzZ2FTc3JLVjlzYjI5d0tHa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVWVd0bGN5QmpZWEpsSUc5bUlHRmtaR2x1WnlCdmRHaGxjaUJwYm5CMWRDQmxiR1Z0Wlc1MGN5QnZaaUIwYUdVZ1ptOXliU0IwYnlCMGFHVWdRVXBCV0NCeVpYRjFaWE4wWEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVgyRmtaRVp2Y20xRmJHVnRaVzUwUkdGMFlWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUY5aFpHUkdiM0p0Uld4bGJXVnVkRVJoZEdFb1ptOXliVVJoZEdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXNJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnWm1Gc2MyVXNJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSaGEyVWdZMkZ5WlNCdlppQnZkR2hsY2lCcGJuQjFkQ0JsYkdWdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZzWlcxbGJuUXVkR0ZuVG1GdFpTQTlQVDBnWENKR1QxSk5YQ0lwSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ2RHaHBjeTVsYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29YQ0pwYm5CMWRDd2dkR1Y0ZEdGeVpXRXNJSE5sYkdWamRDd2dZblYwZEc5dVhDSXBXMU41YldKdmJDNXBkR1Z5WVhSdmNsMG9LU3dnWDNOMFpYQTdJQ0VvWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUNoZmMzUmxjQ0E5SUY5cGRHVnlZWFJ2Y2k1dVpYaDBLQ2twTG1SdmJtVXBPeUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1d2RYUWdQU0JmYzNSbGNDNTJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBibkIxZEU1aGJXVWdQU0JwYm5CMWRDNW5aWFJCZEhSeWFXSjFkR1VvWENKdVlXMWxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbHVjSFYwVkhsd1pTQTlJR2x1Y0hWMExtZGxkRUYwZEhKcFluVjBaU2hjSW5SNWNHVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXNXdkWFJVZVhCbEtTQnBibkIxZEZSNWNHVWdQU0JwYm5CMWRGUjVjR1V1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQnBibkIxZENCa2IyVnpiaWQwSUdoaGRtVWdZU0J1WVcxbExDQjNaU0JqWVc0bmRDQjFjMlVnYVhRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbHVjSFYwVG1GdFpTQTlQVDBnWENKMWJtUmxabWx1WldSY0lpQjhmQ0JwYm5CMWRFNWhiV1VnUFQwOUlHNTFiR3dwSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVjSFYwTG5SaFowNWhiV1VnUFQwOUlGd2lVMFZNUlVOVVhDSWdKaVlnYVc1d2RYUXVhR0Z6UVhSMGNtbGlkWFJsS0Z3aWJYVnNkR2x3YkdWY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVc0lGOWthV1JKZEdWeVlYUnZja1Z5Y205eUlEMGdabUZzYzJVc0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGQnZjM05wWW14NUlHMTFiSFJwY0d4bElIWmhiSFZsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJRjlwZEdWeVlYUnZjaUE5SUdsdWNIVjBMbTl3ZEdsdmJuTmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmYzNSbGNEc2dJU2hmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnS0Y5emRHVndJRDBnWDJsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpTazdJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmNIUnBiMjRnUFNCZmMzUmxjQzUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjR1YzJWc1pXTjBaV1FwSUdadmNtMUVZWFJoTG1Gd2NHVnVaQ2hwYm5CMWRFNWhiV1VzSUc5d2RHbHZiaTUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0pGY25KdmNpQTlJR1Z5Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdKaVlnWDJsMFpYSmhkRzl5TG5KbGRIVnliaUFoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCZmFYUmxjbUYwYjNKRmNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9JV2x1Y0hWMFZIbHdaU0I4ZkNCcGJuQjFkRlI1Y0dVZ0lUMDlJRndpWTJobFkydGliM2hjSWlBbUppQnBibkIxZEZSNWNHVWdJVDA5SUZ3aWNtRmthVzljSWlCOGZDQnBibkIxZEM1amFHVmphMlZrS1NCbWIzSnRSR0YwWVM1aGNIQmxibVFvYVc1d2RYUk9ZVzFsTENCcGJuQjFkQzUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlHVnljanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lWOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z0ppWWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsMFpYSmhkRzl5TG5KbGRIVnliaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJScFpFbDBaWEpoZEc5eVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCZmFYUmxjbUYwYjNKRmNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTVzUyYjJ0bFpDQjNhR1Z1SUhSb1pYSmxJR2x6SUc1bGR5QndjbTluY21WemN5QnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQm5hWFpsYmlCbWFXeGxjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUdVZ2FYTWdibTkwSUhCeWIzWnBaR1ZrTENCcGRDQnBjeUJoYzNOMWJXVmtJSFJvWVhRZ2RHaGxJSFZ3Ykc5aFpDQnBjeUJtYVc1cGMyaGxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKZmRYQmtZWFJsUm1sc1pYTlZjR3h2WVdSUWNtOW5jbVZ6YzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRjkxY0dSaGRHVkdhV3hsYzFWd2JHOWhaRkJ5YjJkeVpYTnpLR1pwYkdWekxDQjRhSElzSUdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXNJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnWm1Gc2MyVXNJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFptbHNaWE5iTUYwdWRYQnNiMkZrTG1Ob2RXNXJaV1FwSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFaGhibVJzWlNCbWFXeGxJSFZ3Ykc5aFpITWdkMmwwYUc5MWRDQmphSFZ1YTJsdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJRjlwZEdWeVlYUnZjaUE5SUdacGJHVnpXMU41YldKdmJDNXBkR1Z5WVhSdmNsMG9LU3dnWDNOMFpYQTdJQ0VvWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUNoZmMzUmxjQ0E5SUY5cGRHVnlZWFJ2Y2k1dVpYaDBLQ2twTG1SdmJtVXBPeUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sc1pTQTlJRjl6ZEdWd0xuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1V1ZFhCc2IyRmtMblJ2ZEdGc0lDWW1JR1pwYkdVdWRYQnNiMkZrTG1KNWRHVnpVMlZ1ZENBbUppQm1hV3hsTG5Wd2JHOWhaQzVpZVhSbGMxTmxiblFnUFQwZ1ptbHNaUzUxY0d4dllXUXVkRzkwWVd3cElHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5Wd2JHOWhaQzV3Y205bmNtVnpjeUE5SURFd01DQXFJR1V1Ykc5aFpHVmtJQzhnWlM1MGIzUmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMblZ3Ykc5aFpDNTBiM1JoYkNBOUlHVXVkRzkwWVd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1MWNHeHZZV1F1WW5sMFpYTlRaVzUwSUQwZ1pTNXNiMkZrWldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTV2SUdWMlpXNTBMQ0J6YnlCM1pTZHlaU0JoZENBeE1EQWxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNTFjR3h2WVdRdWNISnZaM0psYzNNZ1BTQXhNREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaUzUxY0d4dllXUXVZbmwwWlhOVFpXNTBJRDBnWm1sc1pTNTFjR3h2WVdRdWRHOTBZV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvWENKMWNHeHZZV1J3Y205bmNtVnpjMXdpTENCbWFXeGxMQ0JtYVd4bExuVndiRzloWkM1d2NtOW5jbVZ6Y3l3Z1ptbHNaUzUxY0d4dllXUXVZbmwwWlhOVFpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQW1KaUJmYVhSbGNtRjBiM0l1Y21WMGRYSnVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCSVlXNWtiR1VnWTJoMWJtdGxaQ0JtYVd4bElIVndiRzloWkhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUTJoMWJtdGxaQ0IxY0d4dllXUWdhWE1nYm05MElHTnZiWEJoZEdsaWJHVWdkMmwwYUNCMWNHeHZZV1JwYm1jZ2JYVnNkR2x3YkdVZ1ptbHNaWE1nYVc0Z2IyNWxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklISmxjWFZsYzNRc0lITnZJSGRsSUd0dWIzY2dkR2hsY21VbmN5QnZibXg1SUc5dVpTQm1hV3hsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sc1pTQTlJR1pwYkdWeld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRhVzVqWlNCMGFHbHpJR2x6SUdFZ1kyaDFibXRsWkNCMWNHeHZZV1FzSUhkbElHNWxaV1FnZEc4Z2RYQmtZWFJsSUhSb1pTQmhjSEJ5YjNCeWFXRjBaU0JqYUhWdWExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCd2NtOW5jbVZ6Y3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOb2RXNXJJRDBnZEdocGN5NWZaMlYwUTJoMWJtc29abWxzWlN3Z2VHaHlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2RXNXJMbkJ5YjJkeVpYTnpJRDBnTVRBd0lDb2daUzVzYjJGa1pXUWdMeUJsTG5SdmRHRnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmgxYm1zdWRHOTBZV3dnUFNCbExuUnZkR0ZzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJoMWJtc3VZbmwwWlhOVFpXNTBJRDBnWlM1c2IyRmtaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk9ieUJsZG1WdWRDd2djMjhnZDJVbmNtVWdZWFFnTVRBd0pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaDFibXN1Y0hKdlozSmxjM01nUFNBeE1EQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphSFZ1YXk1aWVYUmxjMU5sYm5RZ1BTQmphSFZ1YXk1MGIzUmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCT2IzY2dkR0ZzYkhrZ2RHaGxJQ3BtYVd4bEtpQjFjR3h2WVdRZ2NISnZaM0psYzNNZ1puSnZiU0JwZEhNZ2FXNWthWFpwWkhWaGJDQmphSFZ1YTNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1MWNHeHZZV1F1Y0hKdlozSmxjM01nUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuVndiRzloWkM1MGIzUmhiQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWRYQnNiMkZrTG1KNWRHVnpVMlZ1ZENBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnYVNBOUlEQTdJR2tnUENCbWFXeGxMblZ3Ykc5aFpDNTBiM1JoYkVOb2RXNXJRMjkxYm5RN0lHa3JLeWxwWmlBb1ptbHNaUzUxY0d4dllXUXVZMmgxYm10elcybGRJQ1ltSUhSNWNHVnZaaUJtYVd4bExuVndiRzloWkM1amFIVnVhM05iYVYwdWNISnZaM0psYzNNZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZFhCc2IyRmtMbkJ5YjJkeVpYTnpJQ3M5SUdacGJHVXVkWEJzYjJGa0xtTm9kVzVyYzF0cFhTNXdjbTluY21WemN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZFhCc2IyRmtMblJ2ZEdGc0lDczlJR1pwYkdVdWRYQnNiMkZrTG1Ob2RXNXJjMXRwWFM1MGIzUmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwYkdVdWRYQnNiMkZrTG1KNWRHVnpVMlZ1ZENBclBTQm1hV3hsTG5Wd2JHOWhaQzVqYUhWdWEzTmJhVjB1WW5sMFpYTlRaVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGTnBibU5sSUhSb1pTQndjbTlqWlhOeklHbHpJR0VnY0dWeVkyVnVkR0ZuWlN3Z2QyVWdibVZsWkNCMGJ5QmthWFpwWkdVZ1lua2dkR2hsSUdGdGIzVnVkQ0J2Wmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYUhWdWEzTWdkMlVuZG1VZ2RYTmxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaUzUxY0d4dllXUXVjSEp2WjNKbGMzTWdQU0JtYVd4bExuVndiRzloWkM1d2NtOW5jbVZ6Y3lBdklHWnBiR1V1ZFhCc2IyRmtMblJ2ZEdGc1EyaDFibXREYjNWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwS0Z3aWRYQnNiMkZrY0hKdlozSmxjM05jSWl3Z1ptbHNaU3dnWm1sc1pTNTFjR3h2WVdRdWNISnZaM0psYzNNc0lHWnBiR1V1ZFhCc2IyRmtMbUo1ZEdWelUyVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2lYMlpwYm1semFHVmtWWEJzYjJGa2FXNW5YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1gyWnBibWx6YUdWa1ZYQnNiMkZrYVc1bktHWnBiR1Z6TENCNGFISXNJR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dacGJHVnpXekJkTG5OMFlYUjFjeUE5UFQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVEUVU1RFJVeEZSQ2tnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoNGFISXVjbVZoWkhsVGRHRjBaU0FoUFQwZ05Da2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2g0YUhJdWNtVnpjRzl1YzJWVWVYQmxJQ0U5UFNCY0ltRnljbUY1WW5WbVptVnlYQ0lnSmlZZ2VHaHlMbkpsYzNCdmJuTmxWSGx3WlNBaFBUMGdYQ0ppYkc5aVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJVZ1BTQjRhSEl1Y21WemNHOXVjMlZVWlhoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VHaHlMbWRsZEZKbGMzQnZibk5sU0dWaFpHVnlLRndpWTI5dWRHVnVkQzEwZVhCbFhDSXBJQ1ltSUg1NGFISXVaMlYwVW1WemNHOXVjMlZJWldGa1pYSW9YQ0pqYjI1MFpXNTBMWFI1Y0dWY0lpa3VhVzVrWlhoUFppaGNJbUZ3Y0d4cFkyRjBhVzl1TDJwemIyNWNJaWtwSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpTQTlJRXBUVDA0dWNHRnljMlVvY21WemNHOXVjMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pTQTlJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpjRzl1YzJVZ1BTQmNJa2x1ZG1Gc2FXUWdTbE5QVGlCeVpYTndiMjV6WlNCbWNtOXRJSE5sY25abGNpNWNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHUmhkR1ZHYVd4bGMxVndiRzloWkZCeWIyZHlaWE56S0dacGJHVnpMQ0I0YUhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0RJd01DQThQU0I0YUhJdWMzUmhkSFZ6SUNZbUlIaG9jaTV6ZEdGMGRYTWdQQ0F6TURBcEtTQjBhR2x6TGw5b1lXNWtiR1ZWY0d4dllXUkZjbkp2Y2lobWFXeGxjeXdnZUdoeUxDQnlaWE53YjI1elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9abWxzWlhOYk1GMHVkWEJzYjJGa0xtTm9kVzVyWldRcElHWnBiR1Z6V3pCZExuVndiRzloWkM1bWFXNXBjMmhsWkVOb2RXNXJWWEJzYjJGa0tIUm9hWE11WDJkbGRFTm9kVzVyS0dacGJHVnpXekJkTENCNGFISXBMQ0J5WlhOd2IyNXpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjBhR2x6TGw5bWFXNXBjMmhsWkNobWFXeGxjeXdnY21WemNHOXVjMlVzSUdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpWDJoaGJtUnNaVlZ3Ykc5aFpFVnljbTl5WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdYMmhoYm1Sc1pWVndiRzloWkVWeWNtOXlLR1pwYkdWekxDQjRhSElzSUhKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1pwYkdWeld6QmRMbk4wWVhSMWN5QTlQVDBnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNURRVTVEUlV4RlJDa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htYVd4bGMxc3dYUzUxY0d4dllXUXVZMmgxYm10bFpDQW1KaUIwYUdsekxtOXdkR2x2Ym5NdWNtVjBjbmxEYUhWdWEzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05vZFc1cklEMGdkR2hwY3k1ZloyVjBRMmgxYm1zb1ptbHNaWE5iTUYwc0lIaG9jaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvWTJoMWJtc3VjbVYwY21sbGN5c3JLU0E4SUhSb2FYTXViM0IwYVc5dWN5NXlaWFJ5ZVVOb2RXNXJjMHhwYldsMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MWNHeHZZV1JFWVhSaEtHWnBiR1Z6TENCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmgxYm1zdVpHRjBZVUpzYjJOclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHTnZibk52YkdVdWQyRnliaWhjSWxKbGRISnBaV1FnZEdocGN5QmphSFZ1YXlCMGIyOGdiMlowWlc0dUlFZHBkbWx1WnlCMWNDNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZ5Y205eVVISnZZMlZ6YzJsdVp5aG1hV3hsY3l3Z2NtVnpjRzl1YzJVZ2ZId2dkR2hwY3k1dmNIUnBiMjV6TG1ScFkzUlNaWE53YjI1elpVVnljbTl5TG5KbGNHeGhZMlVvWENKN2UzTjBZWFIxYzBOdlpHVjlmVndpTENCNGFISXVjM1JoZEhWektTd2dlR2h5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbk4xWW0xcGRGSmxjWFZsYzNSY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ6ZFdKdGFYUlNaWEYxWlhOMEtIaG9jaXdnWm05eWJVUmhkR0VzSUdacGJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIaG9jaTV5WldGa2VWTjBZWFJsSUNFOUlERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRndpUTJGdWJtOTBJSE5sYm1RZ2RHaHBjeUJ5WlhGMVpYTjBJR0psWTJGMWMyVWdkR2hsSUZoTlRFaDBkSEJTWlhGMVpYTjBMbkpsWVdSNVUzUmhkR1VnYVhNZ2JtOTBJRTlRUlU1RlJDNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aWFXNWhjbmxDYjJSNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1hV3hsYzFzd1hTNTFjR3h2WVdRdVkyaDFibXRsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05vZFc1cklEMGdkR2hwY3k1ZloyVjBRMmgxYm1zb1ptbHNaWE5iTUYwc0lIaG9jaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0YUhJdWMyVnVaQ2hqYUhWdWF5NWtZWFJoUW14dlkyc3VaR0YwWVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjRhSEl1YzJWdVpDaG1hV3hsYzFzd1hTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIaG9jaTV6Wlc1a0tHWnZjbTFFWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZzYkdWa0lHbHVkR1Z5Ym1Gc2JIa2dkMmhsYmlCd2NtOWpaWE56YVc1bklHbHpJR1pwYm1semFHVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTVzVrYVhacFpIVmhiQ0JqWVd4c1ltRmphM01nYUdGMlpTQjBieUJpWlNCallXeHNaV1FnYVc0Z2RHaGxJR0Z3Y0hKdmNISnBZWFJsSUhObFkzUnBiMjV6TGx4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0lsOW1hVzVwYzJobFpGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUY5bWFXNXBjMmhsWkNobWFXeGxjeXdnY21WemNHOXVjMlZVWlhoMExDQmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQjBjblZsTENCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlHWmhiSE5sTENCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9kbUZ5SUY5cGRHVnlZWFJ2Y2lBOUlHWnBiR1Z6VzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1N3Z1gzTjBaWEE3SUNFb1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlDaGZjM1JsY0NBOUlGOXBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVVwT3lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ptbHNaU0E5SUY5emRHVndMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaUzV6ZEdGMGRYTWdQU0FrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUxsTlZRME5GVTFNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb1hDSnpkV05qWlhOelhDSXNJR1pwYkdVc0lISmxjM0J2Ym5ObFZHVjRkQ3dnWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb1hDSmpiMjF3YkdWMFpWd2lMQ0JtYVd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ1pYSnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFgybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBbUppQmZhWFJsY21GMGIzSXVjbVYwZFhKdUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0l1Y21WMGRYSnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUY5cGRHVnlZWFJ2Y2tWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdWRYQnNiMkZrVFhWc2RHbHdiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJXbDBLRndpYzNWalkyVnpjMjExYkhScGNHeGxYQ0lzSUdacGJHVnpMQ0J5WlhOd2IyNXpaVlJsZUhRc0lHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb1hDSmpiMjF3YkdWMFpXMTFiSFJwY0d4bFhDSXNJR1pwYkdWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWhkWFJ2VUhKdlkyVnpjMUYxWlhWbEtTQnlaWFIxY200Z2RHaHBjeTV3Y205alpYTnpVWFZsZFdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZzYkdWa0lHbHVkR1Z5Ym1Gc2JIa2dkMmhsYmlCd2NtOWpaWE56YVc1bklHbHpJR1pwYm1semFHVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTVzVrYVhacFpIVmhiQ0JqWVd4c1ltRmphM01nYUdGMlpTQjBieUJpWlNCallXeHNaV1FnYVc0Z2RHaGxJR0Z3Y0hKdmNISnBZWFJsSUhObFkzUnBiMjV6TGx4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCY0lsOWxjbkp2Y2xCeWIyTmxjM05wYm1kY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJmWlhKeWIzSlFjbTlqWlhOemFXNW5LR1pwYkdWekxDQnRaWE56WVdkbExDQjRhSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVc0lGOWthV1JKZEdWeVlYUnZja1Z5Y205eUlEMGdabUZzYzJVc0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ1gybDBaWEpoZEc5eUlEMGdabWxzWlhOYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNncExDQmZjM1JsY0RzZ0lTaGZhWFJsY21GMGIzSk9iM0p0WVd4RGIyMXdiR1YwYVc5dUlEMGdLRjl6ZEdWd0lEMGdYMmwwWlhKaGRHOXlMbTVsZUhRb0tTa3VaRzl1WlNrN0lGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQjBjblZsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1hV3hsSUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsTG5OMFlYUjFjeUE5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VSVkpTVDFJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb1hDSmxjbkp2Y2x3aUxDQm1hV3hsTENCdFpYTnpZV2RsTENCNGFISXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJXbDBLRndpWTI5dGNHeGxkR1ZjSWl3Z1ptbHNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVhSbGNtRjBiM0pGY25KdmNpQTlJR1Z5Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdKaVlnWDJsMFpYSmhkRzl5TG5KbGRIVnliaUFoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gyUnBaRWwwWlhKaGRHOXlSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QmZhWFJsY21GMGIzSkZjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblZ3Ykc5aFpFMTFiSFJwY0d4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENoY0ltVnljbTl5YlhWc2RHbHdiR1ZjSWl3Z1ptbHNaWE1zSUcxbGMzTmhaMlVzSUhob2NpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwZENoY0ltTnZiWEJzWlhSbGJYVnNkR2x3YkdWY0lpd2dabWxzWlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxtRjFkRzlRY205alpYTnpVWFZsZFdVcElISmxkSFZ5YmlCMGFHbHpMbkJ5YjJObGMzTlJkV1YxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnWFN3Z1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYazZJRndpYVc1cGRFTnNZWE56WENJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdhVzVwZEVOc1lYTnpLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFVjRjRzl6YVc1bklIUm9aU0JsYldsMGRHVnlJR05zWVhOekxDQnRZV2x1YkhrZ1ptOXlJSFJsYzNSelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y205MGIzUjVjR1V1UlcxcGRIUmxjaUE5SUNSaU1XUXhOMk5tWWpGa01UVmpNelpoSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeXBjYmlBZ0lDQWdWR2hwY3lCcGN5QmhJR3hwYzNRZ2IyWWdZV3hzSUdGMllXbHNZV0pzWlNCbGRtVnVkSE1nZVc5MUlHTmhiaUJ5WldkcGMzUmxjaUJ2YmlCaElHUnliM0I2YjI1bElHOWlhbVZqZEM1Y2JseHVJQ0FnSUNCWmIzVWdZMkZ1SUhKbFoybHpkR1Z5SUdGdUlHVjJaVzUwSUdoaGJtUnNaWElnYkdsclpTQjBhR2x6T2x4dVhHNGdJQ0FnSUdSeWIzQjZiMjVsTG05dUtGd2laSEpoWjBWdWRHVnlYQ0lzSUdaMWJtTjBhVzl1S0NrZ2V5QjlLVHRjYmx4dUlDQWdJQ0FxTHlCMGFHbHpMbkJ5YjNSdmRIbHdaUzVsZG1WdWRITWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2laSEp2Y0Z3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW1SeVlXZHpkR0Z5ZEZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW1SeVlXZGxibVJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0prY21GblpXNTBaWEpjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0prY21GbmIzWmxjbHdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbVJ5WVdkc1pXRjJaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbUZrWkdWa1ptbHNaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbUZrWkdWa1ptbHNaWE5jSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0p5WlcxdmRtVmtabWxzWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5Sb2RXMWlibUZwYkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW1WeWNtOXlYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2laWEp5YjNKdGRXeDBhWEJzWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5CeWIyTmxjM05wYm1kY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKd2NtOWpaWE56YVc1bmJYVnNkR2x3YkdWY0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKMWNHeHZZV1J3Y205bmNtVnpjMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJblJ2ZEdGc2RYQnNiMkZrY0hKdlozSmxjM05jSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0p6Wlc1a2FXNW5YQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2ljMlZ1WkdsdVoyMTFiSFJwY0d4bFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWMzVmpZMlZ6YzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5OMVkyTmxjM050ZFd4MGFYQnNaVndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbU5oYm1ObGJHVmtYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lZMkZ1WTJWc1pXUnRkV3gwYVhCc1pWd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0ltTnZiWEJzWlhSbFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVkyOXRjR3hsZEdWdGRXeDBhWEJzWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5KbGMyVjBYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2liV0Y0Wm1sc1pYTmxlR05sWldSbFpGd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0ltMWhlR1pwYkdWemNtVmhZMmhsWkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSW5GMVpYVmxZMjl0Y0d4bGRHVmNJaXdnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNSdmRIbHdaUzVmZEdoMWJXSnVZV2xzVVhWbGRXVWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNSdmRIbHdaUzVmY0hKdlkyVnpjMmx1WjFSb2RXMWlibUZwYkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklGd2lkWFZwWkhZMFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnZFhWcFpIWTBLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSW5oNGVIaDRlSGg0TFhoNGVIZ3ROSGg0ZUMxNWVIaDRMWGg0ZUhoNGVIaDRlSGg0ZUZ3aUxuSmxjR3hoWTJVb0wxdDRlVjB2Wnl3Z1puVnVZM1JwYjI0b1l5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjaUE5SUUxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TmlCOElEQXNJSFlnUFNCaklEMDlQU0JjSW5oY0lpQS9JSElnT2lCeUlDWWdNeUI4SURnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJMblJ2VTNSeWFXNW5LREUyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUYwcE8xeHVJQ0FnSUhKbGRIVnliaUFrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNU8xeHVmU2drWWpGa01UZGpabUl4WkRFMVl6TTJZU1JsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUtUdGNiaVJoTmpBeFptWXpNR1kwT0RObE9URTNKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprdWFXNXBkRU5zWVhOektDazdYRzR2THlCVWFHbHpJR2x6SUdFZ2JXRndJRzltSUc5d2RHbHZibk1nWm05eUlIbHZkWElnWkdsbVptVnlaVzUwSUdSeWIzQjZiMjVsY3k0Z1FXUmtJR052Ym1acFozVnlZWFJwYjI1elhHNHZMeUIwYnlCMGFHbHpJRzlpYW1WamRDQm1iM0lnZVc5MWNpQmthV1ptWlhKbGJuUWdaSEp2Y0hwdmJtVWdaV3hsYldWdWN5NWNiaTh2WEc0dkx5QkZlR0Z0Y0d4bE9seHVMeTljYmk4dklDQWdJQ0JFY205d2VtOXVaUzV2Y0hScGIyNXpMbTE1UkhKdmNIcHZibVZGYkdWdFpXNTBTV1FnUFNCN0lHMWhlRVpwYkdWemFYcGxPaUF4SUgwN1hHNHZMMXh1THk4Z1FXNWtJR2x1SUdoMGJXdzZYRzR2TDF4dUx5OGdJQ0FnSUR4bWIzSnRJR0ZqZEdsdmJqMWNJaTkxY0d4dllXUmNJaUJwWkQxY0ltMTVMV1J5YjNCNmIyNWxMV1ZzWlcxbGJuUXRhV1JjSWlCamJHRnpjejFjSW1SeWIzQjZiMjVsWENJK1BDOW1iM0p0UGx4dUpHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzV2Y0hScGIyNXpJRDBnZTF4dWZUdGNiaTh2SUZKbGRIVnlibk1nZEdobElHOXdkR2x2Ym5NZ1ptOXlJR0Z1SUdWc1pXMWxiblFnYjNJZ2RXNWtaV1pwYm1Wa0lHbG1JRzV2Ym1VZ1lYWmhhV3hoWW14bExseHVKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1dmNIUnBiMjV6Um05eVJXeGxiV1Z1ZENBOUlHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNiaUFnSUNBdkx5QkhaWFFnZEdobElHQkVjbTl3ZW05dVpTNXZjSFJwYjI1ekxtVnNaVzFsYm5SSlpHQWdabTl5SUhSb2FYTWdaV3hsYldWdWRDQnBaaUJwZENCbGVHbHpkSE5jYmlBZ0lDQnBaaUFvWld4bGJXVnVkQzVuWlhSQmRIUnlhV0oxZEdVb1hDSnBaRndpS1NrZ2NtVjBkWEp1SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3ViM0IwYVc5dWMxc2tZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWTJGdFpXeHBlbVVvWld4bGJXVnVkQzVuWlhSQmRIUnlhV0oxZEdVb1hDSnBaRndpS1NsZE8xeHVJQ0FnSUdWc2MyVWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNibjA3WEc0dkx5QkliMnhrY3lCaElHeHBjM1FnYjJZZ1lXeHNJR1J5YjNCNmIyNWxJR2x1YzNSaGJtTmxjMXh1SkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNXBibk4wWVc1alpYTWdQU0JiWFR0Y2JpOHZJRkpsZEhWeWJuTWdkR2hsSUdSeWIzQjZiMjVsSUdadmNpQm5hWFpsYmlCbGJHVnRaVzUwSUdsbUlHRnVlVnh1SkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNW1iM0pGYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvWld4bGJXVnVkQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWld4bGJXVnVkQ0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2daV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnYVdZZ0tDaGxiR1Z0Wlc1MElDRTlJRzUxYkd3Z1B5QmxiR1Z0Wlc1MExtUnliM0I2YjI1bElEb2dkVzVrWldacGJtVmtLU0E5UFNCdWRXeHNLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pPYnlCRWNtOXdlbTl1WlNCbWIzVnVaQ0JtYjNJZ1oybDJaVzRnWld4bGJXVnVkQzRnVkdocGN5QnBjeUJ3Y205aVlXSnNlU0JpWldOaGRYTmxJSGx2ZFNkeVpTQjBjbmxwYm1jZ2RHOGdZV05qWlhOeklHbDBJR0psWm05eVpTQkVjbTl3ZW05dVpTQm9ZV1FnZEdobElIUnBiV1VnZEc4Z2FXNXBkR2xoYkdsNlpTNGdWWE5sSUhSb1pTQmdhVzVwZEdBZ2IzQjBhVzl1SUhSdklITmxkSFZ3SUdGdWVTQmhaR1JwZEdsdmJtRnNJRzlpYzJWeWRtVnljeUJ2YmlCNWIzVnlJRVJ5YjNCNmIyNWxMbHdpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWRDNWtjbTl3ZW05dVpUdGNibjA3WEc0dkx5Qk1iMjlyY3lCbWIzSWdZV3hzSUM1a2NtOXdlbTl1WlNCbGJHVnRaVzUwY3lCaGJtUWdZM0psWVhSbGN5QmhJR1J5YjNCNmIyNWxJR1p2Y2lCMGFHVnRYRzRrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUxtUnBjMk52ZG1WeUlEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdkbUZ5SUdSeWIzQjZiMjVsY3p0Y2JpQWdJQ0JwWmlBb1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNrZ1pISnZjSHB2Ym1WeklEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaGNJaTVrY205d2VtOXVaVndpS1R0Y2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdaSEp2Y0hwdmJtVnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDOHZJRWxGSURvb1hHNGdJQ0FnSUNBZ0lIWmhjaUJqYUdWamEwVnNaVzFsYm5SeklEMGdablZ1WTNScGIyNG9aV3hsYldWdWRITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnZEhKMVpTd2dYMlJwWkVsMFpYSmhkRzl5UlhKeWIzSWdQU0JtWVd4elpTd2dYMmwwWlhKaGRHOXlSWEp5YjNJZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQmZhWFJsY21GMGIzSWdQU0JsYkdWdFpXNTBjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWc0lEMGdYM04wWlhBdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0x5aGVmQ0FwWkhKdmNIcHZibVVvSkh3Z0tTOHVkR1Z6ZENobGJDNWpiR0Z6YzA1aGJXVXBLU0J5WlhOMWJIUXVjSFZ6YUNoa2NtOXdlbTl1WlhNdWNIVnphQ2hsYkNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0J5WlhOMWJIUXVjSFZ6YUNoMWJtUmxabWx1WldRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5a2FXUkpkR1Z5WVhSdmNrVnljbTl5SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eVJYSnliM0lnUFNCbGNuSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUNZbUlGOXBkR1Z5WVhSdmNpNXlaWFIxY200Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZjaTV5WlhSMWNtNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnWDJsMFpYSmhkRzl5UlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHTm9aV05yUld4bGJXVnVkSE1vWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb1hDSmthWFpjSWlrcE8xeHVJQ0FnSUNBZ0lDQmphR1ZqYTBWc1pXMWxiblJ6S0dSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtGd2labTl5YlZ3aUtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUFvWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbExDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJR1poYkhObExDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdYMmwwWlhKaGRHOXlJRDBnWkhKdmNIcHZibVZ6VzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1N3Z1gzTjBaWEE3SUNFb1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlDaGZjM1JsY0NBOUlGOXBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVVwT3lCZmFYUmxjbUYwYjNKT2IzSnRZV3hEYjIxd2JHVjBhVzl1SUQwZ2RISjFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUnliM0I2YjI1bElEMGdYM04wWlhBdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1EzSmxZWFJsSUdFZ1pISnZjSHB2Ym1VZ2RXNXNaWE56SUdGMWRHOGdaR2x6WTI5MlpYSWdhR0Z6SUdKbFpXNGdaR2x6WVdKc1pXUWdabTl5SUhOd1pXTnBabWxqSUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzV2Y0hScGIyNXpSbTl5Uld4bGJXVnVkQ2hrY205d2VtOXVaU2tnSVQwOUlHWmhiSE5sS1NCeVpYTjFiSFF1Y0hWemFDaHVaWGNnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TaGtjbTl3ZW05dVpTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2NtVnpkV3gwTG5CMWMyZ29kVzVrWldacGJtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUdWeWNqdGNiaUFnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lWOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z0ppWWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5cGRHVnlZWFJ2Y2k1eVpYUjFjbTRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOWthV1JKZEdWeVlYUnZja1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRjlwZEdWeVlYUnZja1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDBwS0NrN1hHNTlPMXh1THk4Z1UyOXRaU0JpY205M2MyVnljeUJ6ZFhCd2IzSjBJR1J5WVdjZ1lXNWtJR1J5YjJjZ1puVnVZM1JwYjI1aGJHbDBlU3dnWW5WMElHNXZkQ0JqYjNKeVpXTjBiSGt1WEc0dkwxeHVMeThnVTI4Z1NTQmpjbVZoZEdWa0lHRWdZbXh2WTJ0c2FYTjBJRzltSUhWelpYSkJaMlZ1ZEhNdUlGbGxjeXdnZVdWekxpQkNjbTkzYzJWeUlITnVhV1ptYVc1bkxDQkpJR3R1YjNjdVhHNHZMeUJDZFhRZ2QyaGhkQ0IwYnlCa2J5QjNhR1Z1SUdKeWIzZHpaWEp6SUNwMGFHVnZjbVYwYVdOaGJHeDVLaUJ6ZFhCd2IzSjBJR0Z1SUVGUVNTd2dZblYwSUdOeVlYTm9YRzR2THlCM2FHVnVJSFZ6YVc1bklHbDBMbHh1THk5Y2JpOHZJRlJvYVhNZ2FYTWdZU0JzYVhOMElHOW1JSEpsWjNWc1lYSWdaWGh3Y21WemMybHZibk1nZEdWemRHVmtJR0ZuWVdsdWMzUWdibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkRnh1THk5Y2JpOHZJQ29xSUVsMElITm9iM1ZzWkNCdmJteDVJR0psSUhWelpXUWdiMjRnWW5KdmQzTmxjaUIwYUdGMElDcGtieW9nYzNWd2NHOXlkQ0IwYUdVZ1FWQkpMQ0JpZFhSY2JpOHZJR2x1WTI5eWNtVmpkR3g1SUNvcVhHNGtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TG1Kc2IyTnJaV1JDY205M2MyVnljeUE5SUZ0Y2JpQWdJQ0F2THlCVWFHVWdiV0ZqSUc5eklHRnVaQ0IzYVc1a2IzZHpJSEJvYjI1bElIWmxjbk5wYjI0Z2IyWWdiM0JsY21FZ01USWdjMlZsYlhNZ2RHOGdhR0YyWlNCaElIQnliMkpzWlcwZ2QybDBhQ0IwYUdVZ1JtbHNaU0JrY21GbkoyNG5aSEp2Y0NCQlVFa3VYRzRnSUNBZ0wyOXdaWEpoTGlvb1RXRmphVzUwYjNOb2ZGZHBibVJ2ZDNNZ1VHaHZibVVwTGlwMlpYSnphVzl1WEZ3dk1USXZhU3dnWEc1ZE8xeHVMeThnUTJobFkydHpJR2xtSUhSb1pTQmljbTkzYzJWeUlHbHpJSE4xY0hCdmNuUmxaRnh1SkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNXBjMEp5YjNkelpYSlRkWEJ3YjNKMFpXUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0IyWVhJZ1kyRndZV0pzWlVKeWIzZHpaWElnUFNCMGNuVmxPMXh1SUNBZ0lHbG1JQ2gzYVc1a2IzY3VSbWxzWlNBbUppQjNhVzVrYjNjdVJtbHNaVkpsWVdSbGNpQW1KaUIzYVc1a2IzY3VSbWxzWlV4cGMzUWdKaVlnZDJsdVpHOTNMa0pzYjJJZ0ppWWdkMmx1Wkc5M0xrWnZjbTFFWVhSaElDWW1JR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb1hDSmpiR0Z6YzB4cGMzUmNJaUJwYmlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWVZ3aUtTa3BJR05oY0dGaWJHVkNjbTkzYzJWeUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VZbXhoWTJ0c2FYTjBaV1JDY205M2MyVnljeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQXZMeUJUYVc1alpTQjBhR2x6SUdoaGN5QmlaV1Z1SUhKbGJtRnRaV1FzSUhSb2FYTWdiV0ZyWlhNZ2MzVnlaU0IzWlNCa2IyNG5kQ0JpY21WaGF5QnZiR1JsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWTI5dVptbG5kWEpoZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0FnSUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VZbXh2WTJ0bFpFSnliM2R6WlhKeklEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1aWJHRmphMnhwYzNSbFpFSnliM2R6WlhKek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQjBjblZsTENCZlpHbGtTWFJsY21GMGIzSkZjbkp2Y2lBOUlHWmhiSE5sTENCZmFYUmxjbUYwYjNKRmNuSnZjaUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hsSUdKeWIzZHpaWElnYzNWd2NHOXlkSE1nZEdobElFRlFTU3dnWW5WMElHMWhlU0JpWlNCaWJHOWphMlZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVpYkc5amEyVmtRbkp2ZDNObGNuTmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmYzNSbGNEc2dJU2hmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnS0Y5emRHVndJRDBnWDJsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpTazdJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaMlY0SUQwZ1gzTjBaWEF1ZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV2RsZUM1MFpYTjBLRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYQmhZbXhsUW5KdmQzTmxjaUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybDBaWEpoZEc5eVJYSnliM0lnUFNCbGNuSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJQ1ltSUY5cGRHVnlZWFJ2Y2k1eVpYUjFjbTRnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsMFpYSmhkRzl5TG5KbGRIVnliaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JtYVc1aGJHeDVlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9YMlJwWkVsMFpYSmhkRzl5UlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUdOaGNHRmliR1ZDY205M2MyVnlJRDBnWm1Gc2MyVTdYRzRnSUNBZ2NtVjBkWEp1SUdOaGNHRmliR1ZDY205M2MyVnlPMXh1ZlR0Y2JpUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1WkdGMFlWVlNTWFJ2UW14dllpQTlJR1oxYm1OMGFXOXVLR1JoZEdGVlVra3BJSHRjYmlBZ0lDQXZMeUJqYjI1MlpYSjBJR0poYzJVMk5DQjBieUJ5WVhjZ1ltbHVZWEo1SUdSaGRHRWdhR1ZzWkNCcGJpQmhJSE4wY21sdVoxeHVJQ0FnSUM4dklHUnZaWE51SjNRZ2FHRnVaR3hsSUZWU1RFVnVZMjlrWldRZ1JHRjBZVlZTU1hNZ0xTQnpaV1VnVTA4Z1lXNXpkMlZ5SUNNMk9EVXdNamMySUdadmNpQmpiMlJsSUhSb1lYUWdaRzlsY3lCMGFHbHpYRzRnSUNBZ2RtRnlJR0o1ZEdWVGRISnBibWNnUFNCaGRHOWlLR1JoZEdGVlVra3VjM0JzYVhRb1hDSXNYQ0lwV3pGZEtUdGNiaUFnSUNBdkx5QnpaWEJoY21GMFpTQnZkWFFnZEdobElHMXBiV1VnWTI5dGNHOXVaVzUwWEc0Z0lDQWdkbUZ5SUcxcGJXVlRkSEpwYm1jZ1BTQmtZWFJoVlZKSkxuTndiR2wwS0Z3aUxGd2lLVnN3WFM1emNHeHBkQ2hjSWpwY0lpbGJNVjB1YzNCc2FYUW9YQ0k3WENJcFd6QmRPMXh1SUNBZ0lDOHZJSGR5YVhSbElIUm9aU0JpZVhSbGN5QnZaaUIwYUdVZ2MzUnlhVzVuSUhSdklHRnVJRUZ5Y21GNVFuVm1abVZ5WEc0Z0lDQWdkbUZ5SUdGaUlEMGdibVYzSUVGeWNtRjVRblZtWm1WeUtHSjVkR1ZUZEhKcGJtY3ViR1Z1WjNSb0tUdGNiaUFnSUNCMllYSWdhV0VnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hoWWlrN1hHNGdJQ0FnWm05eUtIWmhjaUJwSUQwZ01Dd2daVzVrSUQwZ1lubDBaVk4wY21sdVp5NXNaVzVuZEdnc0lHRnpZeUE5SURBZ1BEMGdaVzVrT3lCaGMyTWdQeUJwSUR3OUlHVnVaQ0E2SUdrZ1BqMGdaVzVrT3lCaGMyTWdQeUJwS3lzZ09pQnBMUzBwYVdGYmFWMGdQU0JpZVhSbFUzUnlhVzVuTG1Ob1lYSkRiMlJsUVhRb2FTazdYRzRnSUNBZ0x5OGdkM0pwZEdVZ2RHaGxJRUZ5Y21GNVFuVm1abVZ5SUhSdklHRWdZbXh2WWx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnUW14dllpaGJYRzRnSUNBZ0lDQWdJR0ZpWEc0Z0lDQWdYU3dnZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJ0YVcxbFUzUnlhVzVuWEc0Z0lDQWdmU2s3WEc1OU8xeHVMeThnVW1WMGRYSnVjeUJoYmlCaGNuSmhlU0IzYVhSb2IzVjBJSFJvWlNCeVpXcGxZM1JsWkNCcGRHVnRYRzUyWVhJZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja2RtRnlKSGRwZEdodmRYUWdQU0JtZFc1amRHbHZiaWhzYVhOMExDQnlaV3BsWTNSbFpFbDBaVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiR2x6ZEM1bWFXeDBaWElvWm5WdVkzUnBiMjRvYVhSbGJTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsYlNBaFBUMGdjbVZxWldOMFpXUkpkR1Z0TzF4dUlDQWdJSDBwTG0xaGNDaG1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGRHVnRPMXh1SUNBZ0lIMHBPMXh1ZlR0Y2JpOHZJR0ZpWXkxa1pXWmZaMmhwSUMwK0lHRmlZMFJsWmtkb2FWeHVkbUZ5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkhaaGNpUmpZVzFsYkdsNlpTQTlJR1oxYm1OMGFXOXVLSE4wY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6ZEhJdWNtVndiR0ZqWlNndlcxeGNMVjlkS0Z4Y2R5a3ZaeXdnWm5WdVkzUnBiMjRvYldGMFkyZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFoZEdOb0xtTm9ZWEpCZENneEtTNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4dUlDQWdJSDBwTzF4dWZUdGNiaTh2SUVOeVpXRjBaWE1nWVc0Z1pXeGxiV1Z1ZENCbWNtOXRJSE4wY21sdVoxeHVKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1amNtVmhkR1ZGYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvYzNSeWFXNW5LU0I3WEc0Z0lDQWdkbUZ5SUdScGRpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmthWFpjSWlrN1hHNGdJQ0FnWkdsMkxtbHVibVZ5U0ZSTlRDQTlJSE4wY21sdVp6dGNiaUFnSUNCeVpYUjFjbTRnWkdsMkxtTm9hV3hrVG05a1pYTmJNRjA3WEc1OU8xeHVMeThnVkdWemRITWdhV1lnWjJsMlpXNGdaV3hsYldWdWRDQnBjeUJwYm5OcFpHVWdLRzl5SUhOcGJYQnNlU0JwY3lrZ2RHaGxJR052Ym5SaGFXNWxjbHh1SkdFMk1ERm1aak13WmpRNE0yVTVNVGNrWlhod2IzSjBKREpsTW1KalpEZzNNemxoWlRBek9TNWxiR1Z0Wlc1MFNXNXphV1JsSUQwZ1puVnVZM1JwYjI0b1pXeGxiV1Z1ZEN3Z1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ2FXWWdLR1ZzWlcxbGJuUWdQVDA5SUdOdmJuUmhhVzVsY2lrZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDOHZJRU52Wm1abFpYTmpjbWx3ZENCa2IyVnpiaWQwSUhOMWNIQnZjblFnWkc4dmQyaHBiR1VnYkc5dmNITmNiaUFnSUNCM2FHbHNaU2hsYkdWdFpXNTBJRDBnWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsS1h0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUWdQVDA5SUdOdmJuUmhhVzVsY2lrZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibjA3WEc0a1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSbGVIQnZjblFrTW1VeVltTmtPRGN6T1dGbE1ETTVMbWRsZEVWc1pXMWxiblFnUFNCbWRXNWpkR2x2YmlobGJDd2dibUZ0WlNrZ2UxeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1ME8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pXd2dQVDA5SUZ3aWMzUnlhVzVuWENJcElHVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0dWc0tUdGNiaUFnSUNCbGJITmxJR2xtSUNobGJDNXViMlJsVkhsd1pTQWhQU0J1ZFd4c0tTQmxiR1Z0Wlc1MElEMGdaV3c3WEc0Z0lDQWdhV1lnS0dWc1pXMWxiblFnUFQwZ2JuVnNiQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpU1c1MllXeHBaQ0JnWENJdVkyOXVZMkYwS0c1aGJXVXNJRndpWUNCdmNIUnBiMjRnY0hKdmRtbGtaV1F1SUZCc1pXRnpaU0J3Y205MmFXUmxJR0VnUTFOVElITmxiR1ZqZEc5eUlHOXlJR0VnY0d4aGFXNGdTRlJOVENCbGJHVnRaVzUwTGx3aUtTazdYRzRnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblE3WEc1OU8xeHVKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1blpYUkZiR1Z0Wlc1MGN5QTlJR1oxYm1OMGFXOXVLR1ZzY3l3Z2JtRnRaU2tnZTF4dUlDQWdJSFpoY2lCbGJDd2daV3hsYldWdWRITTdYRzRnSUNBZ2FXWWdLR1ZzY3lCcGJuTjBZVzVqWlc5bUlFRnljbUY1S1NCN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdYMmwwWlhKaGRHOXlUbTl5YldGc1EyOXRjR3hsZEdsdmJpQTlJSFJ5ZFdVc0lGOWthV1JKZEdWeVlYUnZja1Z5Y205eUlEMGdabUZzYzJVc0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlGOXBkR1Z5WVhSdmNpQTlJR1ZzYzF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0Nrc0lGOXpkR1Z3T3lBaEtGOXBkR1Z5WVhSdmNrNXZjbTFoYkVOdmJYQnNaWFJwYjI0Z1BTQW9YM04wWlhBZ1BTQmZhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsS1RzZ1gybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBOUlIUnlkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiQ0E5SUY5emRHVndMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBjeTV3ZFhOb0tIUm9hWE11WjJWMFJXeGxiV1Z1ZENobGJDd2dibUZ0WlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSkZjbkp2Y2lBOUlHVnljanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnSmlZZ1gybDBaWEpoZEc5eUxuSmxkSFZ5YmlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFYUmxjbUYwYjNJdWNtVjBkWEp1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hmWkdsa1NYUmxjbUYwYjNKRmNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dYMmwwWlhKaGRHOXlSWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnNjeUE5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0JsYkdWdFpXNTBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjJZWElnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXNJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnWm1Gc2MyVXNJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUtIWmhjaUJmYVhSbGNtRjBiM0lnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0dWc2N5bGJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmYzNSbGNEc2dJU2hmYVhSbGNtRjBiM0pPYjNKdFlXeERiMjF3YkdWMGFXOXVJRDBnS0Y5emRHVndJRDBnWDJsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpTazdJRjlwZEdWeVlYUnZjazV2Y20xaGJFTnZiWEJzWlhScGIyNGdQU0IwY25WbEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiQ0E5SUY5emRHVndMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5SekxuQjFjMmdvWld3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOWthV1JKZEdWeVlYUnZja1Z5Y205eUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdaWEp5TzF4dUlDQWdJQ0FnSUNCOUlHWnBibUZzYkhsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUFtSmlCZmFYUmxjbUYwYjNJdWNtVjBkWEp1SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmwwWlhKaGRHOXlMbkpsZEhWeWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDJScFpFbDBaWEpoZEc5eVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1gybDBaWEpoZEc5eVJYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hsYkhNdWJtOWtaVlI1Y0dVZ0lUMGdiblZzYkNrZ1pXeGxiV1Z1ZEhNZ1BTQmJYRzRnSUNBZ0lDQWdJR1ZzYzF4dUlDQWdJRjA3WEc0Z0lDQWdhV1lnS0dWc1pXMWxiblJ6SUQwOUlHNTFiR3dnZkh3Z0lXVnNaVzFsYm5SekxteGxibWQwYUNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVNXNTJZV3hwWkNCZ1hDSXVZMjl1WTJGMEtHNWhiV1VzSUZ3aVlDQnZjSFJwYjI0Z2NISnZkbWxrWldRdUlGQnNaV0Z6WlNCd2NtOTJhV1JsSUdFZ1ExTlRJSE5sYkdWamRHOXlMQ0JoSUhCc1lXbHVJRWhVVFV3Z1pXeGxiV1Z1ZENCdmNpQmhJR3hwYzNRZ2IyWWdkR2h2YzJVdVhDSXBLVHRjYmlBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZEhNN1hHNTlPMXh1THk4Z1FYTnJjeUIwYUdVZ2RYTmxjaUIwYUdVZ2NYVmxjM1JwYjI0Z1lXNWtJR05oYkd4eklHRmpZMlZ3ZEdWa0lHOXlJSEpsYW1WamRHVmtJR0ZqWTI5eVpHbHVaMng1WEc0dkwxeHVMeThnVkdobElHUmxabUYxYkhRZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYW5WemRDQjFjMlZ6SUdCM2FXNWtiM2N1WTI5dVptbHliV0FnWVc1a0lIUm9aVzRnWTJGc2JITWdkR2hsWEc0dkx5QmhjSEJ5YjNCeWFXRjBaU0JqWVd4c1ltRmpheTVjYmlSaE5qQXhabVl6TUdZME9ETmxPVEUzSkdWNGNHOXlkQ1F5WlRKaVkyUTROek01WVdVd016a3VZMjl1Wm1seWJTQTlJR1oxYm1OMGFXOXVLSEYxWlhOMGFXOXVMQ0JoWTJObGNIUmxaQ3dnY21WcVpXTjBaV1FwSUh0Y2JpQWdJQ0JwWmlBb2QybHVaRzkzTG1OdmJtWnBjbTBvY1hWbGMzUnBiMjRwS1NCeVpYUjFjbTRnWVdOalpYQjBaV1FvS1R0Y2JpQWdJQ0JsYkhObElHbG1JQ2h5WldwbFkzUmxaQ0FoUFNCdWRXeHNLU0J5WlhSMWNtNGdjbVZxWldOMFpXUW9LVHRjYm4wN1hHNHZMeUJXWVd4cFpHRjBaWE1nZEdobElHMXBiV1VnZEhsd1pTQnNhV3RsSUhSb2FYTTZYRzR2TDF4dUx5OGdhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wlc0dFZWTXZaRzlqY3k5SVZFMU1MMFZzWlcxbGJuUXZhVzV3ZFhRallYUjBjaTFoWTJObGNIUmNiaVJoTmpBeFptWXpNR1kwT0RObE9URTNKR1Y0Y0c5eWRDUXlaVEppWTJRNE56TTVZV1V3TXprdWFYTldZV3hwWkVacGJHVWdQU0JtZFc1amRHbHZiaWhtYVd4bExDQmhZMk5sY0hSbFpFWnBiR1Z6S1NCN1hHNGdJQ0FnYVdZZ0tDRmhZMk5sY0hSbFpFWnBiR1Z6S1NCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0x5OGdTV1lnZEdobGNtVWdZWEpsSUc1dklHRmpZMlZ3ZEdWa0lHMXBiV1VnZEhsd1pYTXNJR2wwSjNNZ1QwdGNiaUFnSUNCaFkyTmxjSFJsWkVacGJHVnpJRDBnWVdOalpYQjBaV1JHYVd4bGN5NXpjR3hwZENoY0lpeGNJaWs3WEc0Z0lDQWdkbUZ5SUcxcGJXVlVlWEJsSUQwZ1ptbHNaUzUwZVhCbE8xeHVJQ0FnSUhaaGNpQmlZWE5sVFdsdFpWUjVjR1VnUFNCdGFXMWxWSGx3WlM1eVpYQnNZV05sS0M5Y1hDOHVLaVF2TENCY0lsd2lLVHRjYmlBZ0lDQjJZWElnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXNJRjlrYVdSSmRHVnlZWFJ2Y2tWeWNtOXlJRDBnWm1Gc2MyVXNJRjlwZEdWeVlYUnZja1Z5Y205eUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdadmNpaDJZWElnWDJsMFpYSmhkRzl5SUQwZ1lXTmpaWEIwWldSR2FXeGxjMXRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2tzSUY5emRHVndPeUFoS0Y5cGRHVnlZWFJ2Y2s1dmNtMWhiRU52YlhCc1pYUnBiMjRnUFNBb1gzTjBaWEFnUFNCZmFYUmxjbUYwYjNJdWJtVjRkQ2dwS1M1a2IyNWxLVHNnWDJsMFpYSmhkRzl5VG05eWJXRnNRMjl0Y0d4bGRHbHZiaUE5SUhSeWRXVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFpoYkdsa1ZIbHdaU0E5SUY5emRHVndMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2FXUlVlWEJsSUQwZ2RtRnNhV1JVZVhCbExuUnlhVzBvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeHBaRlI1Y0dVdVkyaGhja0YwS0RBcElEMDlQU0JjSWk1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbTVoYldVdWRHOU1iM2RsY2tOaGMyVW9LUzVwYm1SbGVFOW1LSFpoYkdsa1ZIbHdaUzUwYjB4dmQyVnlRMkZ6WlNncExDQm1hV3hsTG01aGJXVXViR1Z1WjNSb0lDMGdkbUZzYVdSVWVYQmxMbXhsYm1kMGFDa2dJVDA5SUMweEtTQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9MMXhjTDF4Y0tpUXZMblJsYzNRb2RtRnNhV1JVZVhCbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb2FYTWdhWE1nYzI5dFpYUm9hVzVuSUd4cGEyVWdZU0JwYldGblpTOHFJRzFwYldVZ2RIbHdaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaVlYTmxUV2x0WlZSNWNHVWdQVDA5SUhaaGJHbGtWSGx3WlM1eVpYQnNZV05sS0M5Y1hDOHVLaVF2TENCY0lsd2lLU2tnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodGFXMWxWSGx3WlNBOVBUMGdkbUZzYVdSVWVYQmxLU0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmZaR2xrU1hSbGNtRjBiM0pGY25KdmNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lGOXBkR1Z5WVhSdmNrVnljbTl5SUQwZ1pYSnlPMXh1SUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFgybDBaWEpoZEc5eVRtOXliV0ZzUTI5dGNHeGxkR2x2YmlBbUppQmZhWFJsY21GMGIzSXVjbVYwZFhKdUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhWFJsY21GMGIzSXVjbVYwZFhKdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VYdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZaR2xrU1hSbGNtRjBiM0pGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lGOXBkR1Z5WVhSdmNrVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4wN1hHNHZMeUJCZFdkdFpXNTBJR3BSZFdWeWVWeHVhV1lnS0hSNWNHVnZaaUJxVVhWbGNua2dJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnYWxGMVpYSjVJQ0U5UFNCdWRXeHNLU0JxVVhWbGNua3VabTR1WkhKdmNIcHZibVVnUFNCbWRXNWpkR2x2YmlodmNIUnBiMjV6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QWtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01S0hSb2FYTXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMHBPMXh1ZlR0Y2JpOHZJRVJ5YjNCNmIyNWxJR1pwYkdVZ2MzUmhkSFZ6SUdOdlpHVnpYRzRrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUxrRkVSRVZFSUQwZ1hDSmhaR1JsWkZ3aU8xeHVKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1UlZVVlZSVVFnUFNCY0luRjFaWFZsWkZ3aU8xeHVMeThnUm05eUlHSmhZMnQzWVhKa2N5QmpiMjF3WVhScFltbHNhWFI1TGlCT2IzY3NJR2xtSUdFZ1ptbHNaU0JwY3lCaFkyTmxjSFJsWkN3Z2FYUW5jeUJsYVhSb1pYSWdjWFZsZFdWa1hHNHZMeUJ2Y2lCMWNHeHZZV1JwYm1jdVhHNGtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TGtGRFEwVlFWRVZFSUQwZ0pHRTJNREZtWmpNd1pqUTRNMlU1TVRja1pYaHdiM0owSkRKbE1tSmpaRGczTXpsaFpUQXpPUzVSVlVWVlJVUTdYRzRrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUxsVlFURTlCUkVsT1J5QTlJRndpZFhCc2IyRmthVzVuWENJN1hHNGtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TGxCU1QwTkZVMU5KVGtjZ1BTQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UmxlSEJ2Y25Ra01tVXlZbU5rT0Rjek9XRmxNRE01TGxWUVRFOUJSRWxPUnpzZ0x5OGdZV3hwWVhOY2JpUmhOakF4Wm1Zek1HWTBPRE5sT1RFM0pHVjRjRzl5ZENReVpUSmlZMlE0TnpNNVlXVXdNemt1UTBGT1EwVk1SVVFnUFNCY0ltTmhibU5sYkdWa1hDSTdYRzRrWVRZd01XWm1NekJtTkRnelpUa3hOeVJsZUhCdmNuUWtNbVV5WW1Oa09EY3pPV0ZsTURNNUxrVlNVazlTSUQwZ1hDSmxjbkp2Y2x3aU8xeHVKR0UyTURGbVpqTXdaalE0TTJVNU1UY2taWGh3YjNKMEpESmxNbUpqWkRnM016bGhaVEF6T1M1VFZVTkRSVk5USUQwZ1hDSnpkV05qWlhOelhDSTdYRzR2S2x4dVhHNGdRblZuWm1sNElHWnZjaUJwVDFNZ05pQmhibVFnTjF4dUlGTnZkWEpqWlRvZ2FIUjBjRG92TDNOMFlXTnJiM1psY21ac2IzY3VZMjl0TDNGMVpYTjBhVzl1Y3k4eE1Ua3lPVEE1T1M5b2RHMXNOUzFqWVc1MllYTXRaSEpoZDJsdFlXZGxMWEpoZEdsdkxXSjFaeTFwYjNOY2JpQmlZWE5sWkNCdmJpQjBhR1VnZDI5eWF5QnZaaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YzNSdmJXbDBZUzlwYjNNdGFXMWhaMlZtYVd4bExXMWxaMkZ3YVhobGJGeHVYRzRnS2k4Z0x5OGdSR1YwWldOMGFXNW5JSFpsY25ScFkyRnNJSE54ZFdGemFDQnBiaUJzYjJGa1pXUWdhVzFoWjJVdVhHNHZMeUJHYVhobGN5QmhJR0oxWnlCM2FHbGphQ0J6Y1hWaGMyZ2dhVzFoWjJVZ2RtVnlkR2xqWVd4c2VTQjNhR2xzWlNCa2NtRjNhVzVuSUdsdWRHOGdZMkZ1ZG1GeklHWnZjaUJ6YjIxbElHbHRZV2RsY3k1Y2JpOHZJRlJvYVhNZ2FYTWdZU0JpZFdjZ2FXNGdhVTlUTmlCa1pYWnBZMlZ6TGlCVWFHbHpJR1oxYm1OMGFXOXVJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzTjBiMjFwZEdFdmFXOXpMV2x0WVdkbFptbHNaUzF0WldkaGNHbDRaV3hjYm5aaGNpQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWkdWMFpXTjBWbVZ5ZEdsallXeFRjWFZoYzJnZ1BTQm1kVzVqZEdsdmJpQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWkdWMFpXTjBWbVZ5ZEdsallXeFRjWFZoYzJnb2FXMW5LU0I3WEc0Z0lDQWdkbUZ5SUdsM0lEMGdhVzFuTG01aGRIVnlZV3hYYVdSMGFEdGNiaUFnSUNCMllYSWdhV2dnUFNCcGJXY3VibUYwZFhKaGJFaGxhV2RvZER0Y2JpQWdJQ0IyWVhJZ1kyRnVkbUZ6SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1OaGJuWmhjMXdpS1R0Y2JpQWdJQ0JqWVc1MllYTXVkMmxrZEdnZ1BTQXhPMXh1SUNBZ0lHTmhiblpoY3k1b1pXbG5hSFFnUFNCcGFEdGNiaUFnSUNCMllYSWdZM1I0SUQwZ1kyRnVkbUZ6TG1kbGRFTnZiblJsZUhRb1hDSXlaRndpS1R0Y2JpQWdJQ0JqZEhndVpISmhkMGx0WVdkbEtHbHRaeXdnTUN3Z01DazdYRzRnSUNBZ2RtRnlJSEpsWmlBOUlHTjBlQzVuWlhSSmJXRm5aVVJoZEdFb01Td2dNQ3dnTVN3Z2FXZ3BMQ0JrWVhSaElEMGdjbVZtTG1SaGRHRTdYRzRnSUNBZ0x5OGdjMlZoY21Ob0lHbHRZV2RsSUdWa1oyVWdjR2w0Wld3Z2NHOXphWFJwYjI0Z2FXNGdZMkZ6WlNCcGRDQnBjeUJ6Y1hWaGMyaGxaQ0IyWlhKMGFXTmhiR3g1TGx4dUlDQWdJSFpoY2lCemVTQTlJREE3WEc0Z0lDQWdkbUZ5SUdWNUlEMGdhV2c3WEc0Z0lDQWdkbUZ5SUhCNUlEMGdhV2c3WEc0Z0lDQWdkMmhwYkdVb2NIa2dQaUJ6ZVNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoYkhCb1lTQTlJR1JoZEdGYktIQjVJQzBnTVNrZ0tpQTBJQ3NnTTEwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoYkhCb1lTQTlQVDBnTUNrZ1pYa2dQU0J3ZVR0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0J6ZVNBOUlIQjVPMXh1SUNBZ0lDQWdJQ0J3ZVNBOUlHVjVJQ3NnYzNrZ1BqNGdNVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSEpoZEdsdklEMGdjSGtnTHlCcGFEdGNiaUFnSUNCcFppQW9jbUYwYVc4Z1BUMDlJREFwSUhKbGRIVnliaUF4TzF4dUlDQWdJR1ZzYzJVZ2NtVjBkWEp1SUhKaGRHbHZPMXh1ZlR0Y2JpOHZJRUVnY21Wd2JHRmpaVzFsYm5RZ1ptOXlJR052Ym5SbGVIUXVaSEpoZDBsdFlXZGxYRzR2THlBb1lYSm5jeUJoY21VZ1ptOXlJSE52ZFhKalpTQmhibVFnWkdWemRHbHVZWFJwYjI0cExseHVkbUZ5SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkhaaGNpUmtjbUYzU1cxaFoyVkpUMU5HYVhnZ1BTQm1kVzVqZEdsdmJpQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWkhKaGQwbHRZV2RsU1U5VFJtbDRLR04wZUN3Z2FXMW5MQ0J6ZUN3Z2Mza3NJSE4zTENCemFDd2daSGdzSUdSNUxDQmtkeXdnWkdncElIdGNiaUFnSUNCMllYSWdkbVZ5ZEZOeGRXRnphRkpoZEdsdklEMGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2tkbUZ5SkdSbGRHVmpkRlpsY25ScFkyRnNVM0YxWVhOb0tHbHRaeWs3WEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzVrY21GM1NXMWhaMlVvYVcxbkxDQnplQ3dnYzNrc0lITjNMQ0J6YUN3Z1pIZ3NJR1I1TENCa2R5d2daR2dnTHlCMlpYSjBVM0YxWVhOb1VtRjBhVzhwTzF4dWZUdGNiblpoY2lBa1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSMllYSWtSWGhwWmxKbGMzUnZjbVVnUFNBdkx5QkNZWE5sWkNCdmJpQk5hVzVwWm5sS2NHVm5YRzR2THlCVGIzVnlZMlU2SUdoMGRIQTZMeTkzZDNjdWNHVnljbmt1WTNvdlptbHNaWE12UlhocFpsSmxjM1J2Y21WeUxtcHpYRzR2THlCb2RIUndPaTh2Wld4cFkyOXVMbUpzYjJjMU55NW1Zekl1WTI5dEwySnNiMmN0Wlc1MGNua3RNakEyTG1oMGJXeGNiaThxSTE5ZlVGVlNSVjlmS2k4Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ1hDSjFjMlVnYzNSeWFXTjBYQ0k3WEc0Z0lDQWdablZ1WTNScGIyNGdKR0UyTURGbVpqTXdaalE0TTJVNU1UY2tkbUZ5SkVWNGFXWlNaWE4wYjNKbEtDa2dlMXh1SUNBZ0lDQWdJQ0FrTm0xVk9IY2tjM2RqYUdWc2NHVnljeTVqYkdGemMwTmhiR3hEYUdWamF5aDBhR2x6TENBa1lUWXdNV1ptTXpCbU5EZ3paVGt4TnlSMllYSWtSWGhwWmxKbGMzUnZjbVVwTzF4dUlDQWdJSDFjYmlBZ0lDQWtObTFWT0hja2MzZGphR1ZzY0dWeWN5NWpjbVZoZEdWRGJHRnpjeWdrWVRZd01XWm1NekJtTkRnelpUa3hOeVIyWVhJa1JYaHBabEpsYzNSdmNtVXNJRzUxYkd3c0lGdGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJjSW1sdWFYUkRiR0Z6YzF3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR2x1YVhSRGJHRnpjeWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa3RGV1Y5VFZGSWdQU0JjSWtGQ1EwUkZSa2RJU1VwTFRFMU9UMUJSVWxOVVZWWlhXRmxhWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNSMWRuZDRlWG93TVRJek5EVTJOemc1S3k4OVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKbGJtTnZaR1UyTkZ3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1Z1WTI5a1pUWTBLR2x1Y0hWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOb2NqRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTm9jaklnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR05vY2pNZ1BTQmNJbHdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxibU14SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsYm1NeUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGJtTXpJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxibU0wSUQwZ1hDSmNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVW9kSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vY2pFZ1BTQnBibkIxZEZ0cEt5dGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFISXlJRDBnYVc1d2RYUmJhU3NyWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmh5TXlBOUlHbHVjSFYwVzJrcksxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVl6RWdQU0JqYUhJeElENCtJREk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVZeklnUFNBb1kyaHlNU0FtSURNcElEdzhJRFFnZkNCamFISXlJRDQrSURRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WXpNZ1BTQW9ZMmh5TWlBbUlERTFLU0E4UENBeUlId2dZMmh5TXlBK1BpQTJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtTTBJRDBnWTJoeU15QW1JRFl6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOT1lVNG9ZMmh5TWlrcElHVnVZek1nUFNCbGJtTTBJRDBnTmpRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR2x6VG1GT0tHTm9jak1wS1NCbGJtTTBJRDBnTmpRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDQTlJRzkxZEhCMWRDQXJJSFJvYVhNdVMwVlpYMU5VVWk1amFHRnlRWFFvWlc1ak1Ta2dLeUIwYUdsekxrdEZXVjlUVkZJdVkyaGhja0YwS0dWdVl6SXBJQ3NnZEdocGN5NUxSVmxmVTFSU0xtTm9ZWEpCZENobGJtTXpLU0FySUhSb2FYTXVTMFZaWDFOVVVpNWphR0Z5UVhRb1pXNWpOQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9jakVnUFNCamFISXlJRDBnWTJoeU15QTlJRndpWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WXpFZ1BTQmxibU15SUQwZ1pXNWpNeUE5SUdWdVl6UWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lTaHBJRHdnYVc1d2RYUXViR1Z1WjNSb0tTa2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUndkWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1hDSnlaWE4wYjNKbFhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnY21WemRHOXlaU2h2Y21sblJtbHNaVUpoYzJVMk5Dd2djbVZ6YVhwbFpFWnBiR1ZDWVhObE5qUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXlhV2RHYVd4bFFtRnpaVFkwTG0xaGRHTm9LRndpWkdGMFlUcHBiV0ZuWlM5cWNHVm5PMkpoYzJVMk5DeGNJaWtwSUhKbGRIVnliaUJ5WlhOcGVtVmtSbWxzWlVKaGMyVTJORHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtRjNTVzFoWjJVZ1BTQjBhR2x6TG1SbFkyOWtaVFkwS0c5eWFXZEdhV3hsUW1GelpUWTBMbkpsY0d4aFkyVW9YQ0prWVhSaE9tbHRZV2RsTDJwd1pXYzdZbUZ6WlRZMExGd2lMQ0JjSWx3aUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhObFoyMWxiblJ6SUQwZ2RHaHBjeTV6YkdsalpUSlRaV2R0Wlc1MGN5aHlZWGRKYldGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdFlXZGxJRDBnZEdocGN5NWxlR2xtVFdGdWFYQjFiR0YwYVc5dUtISmxjMmw2WldSR2FXeGxRbUZ6WlRZMExDQnpaV2R0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGd2laR0YwWVRwcGJXRm5aUzlxY0dWbk8ySmhjMlUyTkN4Y0lpNWpiMjVqWVhRb2RHaHBjeTVsYm1OdlpHVTJOQ2hwYldGblpTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVpYaHBaazFoYm1sd2RXeGhkR2x2Ymx3aUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1Y0YVdaTllXNXBjSFZzWVhScGIyNG9jbVZ6YVhwbFpFWnBiR1ZDWVhObE5qUXNJSE5sWjIxbGJuUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVjRhV1pCY25KaGVTQTlJSFJvYVhNdVoyVjBSWGhwWmtGeWNtRjVLSE5sWjIxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtVjNTVzFoWjJWQmNuSmhlU0E5SUhSb2FYTXVhVzV6WlhKMFJYaHBaaWh5WlhOcGVtVmtSbWxzWlVKaGMyVTJOQ3dnWlhocFprRnljbUY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZVUoxWm1abGNpQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHNWxkMGx0WVdkbFFYSnlZWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoUW5WbVptVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUZ3aVoyVjBSWGhwWmtGeWNtRjVYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1oyVjBSWGhwWmtGeWNtRjVLSE5sWjIxbGJuUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxaeUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VvZUNBOElITmxaMjFsYm5SekxteGxibWQwYUNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sWnlBOUlITmxaMjFsYm5SelczaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZuV3pCZElEMDlQU0F5TlRVZ0ppQnpaV2RiTVYwZ1BUMDlJREl5TlNrZ2NtVjBkWEp1SUhObFp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZUNzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWENKcGJuTmxjblJGZUdsbVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnYVc1elpYSjBSWGhwWmloeVpYTnBlbVZrUm1sc1pVSmhjMlUyTkN3Z1pYaHBaa0Z5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdFlXZGxSR0YwWVNBOUlISmxjMmw2WldSR2FXeGxRbUZ6WlRZMExuSmxjR3hoWTJVb1hDSmtZWFJoT21sdFlXZGxMMnB3WldjN1ltRnpaVFkwTEZ3aUxDQmNJbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZblZtSUQwZ2RHaHBjeTVrWldOdlpHVTJOQ2hwYldGblpVUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpaWEJoY21GMFpWQnZhVzUwSUQwZ1luVm1MbWx1WkdWNFQyWW9NalUxTENBektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldGbElEMGdZblZtTG5Oc2FXTmxLREFzSUhObGNHRnlZWFJsVUc5cGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaGRHOGdQU0JpZFdZdWMyeHBZMlVvYzJWd1lYSmhkR1ZRYjJsdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGeWNtRjVJRDBnYldGbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnljbUY1SUQwZ1lYSnlZWGt1WTI5dVkyRjBLR1Y0YVdaQmNuSmhlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKeVlYa2dQU0JoY25KaGVTNWpiMjVqWVhRb1lYUnZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVUb2dYQ0p6YkdsalpUSlRaV2R0Wlc1MGMxd2lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhOc2FXTmxNbE5sWjIxbGJuUnpLSEpoZDBsdFlXZGxRWEp5WVhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYUdWaFpDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmxaMjFsYm5SeklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVW9kSEoxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WVhkSmJXRm5aVUZ5Y21GNVcyaGxZV1JkSUQwOVBTQXlOVFVnSmlCeVlYZEpiV0ZuWlVGeWNtRjVXMmhsWVdRZ0t5QXhYU0E5UFQwZ01qRTRLU0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmhkMGx0WVdkbFFYSnlZWGxiYUdWaFpGMGdQVDA5SURJMU5TQW1JSEpoZDBsdFlXZGxRWEp5WVhsYmFHVmhaQ0FySURGZElEMDlQU0F5TVRZcElHaGxZV1FnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnZ1BTQnlZWGRKYldGblpVRnljbUY1VzJobFlXUWdLeUF5WFNBcUlESTFOaUFySUhKaGQwbHRZV2RsUVhKeVlYbGJhR1ZoWkNBcklETmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWdVpGQnZhVzUwSUQwZ2FHVmhaQ0FySUd4bGJtZDBhQ0FySURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMlZuSUQwZ2NtRjNTVzFoWjJWQmNuSmhlUzV6YkdsalpTaG9aV0ZrTENCbGJtUlFiMmx1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXZHRaVzUwY3k1d2RYTm9LSE5sWnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXRmtJRDBnWlc1a1VHOXBiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGxZV1FnUGlCeVlYZEpiV0ZuWlVGeWNtRjVMbXhsYm1kMGFDa2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpXZHRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQmNJbVJsWTI5a1pUWTBYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1pHVmpiMlJsTmpRb2FXNXdkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiM1YwY0hWMElEMGdYQ0pjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMmh5TVNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJoeU1pQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyaHlNeUE5SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWdVl6RWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnVZeklnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z1WXpNZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWdVl6UWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWW5WbUlEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NtVnRiM1psSUdGc2JDQmphR0Z5WVdOMFpYSnpJSFJvWVhRZ1lYSmxJRzV2ZENCQkxWb3NJR0V0ZWl3Z01DMDVMQ0FyTENBdkxDQnZjaUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHSmhjMlUyTkhSbGMzUWdQU0F2VzE1QkxWcGhMWG93TFRsY1hDdGNYQzljWEQxZEwyYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dKaGMyVTJOSFJsYzNRdVpYaGxZeWhwYm5CMWRDa3BJR052Ym5OdmJHVXVkMkZ5YmloY0lsUm9aWEpsSUhkbGNtVWdhVzUyWVd4cFpDQmlZWE5sTmpRZ1kyaGhjbUZqZEdWeWN5QnBiaUIwYUdVZ2FXNXdkWFFnZEdWNGRDNWNYRzVXWVd4cFpDQmlZWE5sTmpRZ1kyaGhjbUZqZEdWeWN5QmhjbVVnUVMxYUxDQmhMWG9zSURBdE9Td2dKeXNuTENBbkx5Y3NZVzVrSUNjOUoxeGNia1Y0Y0dWamRDQmxjbkp2Y25NZ2FXNGdaR1ZqYjJScGJtY3VYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBJRDBnYVc1d2RYUXVjbVZ3YkdGalpTZ3ZXMTVCTFZwaExYb3dMVGxjWEN0Y1hDOWNYRDFkTDJjc0lGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxLSFJ5ZFdVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm1NeElEMGdkR2hwY3k1TFJWbGZVMVJTTG1sdVpHVjRUMllvYVc1d2RYUXVZMmhoY2tGMEtHa3JLeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibU15SUQwZ2RHaHBjeTVMUlZsZlUxUlNMbWx1WkdWNFQyWW9hVzV3ZFhRdVkyaGhja0YwS0drckt5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtTXpJRDBnZEdocGN5NUxSVmxmVTFSU0xtbHVaR1Y0VDJZb2FXNXdkWFF1WTJoaGNrRjBLR2tyS3lrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm1NMElEMGdkR2hwY3k1TFJWbGZVMVJTTG1sdVpHVjRUMllvYVc1d2RYUXVZMmhoY2tGMEtHa3JLeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphSEl4SUQwZ1pXNWpNU0E4UENBeUlId2daVzVqTWlBK1BpQTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFISXlJRDBnS0dWdVl6SWdKaUF4TlNrZ1BEd2dOQ0I4SUdWdVl6TWdQajRnTWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmh5TXlBOUlDaGxibU16SUNZZ015a2dQRHdnTmlCOElHVnVZelE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFaaTV3ZFhOb0tHTm9jakVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlc1ak15QWhQVDBnTmpRcElHSjFaaTV3ZFhOb0tHTm9jaklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlc1ak5DQWhQVDBnTmpRcElHSjFaaTV3ZFhOb0tHTm9jak1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphSEl4SUQwZ1kyaHlNaUE5SUdOb2NqTWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm1NeElEMGdaVzVqTWlBOUlHVnVZek1nUFNCbGJtTTBJRDBnWENKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRW9hU0E4SUdsdWNIVjBMbXhsYm1kMGFDa3BJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1luVm1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ1hTazdYRzRnSUNBZ2NtVjBkWEp1SUNSaE5qQXhabVl6TUdZME9ETmxPVEUzSkhaaGNpUkZlR2xtVW1WemRHOXlaVHRjYm4wb0tUdGNiaVJoTmpBeFptWXpNR1kwT0RObE9URTNKSFpoY2lSRmVHbG1VbVZ6ZEc5eVpTNXBibWwwUTJ4aGMzTW9LVHRjYmk4cVhHNGdLaUJqYjI1MFpXNTBiRzloWkdWa0xtcHpYRzRnS2x4dUlDb2dRWFYwYUc5eU9pQkVhV1ZuYnlCUVpYSnBibWtnS0dScFpXZHZMbkJsY21sdWFTQmhkQ0JuYldGcGJDNWpiMjBwWEc0Z0tpQlRkVzF0WVhKNU9pQmpjbTl6Y3kxaWNtOTNjMlZ5SUhkeVlYQndaWElnWm05eUlFUlBUVU52Ym5SbGJuUk1iMkZrWldSY2JpQXFJRlZ3WkdGMFpXUTZJREl3TVRBeE1ESXdYRzRnS2lCTWFXTmxibk5sT2lCTlNWUmNiaUFxSUZabGNuTnBiMjQ2SURFdU1seHVJQ3BjYmlBcUlGVlNURHBjYmlBcUlHaDBkSEE2THk5cVlYWmhjMk55YVhCMExtNTNZbTk0TG1OdmJTOURiMjUwWlc1MFRHOWhaR1ZrTDF4dUlDb2dhSFIwY0RvdkwycGhkbUZ6WTNKcGNIUXVibmRpYjNndVkyOXRMME52Ym5SbGJuUk1iMkZrWldRdlRVbFVMVXhKUTBWT1UwVmNiaUFxTHlBdkx5QkFkMmx1SUhkcGJtUnZkeUJ5WldabGNtVnVZMlZjYmk4dklFQm1iaUJtZFc1amRHbHZiaUJ5WldabGNtVnVZMlZjYm5aaGNpQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWTI5dWRHVnVkRXh2WVdSbFpDQTlJR1oxYm1OMGFXOXVJQ1JoTmpBeFptWXpNR1kwT0RObE9URTNKSFpoY2lSamIyNTBaVzUwVEc5aFpHVmtLSGRwYml3Z1ptNHBJSHRjYmlBZ0lDQjJZWElnWkc5dVpTQTlJR1poYkhObE8xeHVJQ0FnSUhaaGNpQjBiM0FnUFNCMGNuVmxPMXh1SUNBZ0lIWmhjaUJrYjJNZ1BTQjNhVzR1Wkc5amRXMWxiblE3WEc0Z0lDQWdkbUZ5SUhKdmIzUWdQU0JrYjJNdVpHOWpkVzFsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSFpoY2lCaFpHUWdQU0JrYjJNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lBL0lGd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNsd2lJRG9nWENKaGRIUmhZMmhGZG1WdWRGd2lPMXh1SUNBZ0lIWmhjaUJ5WlcwZ1BTQmtiMk11WVdSa1JYWmxiblJNYVhOMFpXNWxjaUEvSUZ3aWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNsd2lJRG9nWENKa1pYUmhZMmhGZG1WdWRGd2lPMXh1SUNBZ0lIWmhjaUJ3Y21VZ1BTQmtiMk11WVdSa1JYWmxiblJNYVhOMFpXNWxjaUEvSUZ3aVhDSWdPaUJjSW05dVhDSTdYRzRnSUNBZ2RtRnlJR2x1YVhRZ1BTQm1kVzVqZEdsdmJpaGxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxMblI1Y0dVZ1BUMDlJRndpY21WaFpIbHpkR0YwWldOb1lXNW5aVndpSUNZbUlHUnZZeTV5WldGa2VWTjBZWFJsSUNFOVBTQmNJbU52YlhCc1pYUmxYQ0lwSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnS0dVdWRIbHdaU0E5UFQwZ1hDSnNiMkZrWENJZ1B5QjNhVzRnT2lCa2IyTXBXM0psYlYwb2NISmxJQ3NnWlM1MGVYQmxMQ0JwYm1sMExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWkc5dVpTQW1KaUFvWkc5dVpTQTlJSFJ5ZFdVcEtTQnlaWFIxY200Z1ptNHVZMkZzYkNoM2FXNHNJR1V1ZEhsd1pTQjhmQ0JsS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCd2IyeHNJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnliMjkwTG1SdlUyTnliMnhzS0Z3aWJHVm1kRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaHdiMnhzTENBMU1DazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdWFYUW9YQ0p3YjJ4c1hDSXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWWdLR1J2WXk1eVpXRmtlVk4wWVhSbElDRTlQU0JjSW1OdmJYQnNaWFJsWENJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dSdll5NWpjbVZoZEdWRmRtVnVkRTlpYW1WamRDQW1KaUJ5YjI5MExtUnZVMk55YjJ4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0NBOUlDRjNhVzR1Wm5KaGJXVkZiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiM0FwSUhCdmJHd29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCa2IyTmJZV1JrWFNod2NtVWdLeUJjSWtSUFRVTnZiblJsYm5STWIyRmtaV1JjSWl3Z2FXNXBkQ3dnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdJQ0JrYjJOYllXUmtYU2h3Y21VZ0t5QmNJbkpsWVdSNWMzUmhkR1ZqYUdGdVoyVmNJaXdnYVc1cGRDd2dabUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2QybHVXMkZrWkYwb2NISmxJQ3NnWENKc2IyRmtYQ0lzSUdsdWFYUXNJR1poYkhObEtUdGNiaUFnSUNCOVhHNTlPMXh1Wm5WdVkzUnBiMjRnSkdFMk1ERm1aak13WmpRNE0yVTVNVGNrZG1GeUpGOWZaM1ZoY21SZlh5aDJZV3gxWlN3Z2RISmhibk5tYjNKdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUIyWVd4MVpTQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQW1KaUIyWVd4MVpTQWhQVDBnYm5Wc2JDQS9JSFJ5WVc1elptOXliU2gyWVd4MVpTa2dPaUIxYm1SbFptbHVaV1E3WEc1OVhHNW1kVzVqZEdsdmJpQWtZVFl3TVdabU16Qm1ORGd6WlRreE55UjJZWElrWDE5bmRXRnlaRTFsZEdodlpGOWZLRzlpYWl3Z2JXVjBhRzlrVG1GdFpTd2dkSEpoYm5ObWIzSnRLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2WW1vZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWWdiMkpxSUNFOVBTQnVkV3hzSUNZbUlIUjVjR1Z2WmlCdlltcGJiV1YwYUc5a1RtRnRaVjBnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnY21WMGRYSnVJSFJ5WVc1elptOXliU2h2WW1vc0lHMWxkR2h2WkU1aGJXVXBPMXh1SUNBZ0lHVnNjMlVnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYm4xY2JseHVYRzR2THlNZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVEQxa2NtOXdlbTl1WlM1cWN5NXRZWEJjYmlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pYaDBaVzVrTzF4dVhHNHZLbHh1SUNCMllYSWdiMkpxSUQwZ2UyRTZJRE1zSUdJNklEVjlPMXh1SUNCbGVIUmxibVFvYjJKcUxDQjdZVG9nTkN3Z1l6b2dPSDBwT3lBdkx5QjdZVG9nTkN3Z1lqb2dOU3dnWXpvZ09IMWNiaUFnYjJKcU95QXZMeUI3WVRvZ05Dd2dZam9nTlN3Z1l6b2dPSDFjYmx4dUlDQjJZWElnYjJKcUlEMGdlMkU2SURNc0lHSTZJRFY5TzF4dUlDQmxlSFJsYm1Rb2UzMHNJRzlpYWl3Z2UyRTZJRFFzSUdNNklEaDlLVHNnTHk4Z2UyRTZJRFFzSUdJNklEVXNJR002SURoOVhHNGdJRzlpYWpzZ0x5OGdlMkU2SURNc0lHSTZJRFY5WEc1Y2JpQWdkbUZ5SUdGeWNpQTlJRnN4TENBeUxDQXpYVHRjYmlBZ2RtRnlJRzlpYWlBOUlIdGhPaUF6TENCaU9pQTFmVHRjYmlBZ1pYaDBaVzVrS0c5aWFpd2dlMk02SUdGeWNuMHBPeUF2THlCN1lUb2dNeXdnWWpvZ05Td2dZem9nV3pFc0lESXNJRE5kZlZ4dUlDQmhjbkl1Y0hWemFDZzBLVHRjYmlBZ2IySnFPeUF2THlCN1lUb2dNeXdnWWpvZ05Td2dZem9nV3pFc0lESXNJRE1zSURSZGZWeHVYRzRnSUhaaGNpQmhjbklnUFNCYk1Td2dNaXdnTTEwN1hHNGdJSFpoY2lCdlltb2dQU0I3WVRvZ015d2dZam9nTlgwN1hHNGdJR1Y0ZEdWdVpDaDBjblZsTENCdlltb3NJSHRqT2lCaGNuSjlLVHNnTHk4Z2UyRTZJRE1zSUdJNklEVXNJR002SUZzeExDQXlMQ0F6WFgxY2JpQWdZWEp5TG5CMWMyZ29OQ2s3WEc0Z0lHOWlhanNnTHk4Z2UyRTZJRE1zSUdJNklEVXNJR002SUZzeExDQXlMQ0F6WFgxY2JseHVJQ0JsZUhSbGJtUW9lMkU2SURRc0lHSTZJRFY5S1RzZ0x5OGdlMkU2SURRc0lHSTZJRFY5WEc0Z0lHVjRkR1Z1WkNoN1lUb2dOQ3dnWWpvZ05YMHNJRE1wT3lCN1lUb2dOQ3dnWWpvZ05YMWNiaUFnWlhoMFpXNWtLSHRoT2lBMExDQmlPaUExZlN3Z2RISjFaU2s3SUh0aE9pQTBMQ0JpT2lBMWZWeHVJQ0JsZUhSbGJtUW9KMmhsYkd4dkp5d2dlMkU2SURRc0lHSTZJRFY5S1RzZ0x5OGdkR2h5YjNkelhHNGdJR1Y0ZEdWdVpDZ3pMQ0I3WVRvZ05Dd2dZam9nTlgwcE95QXZMeUIwYUhKdmQzTmNiaW92WEc1Y2JtWjFibU4wYVc5dUlHVjRkR1Z1WkNndktpQmJaR1ZsY0Ywc0lHOWlhakVzSUc5aWFqSXNJRnR2WW1wdVhTQXFMeWtnZTF4dUlDQjJZWElnWVhKbmN5QTlJRnRkTG5Oc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektUdGNiaUFnZG1GeUlHUmxaWEFnUFNCbVlXeHpaVHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmhjbWR6V3pCZElEMDlJQ2RpYjI5c1pXRnVKeWtnZTF4dUlDQWdJR1JsWlhBZ1BTQmhjbWR6TG5Ob2FXWjBLQ2s3WEc0Z0lIMWNiaUFnZG1GeUlISmxjM1ZzZENBOUlHRnlaM05iTUYwN1hHNGdJR2xtSUNocGMxVnVaWGgwWlc1a1lXSnNaU2h5WlhOMWJIUXBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGxlSFJsYm1SbFpTQnRkWE4wSUdKbElHRnVJRzlpYW1WamRDY3BPMXh1SUNCOVhHNGdJSFpoY2lCbGVIUmxibVJsY25NZ1BTQmhjbWR6TG5Oc2FXTmxLREVwTzF4dUlDQjJZWElnYkdWdUlEMGdaWGgwWlc1a1pYSnpMbXhsYm1kMGFEdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUhaaGNpQmxlSFJsYm1SbGNpQTlJR1Y0ZEdWdVpHVnljMXRwWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdaWGgwWlc1a1pYSXBJSHRjYmlBZ0lDQWdJR2xtSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b1pYaDBaVzVrWlhJc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdaWGgwWlc1a1pYSmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JsWlhBZ0ppWWdhWE5EYkc5dVpXRmliR1VvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR0poYzJVZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU0EvSUZ0ZElEb2dlMzA3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ0bGVWMGdQU0JsZUhSbGJtUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tISmxjM1ZzZEN3Z2EyVjVLU0FtSmlBaGFYTlZibVY0ZEdWdVpHRmliR1VvY21WemRXeDBXMnRsZVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2NtVnpkV3gwVzJ0bGVWMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQmlZWE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRnRyWlhsZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVablZ1WTNScGIyNGdhWE5EYkc5dVpXRmliR1VvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHOWlhaWtnZkh3Z2UzMHVkRzlUZEhKcGJtY3VZMkZzYkNodlltb3BJRDA5SUNkYmIySnFaV04wSUU5aWFtVmpkRjBuTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzFWdVpYaDBaVzVrWVdKc1pTaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlDRjJZV3dnZkh3Z0tIUjVjR1Z2WmlCMllXd2dJVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUhaaGJDQWhQU0FuWm5WdVkzUnBiMjRuS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0IxYmtGamRHbDJaU0JtY205dElDY3VMM1Z1TFdGamRHbDJaU2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUNncElEMCtJSHRjYmlBZ1kyOXVjM1FnWVdKdmRYUWdQU0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VZV0p2ZFhRbktUdGNibHh1SUNCcFppQW9ZV0p2ZFhRcElIdGNiaUFnSUNCamIyNXpkQ0JoWW05MWRFSjFkSFJ2Ym5NZ1BTQmhZbTkxZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdVlXSnZkWFJmWDJKMWRIUnZiaWNwTzF4dUlDQWdJR052Ym5OMElHRmliM1YwUTI5dWRHVnVkSE1nUFNCaFltOTFkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1WVdKdmRYUmZYMk52Ym5SbGJuUW5LVHRjYmx4dUlDQWdJR0ZpYjNWMFFuVjBkRzl1Y3k1bWIzSkZZV05vS0NoaFltOTFkRUoxZEhSdmJpd2dhU2tnUFQ0Z2UxeHVJQ0FnSUNBZ1lXSnZkWFJDZFhSMGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIVnVRV04wYVhabEtHRmliM1YwUW5WMGRHOXVjeXdnSjJGamRHbDJaU2NwTzF4dUlDQWdJQ0FnSUNCaFltOTFkRUoxZEhSdmJpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkaFkzUnBkbVVuS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWVdKdmRYUkRiMjUwWlc1MGMxdHBYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIVnVRV04wYVhabEtHRmliM1YwUTI5dWRHVnVkSE1zSUNkaFkzUnBkbVVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQmhZbTkxZEVOdmJuUmxiblJ6VzJsZExtTnNZWE56VEdsemRDNWhaR1FvSjJGamRHbDJaU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZUdGNiaUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2dwSUQwK0lIdGNiaUFnWTI5dWMzUWdZMkZzWlc1a1lYSkZkbVZ1ZENBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1bWFXeDBaWEp6WDE5a1lYUmxjR2xqYTJWeUp5azdYRzRnSUdOdmJuTjBJR05vYjI5elpVUmhkR1ZHYVdWc1pDQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NW1hV3gwWlhKelgxOWphRzl2YzJVdFpHRjBaU2NwTzF4dUlDQmpiMjV6ZENCamRYTjBiMjFFWVhseklEMGdXeWZRa3RHQkp5d2dKOUNmMEwwbkxDQW4wSkxSZ2ljc0lDZlFvZEdBSnl3Z0o5Q24wWUluTENBbjBKL1JnaWNzSUNmUW9kQ3hKMTA3WEc0Z0lHTnZibk4wSUdOMWMzUnZiVTF2Ym5Sb0lEMGdXMXh1SUNBZ0lDZlFyOUM5MExMUXNOR0EwWXduTEZ4dUlDQWdJQ2ZRcE5DMTBMTFJnTkN3MEx2UmpDY3NYRzRnSUNBZ0o5Q2MwTERSZ05HQ0p5eGNiaUFnSUNBbjBKRFF2OUdBMExYUXU5R01KeXhjYmlBZ0lDQW4wSnpRc05DNUp5eGNiaUFnSUNBbjBKalJqdEM5MFl3bkxGeHVJQ0FnSUNmUW1OR08wTHZSakNjc1hHNGdJQ0FnSjlDUTBMTFFzOUdEMFlIUmdpY3NYRzRnSUNBZ0o5Q2gwTFhRdmRHQzBZL1FzZEdBMFl3bkxGeHVJQ0FnSUNmUW50QzYwWUxSajlDeDBZRFJqQ2NzWEc0Z0lDQWdKOUNkMEw3Umo5Q3gwWURSakNjc1hHNGdJQ0FnSjlDVTBMWFF1dEN3MExIUmdOR01KeXhjYmlBZ1hUdGNibHh1SUNCcFppQW9ZMkZzWlc1a1lYSkZkbVZ1ZENrZ2UxeHVJQ0FnSUdOdmJuTjBJR1JoZEdWRGFHOXBjMlVnUFNCa1lYUmxjR2xqYTJWeUtHTmhiR1Z1WkdGeVJYWmxiblFzSUh0Y2JpQWdJQ0FnSUdadmNtMWhkSFJsY2pvZ0tHbHVjSFYwTENCa1lYUmxMQ0JwYm5OMFlXNWpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBibkIxZEM1MllXeDFaU0E5SUNkaklDY2dLeUJrWVhSbExuUnZURzlqWVd4bFJHRjBaVk4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJRzl1VTJWc1pXTjBPaUFvYVc1emRHRnVZMlVzSUdSaGRHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OWphRzl2YzJWRVlYUmxSbWxsYkdRdWRHVjRkRU52Ym5SbGJuUWdQU0JnSkh0a1lYUmxMbWRsZEVSaGRHVW9LWDBnSkh0amRYTjBiMjFOYjI1MGFGdGtZWFJsTG1kbGRFMXZiblJvS0NsZGZTQWtlMlJoZEdVdVoyVjBSblZzYkZsbFlYSW9LWDFnTzF4dVhIUmNkR05vYjI5elpVUmhkR1ZHYVdWc1pDNTBaWGgwUTI5dWRHVnVkQ0E5SUZ3aVhDSXVZMjl1WTJGMEtHUmhkR1V1WjJWMFJHRjBaU2dwTENCY0lpQmNJaWt1WTI5dVkyRjBLR04xYzNSdmJVMXZiblJvVzJSaGRHVXVaMlYwVFc5dWRHZ29LVjBzSUZ3aUlGd2lLUzVqYjI1allYUW9aR0YwWlM1blpYUkdkV3hzV1dWaGNpZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNCamFHOXZjMlZFWVhSbFJtbGxiR1F1YzJWMFFYUjBjbWxpZFhSbEtGd2laR0YwWVMxa1lYUmxYQ0lzSUdSaGRHVXVaMlYwUkdGMFpTZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNCamFHOXZjMlZFWVhSbFJtbGxiR1F1YzJWMFFYUjBjbWxpZFhSbEtGd2laR0YwWVMxdGIyNTBhRndpTENCa1lYUmxMbWRsZEUxdmJuUm9LQ2tyTVNrN0x5OWlkV2N0Wm1sNFhHNGdJQ0FnSUNBZ0lDQWdZMmh2YjNObFJHRjBaVVpwWld4a0xuTmxkRUYwZEhKcFluVjBaU2hjSW1SaGRHRXRlV1ZoY2x3aUxDQmtZWFJsTG1kbGRFWjFiR3haWldGeUtDa3BPMXh1SUNBZ0lDQWdJQ0FnSUdWMlpXNTBjMUpsWm5KbGMyaEdhV3gwWlhJb0tUdGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmthWE5oWW14bFpFUmhkR1Z6T2lCYlhHNGdJQ0FnSUNBZ0lHNWxkeUJFWVhSbEtESXdNakVzSURFd0xDQTFLU3hjYmlBZ0lDQWdJQ0FnYm1WM0lFUmhkR1VvTWpBeU1Td2dNVEFzSURncExGeHVJQ0FnSUNBZ0lDQnVaWGNnUkdGMFpTZ3lNREl4TENBeE1Td2dNVEFwTEZ4dUlDQWdJQ0FnSUNCdVpYY2dSR0YwWlNneU1ESXhMQ0F4TUN3Z01URXBMRnh1SUNBZ0lDQWdJQ0J1WlhjZ1JHRjBaU2d5TURJeExDQXhNQ3dnTVRrcExGeHVJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lHRnNkMkY1YzFOb2IzYzZJSFJ5ZFdVc1hHNGdJQ0FnSUNCemFHOTNRV3hzUkdGMFpYTTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCemRHRnlkRVJoZVRvZ01TeGNiaUFnSUNBZ0lHTjFjM1J2YlVSaGVYTTZJR04xYzNSdmJVUmhlWE1zWEc0Z0lDQWdJQ0JqZFhOMGIyMU5iMjUwYUhNNklHTjFjM1J2YlUxdmJuUm9MRnh1SUNBZ0lDQWdiM1psY214aGVVSjFkSFJ2YmpvZ0o5Q1MwWXZRc2RHQTBMRFJndEdNSnl4Y2JpQWdJQ0FnSUc5MlpYSnNZWGxRYkdGalpXaHZiR1JsY2pvZ0o5Q1MwTExRdGRDMDBMalJndEMxSU5DejBMN1F0Q2NzWEc0Z0lDQWdJQ0JrWVhSbFUyVnNaV04wWldRNklHNWxkeUJFWVhSbEtDa3NYRzRnSUNBZ0lDQnBaRG9nTVN4Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlR0Y2JpSXNJbWx0Y0c5eWRDQjdJRVJ5YjNCNmIyNWxJSDBnWm5KdmJTQW5aSEp2Y0hwdmJtVW5PMXh1WEc1amIyNXpkQ0JrZWtSbGJHVjBaVWxqYjI0Z1BTQW5QSE4yWnlCNGJXeHVjejFjSW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01EQXZjM1puWENJZ2QybGtkR2c5WENJek1sd2lJR2hsYVdkb2REMWNJak15WENJZ2RtVnljMmx2YmoxY0lqRXVNVndpSUhacFpYZENiM2c5WENJd0lEQWdNeklnTXpKY0lqNDhaeUIwY21GdWMyWnZjbTA5WENKelkyRnNaU2d5S1Z3aVBqeGphWEpqYkdVZ2MzUjViR1U5WENKbWFXeHNPaU5tTkRRek16WmNJaUJqZUQxY0lqaGNJaUJqZVQxY0lqaGNJaUJ5UFZ3aU4xd2lMejQ4Y21WamRDQnpkSGxzWlQxY0ltWnBiR3c2STJabVptWm1abHdpSUhkcFpIUm9QVndpTWx3aUlHaGxhV2RvZEQxY0lqRXdYQ0lnZUQxY0lpMHVPVGhjSWlCNVBWd2lMVEUyTGpJNVhDSWdkSEpoYm5ObWIzSnRQVndpY205MFlYUmxLREV6TlNsY0lpOCtQSEpsWTNRZ2MzUjViR1U5WENKbWFXeHNPaU5tWm1abVptWmNJaUIzYVdSMGFEMWNJakpjSWlCb1pXbG5hSFE5WENJeE1Gd2lJSGc5WENJdE1USXVNamxjSWlCNVBWd2lMVFV1TURGY0lpQjBjbUZ1YzJadmNtMDlYQ0p5YjNSaGRHVW9MVEV6TlNsY0lpOCtQQzluUGp3dmMzWm5QaWM3WEc1Y2JtTnZibk4wSUdsdWFYUkVjbTl3V205dVpTQTlJQ2dwSUQwK0lIdGNiaUFnWTI5dWMzUWdaSEp2Y0ZwdmJtVkZiR1Z0Wlc1MGN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMXRrWVhSaExXUjZYU2NwTzF4dUlDQjJZWElnYlhsVGRHOXdVbVZzYjJGa0lEMGdabUZzYzJVN1hHNGdJR1J5YjNCYWIyNWxSV3hsYldWdWRITXVabTl5UldGamFDZ29hWFJsYlNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdselJHOWpJRDBnYVhSbGJTNW9ZWE5CZEhSeWFXSjFkR1VvSjJSaGRHRXRaSG90ZEdWNGRDY3BPMXh1SUNBZ0lHTnZibk4wSUdGa1pFSjFkSFJ2YmlBOUlHbDBaVzB1Y1hWbGNubFRaV3hsWTNSdmNpZ25XMlJoZEdFdFpIb3RZV1JrWFNjcE8xeHVJQ0FnSUdOdmJuTjBJR1J5YjNCNmIyNWxJRDBnYm1WM0lFUnliM0I2YjI1bEtHbDBaVzBzSUh0Y2JpQWdJQ0FnSUhWeWJEb2dhWFJsYlM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGRYQnNiMkZrTFd4cGJtc25LU3hjYmlBZ0lDQWdJRzFsZEdodlpEb2dKM0J2YzNRbkxGeHVJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2UxeHVJQ0FnSUNBZ0lDQW5XQzFEVTFKR0xWUlBTMFZPSnpvZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduYldWMFlWdHVZVzFsUFZ3aVkzTnlaaTEwYjJ0bGJsd2lYU2NwTG1kbGRFRjBkSEpwWW5WMFpTZ25ZMjl1ZEdWdWRDY3BYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdZMnhwWTJ0aFlteGxPaUJoWkdSQ2RYUjBiMjRzWEc0Z0lDQWdJQ0JoWkdSU1pXMXZkbVZNYVc1cmN6b2dkSEoxWlN4Y2JpQWdJQ0FnSUdScFkzUlNaVzF2ZG1WR2FXeGxPaUJrZWtSbGJHVjBaVWxqYjI0c1hHNGdJQ0FnSUNCa2FXTjBRMkZ1WTJWc1ZYQnNiMkZrT2lBbkp5eGNiaUFnSUNBZ0lHMWhlRVpwYkdWemFYcGxPaUJwYzBSdll5QS9JREkxSURvZ05TeGNiaUFnSUNBZ0lDOHZZV05qWlhCMFpXUkdhV3hsY3pvZ2FYTkViMk1nUHlBbkxuQmtaaXdnTG1Sdll5d2daRzlqZUNjZ09pQW5MbXB3Wnl3Z0xuQnVaeXdnYW5CbFp5Y3NYRzRnSUNBZ0lDQmthV04wUm1sc1pWUnZiMEpwWnpvZ0o5Q1MwWXNnMEwvUmk5R0MwTERRdGRHQzBMWFJnZEdNSU5DMzBMRFFzOUdBMFlQUXQ5QzQwWUxSakNEUmdkQzcwWVBSaU5DNjBMN1F2Q0RRc2RDKzBMdlJqTkdJMEw3UXVTRFJoTkN3MExuUXV5QW9lM3RtYVd4bGMybDZaWDE5VFdJcExpRFFuTkN3MExyUmdkQzQwTHpRc05DNzBZelF2ZEdMMExrZzBZRFFzTkMzMEx6UXRkR0FPaUI3ZTIxaGVFWnBiR1Z6YVhwbGZYMU5ZaTRuTEZ4dUlDQWdJQ0FnYVc1cGREb2dablZ1WTNScGIyNGdhVzVwZENncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJpZ25ZV1JrWldSbWFXeGxKeXdnWm5WdVkzUnBiMjRnS0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCaFpHUkNkWFIwYjI0dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkdWIyNWxKenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI0b0ozSmxiVzkyWldSbWFXeGxKeXdnWm5WdVkzUnBiMjRnS0dacGJHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCaFpHUkNkWFIwYjI0dWMzUjViR1V1WkdsemNHeGhlU0E5SUNkbWJHVjRKenRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI0b1hDSnhkV1YxWldOdmJYQnNaWFJsWENJc0lHWjFibU4wYVc5dUlDaG1hV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXMTVVM1J2Y0ZKbGJHOWhaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dlkyRjBhVzl1TG5KbGJHOWhaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRlVk4wYjNCU1pXeHZZV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNG9KMlZ5Y205eUp5d2dablZ1WTNScGIyNG9abWxzWlN3Z1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa1FuVjBkRzl1TG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuWm14bGVDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaSHBEZFhOMGIyMUVhWE53YkdGNVJYSnliM0lnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pIcERkWE4wYjIxRWFYTndiR0Y1UlhKeWIzSW9abWxzWlN3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbVI2TFdWeWNtOXlKeWt1YUdsa1pTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhsVGRHOXdVbVZzYjJGa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29aWEp5YjNJdWJXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmQybHVaRzkzTG1Gc1pYSjBLR1Z5Y205eVRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmU2s3WEc1OU8xeHVYRzVsZUhCdmNuUWdleUJwYm1sMFJISnZjRnB2Ym1VZ2ZUdGNiaUlzSW1sdGNHOXlkQ0IxYmtGamRHbDJaU0JtY205dElDY3VMM1Z1TFdGamRHbDJaU2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUNncElEMCtJSHRjYmlBZ1kyOXVjM1FnWm1Gc1lXZEpibkIxZEVacFpXeGtjeUE5SUZ0ZE8xeHVJQ0JqYjI1emRDQm1iM0p0U1c1d2RYUnpJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG1admNtMWZYMlpwWld4a0lHbHVjSFYwSnlrN1hHNWNiaUFnWm05eWJVbHVjSFYwY3k1bWIzSkZZV05vS0NobWIzSnRTVzV3ZFhRc0lHa3BJRDArSUh0Y2JpQWdJQ0JwWmlBb1ptOXliVWx1Y0hWMExuWmhiSFZsTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lHWnZjbTFKYm5CMWRDNWpiRzl6WlhOMEtDY3VabTl5YlY5ZlptbGxiR1FuS1M1amJHRnpjMHhwYzNRdVlXUmtLQ2RtYVd4c1pXUW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1iM0p0U1c1d2RYUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25hVzV3ZFhRbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9abTl5YlVsdWNIVjBMblpoYkdsa2FYUjVMblpoYkdsa0tTQjdYRzRnSUNBZ0lDQWdJR1p2Y20xSmJuQjFkQzVqYkc5elpYTjBLQ2N1Wm05eWJWOWZabWxsYkdRbktTNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZHBiblpoYkdsa0p5azdYRzRnSUNBZ0lDQWdJR1p2Y20xSmJuQjFkQzVqYkc5elpYTjBLQ2N1Wm05eWJWOWZabWxsYkdRbktTNWpiR0Z6YzB4cGMzUXVZV1JrS0NkMllXeHBaQ2NwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9JV1poYkdGblNXNXdkWFJHYVdWc1pITmJhVjBwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXliVWx1Y0hWMExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTm9ZVzVuWlNjc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWm05eWJVbHVjSFYwTG5aaGJHbGthWFI1TG5aaGJHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0U1c1d2RYUXVZMnh2YzJWemRDZ25MbVp2Y20xZlgyWnBaV3hrSnlrdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbmFXNTJZV3hwWkNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJVbHVjSFYwTG1Oc2IzTmxjM1FvSnk1bWIzSnRYMTltYVdWc1pDY3BMbU5zWVhOelRHbHpkQzVoWkdRb0ozWmhiR2xrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doWm05eWJVbHVjSFYwTG5aaGJHbGthWFI1TG5aaGJHbGtJQ1ltSUdadmNtMUpibkIxZEM1MllXeDFaUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNKdFNXNXdkWFF1WTJ4dmMyVnpkQ2duTG1admNtMWZYMlpwWld4a0p5a3VZMnhoYzNOTWFYTjBMbUZrWkNnbmFXNTJZV3hwWkNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJVbHVjSFYwTG1Oc2IzTmxjM1FvSnk1bWIzSnRYMTltYVdWc1pDY3BMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KM1poYkdsa0p5azdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFKYm5CMWRDNWpiRzl6WlhOMEtDY3VabTl5YlY5ZlptbGxiR1FuS1M1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkcGJuWmhiR2xrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNKdFNXNXdkWFF1WTJ4dmMyVnpkQ2duTG1admNtMWZYMlpwWld4a0p5a3VZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25kbUZzYVdRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNtMUpibkIxZEM1amJHOXpaWE4wS0NjdVptOXliVjlmWm1sbGJHUW5LUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RtYVd4c1pXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdadmNtMUpibkIxZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkaWJIVnlKeXdnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG1iM0p0U1c1d2RYUXVkbUZzYVdScGRIa3VkbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNtMUpibkIxZEM1amJHOXpaWE4wS0NjdVptOXliVjlmWm1sbGJHUW5LUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RwYm5aaGJHbGtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0U1c1d2RYUXVZMnh2YzJWemRDZ25MbVp2Y20xZlgyWnBaV3hrSnlrdVkyeGhjM05NYVhOMExtRmtaQ2duZG1Gc2FXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRm1iM0p0U1c1d2RYUXVkbUZzYVdScGRIa3VkbUZzYVdRZ0ppWWdabTl5YlVsdWNIVjBMblpoYkhWbExteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFKYm5CMWRDNWpiRzl6WlhOMEtDY3VabTl5YlY5ZlptbGxiR1FuS1M1amJHRnpjMHhwYzNRdVlXUmtLQ2RwYm5aaGJHbGtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0U1c1d2RYUXVZMnh2YzJWemRDZ25MbVp2Y20xZlgyWnBaV3hrSnlrdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbmRtRnNhV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJVbHVjSFYwTG1Oc2IzTmxjM1FvSnk1bWIzSnRYMTltYVdWc1pDY3BMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMmx1ZG1Gc2FXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFKYm5CMWRDNWpiRzl6WlhOMEtDY3VabTl5YlY5ZlptbGxiR1FuS1M1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkMllXeHBaQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5YlVsdWNIVjBMbU5zYjNObGMzUW9KeTVtYjNKdFgxOW1hV1ZzWkNjcExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyWnBiR3hsWkNjcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdabTl5YlVsdWNIVjBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMlp2WTNWekp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR1p2Y20xSmJuQjFkQzVqYkc5elpYTjBLQ2N1Wm05eWJWOWZabWxsYkdRbktTNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZHBiblpoYkdsa0p5azdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lHWmhiR0ZuU1c1d2RYUkdhV1ZzWkhOYmFWMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5S1R0Y2JseHVJQ0JqYjI1emRDQndZWE56ZDI5eVpGUnZaMmRzWlhNZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VabTl5YlY5ZmMyaHZkeTF3WVhOemQyOXlaQ2NwTzF4dVhHNGdJSEJoYzNOM2IzSmtWRzluWjJ4bGN5NW1iM0pGWVdOb0tDaHdZWE56ZDI5eVpGUnZaMmRzWlNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhCaGMzTjNiM0prU1c1d2RYUWdQU0J3WVhOemQyOXlaRlJ2WjJkc1pTNWpiRzl6WlhOMEtDY3VabTl5YlY5ZlptbGxiR1FuS1M1eGRXVnllVk5sYkdWamRHOXlLQ2RwYm5CMWRGdDBlWEJsUFZ3aWNHRnpjM2R2Y21SY0lpY3BPMXh1WEc0Z0lDQWdhV1lnS0hCaGMzTjNiM0prU1c1d2RYUXBJSHRjYmlBZ0lDQWdJSEJoYzNOM2IzSmtWRzluWjJ4bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9jR0Z6YzNkdmNtUlViMmRuYkdVdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZGhZM1JwZG1VbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhCaGMzTjNiM0prVkc5bloyeGxMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMkZqZEdsMlpTY3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NHRnpjM2R2Y21SSmJuQjFkQzUwZVhCbElEMGdKM0JoYzNOM2IzSmtKenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCd1lYTnpkMjl5WkZSdloyZHNaUzVqYkdGemMweHBjM1F1WVdSa0tDZGhZM1JwZG1VbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUhCaGMzTjNiM0prU1c1d2RYUXVkSGx3WlNBOUlDZDBaWGgwSnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0JqYjI1emRDQm1iM0p0VTJWc1pXTjBjeUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1bWIzSnRYMTltYVdWc1pDMHRjMlZzWldOMEp5azdYRzVjYmlBZ1kyOXVjM1FnWm05eWJWTmxiR1ZqZEU5eVoyRnVhWE5oZEdsdmJsSnZkM01nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdVptOXliVjlmY205M0xTMXZjbWRoYm1sellYUnBiMjRuS1R0Y2JseHVJQ0JqYjI1emRDQnZjbWRoYm1sellYUnBiMjVHYVdWc1pGUnZaMmRzWlNBOUlDaDJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnTXlrZ2UxeHVJQ0FnSUNBZ1ptOXliVk5sYkdWamRFOXlaMkZ1YVhOaGRHbHZibEp2ZDNNdVptOXlSV0ZqYUNnb1ptOXliVk5sYkdWamRFOXlaMkZ1YVhOaGRHbHZibEp2ZHlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBibkIxZEVacFpXeGtJRDBnWm05eWJWTmxiR1ZqZEU5eVoyRnVhWE5oZEdsdmJsSnZkeTV4ZFdWeWVWTmxiR1ZqZEc5eUtDZHBibkIxZENjcE8xeHVJQ0FnSUNBZ0lDQnBibkIxZEVacFpXeGtMblpoYkhWbElEMGdKeWM3WEc0Z0lDQWdJQ0FnSUdsdWNIVjBSbWxsYkdRdWNtVnhkV2x5WldRZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lHWnZjbTFUWld4bFkzUlBjbWRoYm1sellYUnBiMjVTYjNjdVkyeGhjM05NYVhOMExtRmtaQ2duYzJodmR5Y3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHWnZjbTFUWld4bFkzUlBjbWRoYm1sellYUnBiMjVTYjNkekxtWnZja1ZoWTJnb0tHWnZjbTFUWld4bFkzUlBjbWRoYm1sellYUnBiMjVTYjNjcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzV3ZFhSR2FXVnNaQ0E5SUdadmNtMVRaV3hsWTNSUGNtZGhibWx6WVhScGIyNVNiM2N1Y1hWbGNubFRaV3hsWTNSdmNpZ25hVzV3ZFhRbktUdGNiaUFnSUNBZ0lDQWdhVzV3ZFhSR2FXVnNaQzUyWVd4MVpTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNCcGJuQjFkRVpwWld4a0xuSmxjWFZwY21Wa0lEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdabTl5YlZObGJHVmpkRTl5WjJGdWFYTmhkR2x2YmxKdmR5NWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZHphRzkzSnlrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdabTl5YlZObGJHVmpkSE11Wm05eVJXRmphQ2dvWm05eWJWTmxiR1ZqZENrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdadmNtMVRaV3hsWTNSSmJuQjFkRlJsZUhRZ1BTQm1iM0p0VTJWc1pXTjBMbkYxWlhKNVUyVnNaV04wYjNJb0oybHVjSFYwVzNSNWNHVTlYQ0owWlhoMFhDSmRKeWs3WEc0Z0lDQWdZMjl1YzNRZ1ptOXliVk5sYkdWamRFbHVjSFYwU1dRZ1BTQm1iM0p0VTJWc1pXTjBMbkYxWlhKNVUyVnNaV04wYjNJb0oybHVjSFYwVzNSNWNHVTlYQ0pvYVdSa1pXNWNJbDBuS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSE5sZEZaaGJIVmxTVzV3ZFhSeklEMGdLSFJsZUhRc0lIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvWm05eWJWTmxiR1ZqZEVsdWNIVjBWR1Y0ZENBbUppQm1iM0p0VTJWc1pXTjBTVzV3ZFhSSlpDa2dlMXh1SUNBZ0lDQWdJQ0JtYjNKdFUyVnNaV04wU1c1d2RYUlVaWGgwTG1Oc2IzTmxjM1FvSnk1bWIzSnRYMTltYVdWc1pDY3BMbU5zWVhOelRHbHpkQzVoWkdRb0ozWmhiR2xrSnlrN1hHNGdJQ0FnSUNBZ0lHWnZjbTFUWld4bFkzUkpibkIxZEZSbGVIUXVkbUZzZFdVZ1BTQjBaWGgwTzF4dUlDQWdJQ0FnSUNCbWIzSnRVMlZzWldOMFNXNXdkWFJKWkM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCelpYUkJZM1JwZG1WSmRHVnRJRDBnS0dWc1pXMWxiblFzSUdWc1pXMWxiblJ6S1NBOVBpQjdYRzRnSUNBZ0lDQjFia0ZqZEdsMlpTaGxiR1Z0Wlc1MGN5d2dKMkZqZEdsMlpTY3BPMXh1WEc0Z0lDQWdJQ0JsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb0oyRmpkR2wyWlNjcE8xeHVYRzRnSUNBZ0lDQnpaWFJXWVd4MVpVbHVjSFYwY3lobGJHVnRaVzUwTG5SbGVIUkRiMjUwWlc1MExDQmxiR1Z0Wlc1MExtUmhkR0Z6WlhRdWRtRnNkV1VwTzF4dVhHNGdJQ0FnSUNCbWIzSnRVMlZzWldOMFNXNXdkWFJVWlhoMExtTnNiM05sYzNRb0p5NW1iM0p0WDE5bWFXVnNaQ2NwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM05sYkdWamRHVmtKeWs3WEc1Y2JpQWdJQ0FnSUc5eVoyRnVhWE5oZEdsdmJrWnBaV3hrVkc5bloyeGxLSEJoY25ObFNXNTBLR1p2Y20xVFpXeGxZM1JKYm5CMWRFbGtMblpoYkhWbExDQXhNQ2twTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JqYjI1emRDQm1iM0p0VTJWc1pXTjBUR2x6ZENBOUlHWnZjbTFUWld4bFkzUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxtWnZjbTFmWDNObGJHVmpkQ2NwTzF4dUlDQWdJR052Ym5OMElHWnZjbTFUWld4bFkzUk1hWE4wU1hSbGJYTWdQU0JtYjNKdFUyVnNaV04wVEdsemREOHVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25iR2tuS1R0Y2JseHVJQ0FnSUdsbUlDaG1iM0p0VTJWc1pXTjBTVzV3ZFhSSlpDNTJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWm05eWJWTmxiR1ZqZEV4cGMzUkpkR1Z0SUQwZ1cxMWNiaUFnSUNBZ0lDQWdMbVpwYkhSbGNseHVJQ0FnSUNBZ0lDQXVZMkZzYkNobWIzSnRVMlZzWldOMFRHbHpkRWwwWlcxekxDQW9hWFFwSUQwK0lHbDBMbVJoZEdGelpYUXVkbUZzZFdVZ1BUMDlJR1p2Y20xVFpXeGxZM1JKYm5CMWRFbGtMblpoYkhWbEtWc3dYVHRjYmx4dUlDQWdJQ0FnYzJWMFFXTjBhWFpsU1hSbGJTaG1iM0p0VTJWc1pXTjBUR2x6ZEVsMFpXMHNJR1p2Y20xVFpXeGxZM1JNYVhOMFNYUmxiWE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1p2Y20xVFpXeGxZM1JNYVhOMFNYUmxiWE11Wm05eVJXRmphQ2dvWm05eWJWTmxiR1ZqZEV4cGMzUkpkR1Z0S1NBOVBpQjdYRzRnSUNBZ0lDQm1iM0p0VTJWc1pXTjBUR2x6ZEVsMFpXMHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lITmxkRUZqZEdsMlpVbDBaVzBvWm05eWJWTmxiR1ZqZEV4cGMzUkpkR1Z0TENCbWIzSnRVMlZzWldOMFRHbHpkRWwwWlcxektUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdabTl5YlZObGJHVmpkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lHWnZjbTFUWld4bFkzUXVZMnhoYzNOTWFYTjBMblJ2WjJkc1pTZ25ZV04wYVhabEp5azdYRzVjYmlBZ0lDQWdJR1p2Y20xVFpXeGxZM1JNYVhOMFB5NWpiR0Z6YzB4cGMzUXVkRzluWjJ4bEtDZGhZM1JwZG1VbktUdGNiaUFnSUNCOUtUdGNiaUFnZlNrN1hHNTlPMXh1SWl3aWFXMXdiM0owSUhzZ1FXTmpiM0prYVc5dWN5QjlJR1p5YjIwZ0p5NHZkbVZ1Wkc5eUwyRmpZMjl5WkdsdmJuTW5PMXh1WEc1c1pYUWdZV05qYjNKa2FXOXVjenRjYmx4dVkyOXVjM1FnYVc1cGRFRmpZMjl5WkdsdmJuTWdQU0FvS1NBOVBpQjdYRzRnSUdGalkyOXlaR2x2Ym5NZ1BTQnVaWGNnUVdOamIzSmthVzl1Y3lncE8xeHVJQ0F2THlEUW1OR0IwTC9RdnRDNzBZelF0OUdEMExuUmd0QzFJTkN5SU5HQTBMRFF0OUdBMExEUXNkQyswWUxRdXRDMUlOR04wTHJSZ2RDLzBMN1JnTkdDMExqUmdOR0QwTFhRdk5HRDBZNGcwTC9RdGRHQTBMWFF2TkMxMEwzUXZkR0QwWTRnWVdOamIzSmthVzl1Y3l3Z2QybHVaRzkzSU5HQjBMVFF0ZEM3MExEUXZTRFF0TkM3MFk4ZzBMSFJqZEM2MFkzUXZkQzAwTEJjYmlBZ2QybHVaRzkzTG1GalkyOXlaR2x2Ym5NZ1BTQmhZMk52Y21ScGIyNXpPMXh1ZlR0Y2JseHVaWGh3YjNKMElIc2dhVzVwZEVGalkyOXlaR2x2Ym5Nc0lHRmpZMjl5WkdsdmJuTWdmVHRjYmlJc0ltbHRjRzl5ZENCa1lYUmxVR2xqYTJWeUlHWnliMjBnSnk0dlpHRjBaUzF3YVdOclpYSW5PMXh1YVcxd2IzSjBJSFZ6WlhJZ1puSnZiU0FuTGk5MWMyVnlKenRjYmk4dklHbHRjRzl5ZENCMWMyVnlJR1p5YjIwZ0p5NHZkWE5sY2ljN1hHNXBiWEJ2Y25RZ1lXSnZkWFFnWm5KdmJTQW5MaTloWW05MWRDYzdYRzR2THlCcGJYQnZjblFnWm1GeElHWnliMjBnSnk0dlptRnhKenRjYm1sdGNHOXlkQ0J5WVc1blpTQm1jbTl0SUNjdUwzSmhibWRsSnp0Y2JtbHRjRzl5ZENCbWIzSnRJR1p5YjIwZ0p5NHZabTl5YlNjN1hHNXBiWEJ2Y25RZ2V5QnBibWwwUkhKdmNGcHZibVVnZlNCbWNtOXRJQ2N1TDJSeWIzQjZiMjVsSnp0Y2JtbHRjRzl5ZENCN0lHbHVhWFJCWTJOdmNtUnBiMjV6SUgwZ1puSnZiU0FuTGk5cGJtbDBMV0ZqWTI5eVpHbHZibk1uTzF4dWFXMXdiM0owSUhzZ2FXNXBkRk5oYm1SM2FXTm9UV1Z1ZFNCOUlHWnliMjBnSnk0dmMyRnVaSGRwWTJnbk8xeHVYRzVrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RFVDAxRGIyNTBaVzUwVEc5aFpHVmtKeXdnS0NrZ1BUNGdlMXh1SUNBdkx5QjFjMlZ5S0NrN1hHNGdJQzh2SUdGaWIzVjBLQ2s3WEc0Z0lHUmhkR1ZRYVdOclpYSW9LVHRjYmlBZ2RYTmxjaWdwTzF4dUlDQXZMeUJtWVhFb0tUdGNiaUFnY21GdVoyVW9LVHRjYmlBZ1ptOXliU2dwTzF4dUlDQnBibWwwUkhKdmNGcHZibVVvS1R0Y2JpQWdhVzVwZEVGalkyOXlaR2x2Ym5Nb0tUdGNiaUFnYVc1cGRGTmhibVIzYVdOb1RXVnVkU2dwTzF4dWZTazdYRzRpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSEpoYm1kbGN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTV5WVc1blpTY3BPMXh1WEc0Z0lHbG1JQ2h5WVc1blpYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpoYm1kbGN5NW1iM0pGWVdOb0tDaHlZVzVuWlNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NtRnVaMlZKYm5CMWRDQTlJSEpoYm1kbExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1eVlXNW5aVjlmYVc1d2RYUW5LVHRjYmlBZ0lDQWdJR052Ym5OMElISmhibWRsVUhKdlozSmxjM01nUFNCeVlXNW5aUzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjbUZ1WjJWZlgzQnliMmR5WlhOekp5azdYRzRnSUNBZ0lDQmpiMjV6ZENCeVlXNW5aVTkxZEhCMWRDQTlJSEpoYm1kbExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1eVlXNW5aVjlmYjNWMGNIVjBJR2x1Y0hWMEp5azdYRzVjYmlBZ0lDQWdJR052Ym5OMElHNXBZMlZVYUc5MWMyRnVaQ0E5SUNoemRISnBibWNwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtVjNVM1J5YVc1bklEMGdUblZ0WW1WeUxtbHpUbUZPS0hOMGNtbHVaeWtnUHlBbkp5QTZJSE4wY21sdVp6dGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzVTNSeWFXNW5MblJ2VTNSeWFXNW5LQ2xjYmlBZ0lDQWdJQ0FnSUNBdWMzQnNhWFFvSnljcFhHNGdJQ0FnSUNBZ0lDQWdMbkpsZG1WeWMyVW9LVnh1SUNBZ0lDQWdJQ0FnSUM1dFlYQW9LR05vWVhJc0lHa3BJRDArSUdOb1lYSWdLeUFvYVNBbElETWdQeUFuSnlBNklDY2dKeWtwWEc0Z0lDQWdJQ0FnSUNBZ0xuSmxkbVZ5YzJVb0tWeHVJQ0FnSUNBZ0lDQWdJQzVxYjJsdUtDY25LVnh1SUNBZ0lDQWdJQ0FnSUM1MGNtbHRLQ2s3WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCcFppQW9jbUZ1WjJWSmJuQjFkQ0FtSmlCeVlXNW5aVkJ5YjJkeVpYTnpJQ1ltSUhKaGJtZGxUM1YwY0hWMEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIb3hJRDBnY0dGeWMyVkpiblFvY21GdVoyVkpibkIxZEM1dGFXNHNJREV3S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZWpJZ1BTQndZWEp6WlVsdWRDaHlZVzVuWlVsdWNIVjBMbTFoZUN3Z01UQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjRJRDBnTVRBd0lDOGdLSG95SUMwZ2VqRXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjVJRDBnS0MxNk1TQXFJREV3TUNrZ0x5QW9laklnTFNCNk1TazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaSEpoZDFCeWIyZHlaWE56SUQwZ0tIWmhiSFZsTENCMGVYQmxJRDBnSjNKaGJtZGxKeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCMllXeDFaVWx1Ym1WeUlEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkeVlXNW5aU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpoYm1kbFQzVjBjSFYwTG5aaGJIVmxJRDBnZG1Gc2RXVkpibTVsY2p0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21GdVoyVlBkWFJ3ZFhRdVkyeHZjMlZ6ZENnbkxuSmhibWRsWDE5dmRYUndkWFFuS1M1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkbGNuSnZjaWNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WVc1blpVOTFkSEIxZEM1MllXeDFaU0E5SUc1cFkyVlVhRzkxYzJGdVpDaDJZV3gxWlVsdWJtVnlLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWSmJtNWxjaUE5SUhCaGNuTmxTVzUwS0haaGJIVmxTVzV1WlhJdWNtVndiR0ZqWlNndlhGeHpMMmNzSUNjbktTd2dNVEFwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2VqSWdQajBnZG1Gc2RXVkpibTVsY2lBbUppQjZNU0E4UFNCMllXeDFaVWx1Ym1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmhibWRsU1c1d2RYUXVkbUZzZFdVZ1BTQjJZV3gxWlVsdWJtVnlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpoYm1kbFQzVjBjSFYwTG1Oc2IzTmxjM1FvSnk1eVlXNW5aVjlmYjNWMGNIVjBKeWt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duWlhKeWIzSW5LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVc1blpVOTFkSEIxZEM1MllXeDFaU0E5SUc1cFkyVlVhRzkxYzJGdVpDaDJZV3gxWlVsdWJtVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKaGJtZGxUM1YwY0hWMExtTnNiM05sYzNRb0p5NXlZVzVuWlY5ZmIzVjBjSFYwSnlrdVkyeGhjM05NYVhOMExtRmtaQ2duWlhKeWIzSW5LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVc1blpVOTFkSEIxZEM1MllXeDFaU0E5SUc1cFkyVlVhRzkxYzJGdVpDaDJZV3gxWlVsdWJtVnlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbFNXNXVaWElnUGlCNk1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtRnVaMlZRY205bmNtVnpjeTV6ZEhsc1pTNTNhV1IwYUNBOUlHQWtleWgyWVd4MVpVbHVibVZ5SUNvZ2VDa2dLeUI1ZlNWZ08xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVlXNW5aVkJ5YjJkeVpYTnpMbk4wZVd4bExuZHBaSFJvSUQwZ0p6QWxKenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnWkhKaGQxQnliMmR5WlhOektISmhibWRsU1c1d2RYUXVkbUZzZFdVc0lDZHlZVzVuWlNjcE8xeHVYRzRnSUNBZ0lDQWdJSEpoYm1kbFNXNXdkWFF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYVc1d2RYUW5MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnWkhKaGQxQnliMmR5WlhOektISmhibWRsU1c1d2RYUXVkbUZzZFdVc0lDZHlZVzVuWlNjcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCeVlXNW5aVTkxZEhCMWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHBibkIxZENjc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQmtjbUYzVUhKdlozSmxjM01vY21GdVoyVlBkWFJ3ZFhRdWRtRnNkV1VzSUNkMFpYaDBKeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMnRsZVhCeVpYTnpKeXdnS0dWMmRDa2dQVDRnS0M5Yk1DMDVYRnh6WFM4dWRHVnpkQ2hUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0dWMmRDNXJaWGtwS1NrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OU8xeHVJaXdpYVcxd2IzSjBJSHNnVTJOeWIyeHNURzlqYXlCOUlHWnliMjBnSnk0dmRtVnVaRzl5TDNOamNtOXNiQzFzYjJOckp6dGNibHh1WTI5dWMzUWdZbkpsWVd0d2IybHVkRTFrSUQwZ2QybHVaRzkzTG0xaGRHTm9UV1ZrYVdFb0p5aHRhVzR0ZDJsa2RHZzZNVEF5TkhCNEtTY3BPMXh1WTI5dWMzUWdhR1ZoWkdWeVRHOW5ieUE5SUdSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KMXRrWVhSaExXaGxZV1JsY2kxc2IyZHZYU2NwTzF4dVkyOXVjM1FnYzJGdVpIZHBZMmdnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RiWkdGMFlTMXpZVzVrZDJsamFGMG5LVHRjYm1OdmJuTjBJRzVoZGlBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSjF0a1lYUmhMVzFoYVc0dGJtRjJYU2NwTzF4dVkyOXVjM1FnYzJOeWIyeHNURzlqYXlBOUlHNWxkeUJUWTNKdmJHeE1iMk5yS0NrN1hHNWNibU52Ym5OMElHOXdaVzVOWlc1MUlEMGdLQ2tnUFQ0Z2UxeHVJQ0J6WTNKdmJHeE1iMk5yTG1ScGMyRmliR1ZUWTNKdmJHeHBibWNvS1R0Y2JpQWdjMkZ1WkhkcFkyZ3VZMnhoYzNOTWFYTjBMbUZrWkNnbmFYTXRZV04wYVhabEp5azdYRzRnSUhOaGJtUjNhV05vTG1GeWFXRlFjbVZ6YzJWa0lEMGdKM1J5ZFdVbk8xeHVJQ0J1WVhZdVkyeGhjM05NYVhOMExtRmtaQ2duYVhNdFlXTjBhWFpsSnlrN1hHNGdJR2hsWVdSbGNreHZaMjh1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25hWE10YldWdWRTY3BPMXh1SUNBdkx5QnVZWFpKZEdWdExtWnZja1ZoWTJnb0tHbDBaVzBzSUdsdVpHVjRLU0E5UGlCN1hHNGdJQzh2SUNBZ2FYUmxiUzV6ZEhsc1pTNTBjbUZ1YzJsMGFXOXVSR1ZzWVhrZ1BTQmdKSHN3TGpNZ0t5QnBibVJsZUNBcUlEQXVNbjF6WUR0Y2JpQWdMeThnZlNrN1hHNTlPMXh1WEc1amIyNXpkQ0JqYkc5elpVMWxiblVnUFNBb0tTQTlQaUI3WEc0Z0lITmpjbTlzYkV4dlkyc3VaVzVoWW14bFUyTnliMnhzYVc1bktDazdYRzRnSUhOaGJtUjNhV05vTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJsekxXRmpkR2wyWlNjcE8xeHVJQ0J6WVc1a2QybGphQzVoY21saFVISmxjM05sWkNBOUlDZG1ZV3h6WlNjN1hHNGdJRzVoZGk1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkcGN5MWhZM1JwZG1VbktUdGNiaUFnYUdWaFpHVnlURzluYnk1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkcGN5MXRaVzUxSnlrN1hHNGdJQzh2SUc1aGRrbDBaVzB1Wm05eVJXRmphQ2dvYVhSbGJTa2dQVDRnZTF4dUlDQXZMeUFnSUdsMFpXMHVjM1I1YkdVdWRISmhibk5wZEdsdmJrUmxiR0Y1SUQwZ0p5YzdYRzRnSUM4dklIMHBPMXh1ZlR0Y2JseHVZMjl1YzNRZ1luSmxZV3R3YjJsdWRFTm9aV05yWlhJZ1BTQW9LU0E5UGlCN1hHNGdJR2xtSUNoaWNtVmhhM0J2YVc1MFRXUXViV0YwWTJobGN5a2dlMXh1SUNBZ0lHbG1JQ2h1WVhZdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZHBjeTFoWTNScGRtVW5LU2tnZTF4dUlDQWdJQ0FnWTJ4dmMyVk5aVzUxS0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdKeVpXRnJjRzlwYm5STlpDNWhaR1JNYVhOMFpXNWxjaWhpY21WaGEzQnZhVzUwUTJobFkydGxjaWs3WEc1OU8xeHVYRzVqYjI1emRDQnBibWwwVTJGdVpIZHBZMmhOWlc1MUlEMGdLQ2tnUFQ0Z2UxeHVJQ0JwWmlBb2MyRnVaSGRwWTJncElIdGNiaUFnSUNCellXNWtkMmxqYUM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUNncElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoellXNWtkMmxqYUM1aGNtbGhVSEpsYzNObFpDQTlQVDBnSjNSeWRXVW5LU0I3WEc0Z0lDQWdJQ0FnSUdOc2IzTmxUV1Z1ZFNncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2IzQmxiazFsYm5Vb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCaWNtVmhhM0J2YVc1MFEyaGxZMnRsY2lncE8xeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdleUJwYm1sMFUyRnVaSGRwWTJoTlpXNTFJSDA3WEc0aUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBb1pXeGxiV1Z1ZEhNc0lHRmpkR2wyWlVOc1lYTnpMQ0J5WlcxdmRtVlFZWEpsYm5SQlkzUnBkbVVwSUQwK0lIdGNiaUFnWld4bGJXVnVkSE11Wm05eVJXRmphQ2dvWld4bGJXVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5aGhZM1JwZG1WRGJHRnpjeWtwSUh0Y2JpQWdJQ0FnSUdWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hoWTNScGRtVkRiR0Z6Y3lrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h5WlcxdmRtVlFZWEpsYm5SQlkzUnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1d1lYSmxiblJPYjJSbExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb1lXTjBhWFpsUTJ4aGMzTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlPMXh1SWl3aUx5OGdaWGh3YjNKMElHUmxabUYxYkhRZ0tDa2dQVDRnZTF4dUx5OGdJQ0JqYjI1emRDQjFjMlZ5SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG5CaFoyVXRhR1ZoWkdWeVgxOTFjMlZ5SnlrN1hHNHZMMXh1THk4Z0lDQnBaaUFvZFhObGNpa2dlMXh1THk4Z0lDQWdJR052Ym5OMElIVnpaWEpVYjJkbmJHVWdQU0IxYzJWeUxuRjFaWEo1VTJWc1pXTjBiM0lvSnk1MWMyVnlYMTkwYjJkbmJHVW5LVHRjYmk4dklDQWdJQ0JqYjI1emRDQjFjMlZ5VEdsemRDQTlJSFZ6WlhJdWNYVmxjbmxUWld4bFkzUnZjaWduTG5WelpYSmZYMnhwYzNRbktUdGNiaTh2WEc0dkx5QWdJQ0FnWTI5dWMzUWdiMjVWYzJWeVZHOW5aMnhsVFc5MWMyVkZiblJsY2lBOUlDZ3BJRDArSUh0Y2JpOHZJQ0FnSUNBZ0lIVnpaWEpVYjJkbmJHVXVZMnhoYzNOTWFYTjBMbUZrWkNnbllXTjBhWFpsSnlrN1hHNHZMeUFnSUNBZ0lDQjFjMlZ5VEdsemRDNWpiR0Z6YzB4cGMzUXVZV1JrS0NkaFkzUnBkbVVuS1R0Y2JpOHZYRzR2THlBZ0lDQWdJQ0IxYzJWeUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sYkdWaGRtVW5MQ0J2YmxWelpYSk5iM1Z6WlV4bFlYWmxLVHRjYmk4dklDQWdJQ0FnSUhWelpYSlViMmRuYkdVdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWbGJuUmxjaWNzSUc5dVZYTmxjbFJ2WjJkc1pVMXZkWE5sUlc1MFpYSXBPMXh1THk4Z0lDQWdJSDA3WEc0dkwxeHVMeThnSUNBZ0lHTnZibk4wSUc5dVZYTmxjazF2ZFhObFRHVmhkbVVnUFNBb0tTQTlQaUI3WEc0dkx5QWdJQ0FnSUNCMWMyVnlWRzluWjJ4bExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyRmpkR2wyWlNjcE8xeHVMeThnSUNBZ0lDQWdkWE5sY2t4cGMzUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ZV04wYVhabEp5azdYRzR2TDF4dUx5OGdJQ0FnSUNBZ2RYTmxjbFJ2WjJkc1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldWdWRHVnlKeXdnYjI1VmMyVnlWRzluWjJ4bFRXOTFjMlZGYm5SbGNpazdYRzR2THlBZ0lDQWdJQ0IxYzJWeUxuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGJHVmhkbVVuTENCdmJsVnpaWEpOYjNWelpVeGxZWFpsS1R0Y2JpOHZJQ0FnSUNCOU8xeHVMeTljYmk4dklDQWdJQ0IxYzJWeVZHOW5aMnhsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxaVzUwWlhJbkxDQnZibFZ6WlhKVWIyZG5iR1ZOYjNWelpVVnVkR1Z5S1R0Y2JpOHZJQ0FnSUNCMWMyVnlMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGJHVmhkbVVuTENCdmJsVnpaWEpOYjNWelpVeGxZWFpsS1R0Y2JpOHZJQ0FnZlZ4dUx5OGdmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnS0NrZ1BUNGdlMXh1SUNCc1pYUWdZM1Z5Y21WdWRGUmhjbWRsZER0Y2JpQWdZMjl1YzNRZ2RYTmxja0oxZEhSdmJrTnNhV05yU0dGdVpHeGxjaUE5SUNobEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JXVnVkVWwwWlcwZ1BTQmxMblJoY21kbGRDNXVaWGgwUld4bGJXVnVkRk5wWW14cGJtYzdYRzRnSUNBZ2FXWWdLRzFsYm5WSmRHVnRJQ1ltSUcxbGJuVkpkR1Z0TG0xaGRHTm9aWE1vSnk1ZmFuTXRkWE5sY2kxc2FYTjBMbUZqZEdsMlpTY3BLU0I3WEc0Z0lDQWdJQ0J0Wlc1MVNYUmxiUzV3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1bkxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyRmpkR2wyWlNjcE8xeHVJQ0FnSUNBZ2JXVnVkVWwwWlcwdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbllXTjBhWFpsSnlrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBWR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVdVdWRHRnlaMlYwTG1Oc2IzTmxjM1FvSnk1ZmFuTXRkWE5sY2kxc2FYTjBKeWtwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZSaGNtZGxkQzV3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1bkxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyRmpkR2wyWlNjcE8xeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFZHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJGamRHbDJaU2NwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYldWdWRVbDBaVzBnSmlZZ2JXVnVkVWwwWlcwdWJXRjBZMmhsY3lnbkxsOXFjeTExYzJWeUxXeHBjM1FuS1NrZ2UxeHVJQ0FnSUNBZ2JXVnVkVWwwWlcwdWNISmxkbWx2ZFhORmJHVnRaVzUwVTJsaWJHbHVaeTVqYkdGemMweHBjM1F1WVdSa0tDZGhZM1JwZG1VbktUdGNiaUFnSUNBZ0lHMWxiblZKZEdWdExtTnNZWE56VEdsemRDNWhaR1FvSjJGamRHbDJaU2NwTzF4dUlDQWdJQ0FnWTNWeWNtVnVkRlJoY21kbGRDQTlJRzFsYm5WSmRHVnRPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JpQWdaRzlqZFcxbGJuUXVZbTlrZVM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhWelpYSkNkWFIwYjI1RGJHbGphMGhoYm1Sc1pYSXBPMXh1ZlR0Y2JpSXNJbVY0Y0c5eWRDQmpiR0Z6Y3lCQlkyTnZjbVJwYjI1eklIdGNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2RHaHBjeTVmYjNCbGJraGxhV2RvZENBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmZDJsdVpHOTNWMmxrZEdnZ1BTQjNhVzVrYjNjdWFXNXVaWEpYYVdSMGFEdGNiaUFnSUNCMGFHbHpMbDlrYjJOMWJXVnVkRU5zYVdOclNHRnVaR3hsY2lBOUlIUm9hWE11WDJSdlkzVnRaVzUwUTJ4cFkydElZVzVrYkdWeUxtSnBibVFvZEdocGN5azdYRzRnSUNBZ2RHaHBjeTVmZDJsdVpHOTNVbVZ6YVhwbFNHRnVaR3hsY2lBOUlIUm9hWE11WDNkcGJtUnZkMUpsYzJsNlpVaGhibVJzWlhJdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCMGFHbHpMbDlwYm1sMEtDazdYRzRnSUgxY2JseHVJQ0JmYVc1cGRDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJHeFZjR1JoZEdVb0tUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhSb2FYTXVYMlJ2WTNWdFpXNTBRMnhwWTJ0SVlXNWtiR1Z5S1R0Y2JpQWdJQ0IzYVc1a2IzY3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jbVZ6YVhwbEp5d2dkR2hwY3k1ZmQybHVaRzkzVW1WemFYcGxTR0Z1Wkd4bGNpazdYRzRnSUgxY2JseHVJQ0JmWkc5amRXMWxiblJEYkdsamEwaGhibVJzWlhJb1pYWjBLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RHRnlaMlYwSUQwZ1pYWjBMblJoY21kbGREdGNiaUFnSUNCcFppQW9JWFJoY21kbGRDNWpiRzl6WlhOMEtDZGJaR0YwWVMxaFkyTnZjbVJwYjI0OVhDSmlkWFIwYjI1Y0lsMG5LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHVjJkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lHTnZibk4wSUdWc1pXMWxiblFnUFNCMFlYSm5aWFF1WTJ4dmMyVnpkQ2duVzJSaGRHRXRZV05qYjNKa2FXOXVQVndpWld4bGJXVnVkRndpWFNjcE8xeHVJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25hWE10WVdOMGFYWmxKeWtwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMnh2YzJWQlkyTnZjbVJwYjI0b1pXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YjNCbGJrRmpZMjl5WkdsdmJpaGxiR1Z0Wlc1MEtUdGNiaUFnZlZ4dVhHNGdJRjkzYVc1a2IzZFNaWE5wZW1WSVlXNWtiR1Z5S0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5M2FXNWtiM2RYYVdSMGFDQTlQVDBnZDJsdVpHOTNMbWx1Ym1WeVYybGtkR2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVmZDJsdVpHOTNWMmxrZEdnZ1BTQjNhVzVrYjNjdWFXNXVaWEpYYVdSMGFEdGNiaUFnSUNCMGFHbHpMblZ3WkdGMFpVRmpZMjl5WkdsdmJuTklaV2xuYUhRb0tUdGNiaUFnZlZ4dVhHNGdJR05zYjNObFFXeHNRV05qYjNKa2FXOXVLSEJoY21WdWRDa2dlMXh1SUNBZ0lHTnZibk4wSUdWc1pXMWxiblJ6SUQwZ2NHRnlaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMV0ZqWTI5eVpHbHZiajFjSW1Wc1pXMWxiblJjSWwwbktUdGNiaUFnSUNCbGJHVnRaVzUwY3k1bWIzSkZZV05vS0NobGJHVnRaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwVUdGeVpXNTBJRDBnWld4bGJXVnVkQzVqYkc5elpYTjBLQ2RiWkdGMFlTMWhZMk52Y21ScGIyNDlYQ0p3WVhKbGJuUmNJbDBuS1R0Y2JpQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFVHRnlaVzUwSUQwOVBTQndZWEpsYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amJHOXpaVUZqWTI5eVpHbHZiaWhsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhWd1pHRjBaVUZqWTI5eVpHbHZibk5JWldsbmFIUW9aV3hsYldWdWRDQTlJRzUxYkd3cElIdGNiaUFnSUNCcFppQW9aV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZENBOUlHVnNaVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduVzJSaGRHRXRZV05qYjNKa2FXOXVQVndpWTI5dWRHVnVkRndpWFNjcE8xeHVJQ0FnSUNBZ1kyOXVkR1Z1ZEM1emRIbHNaUzUwY21GdWMybDBhVzl1SUQwZ0oyNXZibVVuTzF4dUlDQWdJQ0FnWTI5dWRHVnVkQzV6ZEhsc1pTNXRZWGhJWldsbmFIUWdQU0JnSkh0amIyNTBaVzUwTG5OamNtOXNiRWhsYVdkb2RIMXdlR0E3WEc0Z0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHVnVkQzV6ZEhsc1pTNTBjbUZ1YzJsMGFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnZjR1Z1Uld4bGJXVnVkSE1nUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkYlpHRjBZUzFoWTJOdmNtUnBiMjQ5WENKbGJHVnRaVzUwWENKZExtbHpMV0ZqZEdsMlpTY3BPMXh1SUNBZ0lHOXdaVzVGYkdWdFpXNTBjeTVtYjNKRllXTm9LQ2h2Y0dWdVJXeGxiV1Z1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZENBOUlHOXdaVzVGYkdWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0oxdGtZWFJoTFdGalkyOXlaR2x2YmoxY0ltTnZiblJsYm5SY0lsMG5LVHRjYmlBZ0lDQWdJR052Ym5SbGJuUXVjM1I1YkdVdWRISmhibk5wZEdsdmJpQTlJQ2R1YjI1bEp6dGNiaUFnSUNBZ0lHTnZiblJsYm5RdWMzUjViR1V1YldGNFNHVnBaMmgwSUQwZ1lDUjdZMjl1ZEdWdWRDNXpZM0p2Ykd4SVpXbG5hSFI5Y0hoZ08xeHVJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5RdWMzUjViR1V1ZEhKaGJuTnBkR2x2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHWjFiR3hWY0dSaGRHVW9jR0Z5Wlc1MElEMGdiblZzYkN3Z2RISmhibk5wZEdsdmJpQTlJR1poYkhObEtTQjdYRzRnSUNBZ2JHVjBJRzl3Wlc1RmJHVnRaVzUwY3p0Y2JpQWdJQ0JwWmlBb2NHRnlaVzUwS1NCN1hHNGdJQ0FnSUNCdmNHVnVSV3hsYldWdWRITWdQU0J3WVhKbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMlJoZEdFdFlXTmpiM0prYVc5dVBWd2laV3hsYldWdWRGd2lYUzVwY3kxaFkzUnBkbVVuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiM0JsYmtWc1pXMWxiblJ6SUQwZ1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnblcyUmhkR0V0WVdOamIzSmthVzl1UFZ3aVpXeGxiV1Z1ZEZ3aVhTNXBjeTFoWTNScGRtVW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2IzQmxia1ZzWlcxbGJuUnpMbVp2Y2tWaFkyZ29LRzl3Wlc1RmJHVnRaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCcGJtNWxjbEJoY21WdWRDQTlJRzl3Wlc1RmJHVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KMXRrWVhSaExXRmpZMjl5WkdsdmJqMWNJbkJoY21WdWRGd2lYU2NwTzF4dUlDQWdJQ0FnYVdZZ0tHbHVibVZ5VUdGeVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdWIzQmxia0ZqWTI5eVpHbHZiaWh2Y0dWdVJXeGxiV1Z1ZEN3Z2RISmhibk5wZEdsdmJpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J2Y0dWdVFXTmpiM0prYVc5dUtHVnNaVzFsYm5Rc0lIUnlZVzV6YVhScGIyNGdQU0IwY25WbEtTQjdYRzRnSUNBZ1kyOXVjM1FnY0dGeVpXNTBSV3hsYldWdWRDQTlJR1ZzWlcxbGJuUXVZMnh2YzJWemRDZ25XMlJoZEdFdFlXTmpiM0prYVc5dVBWd2ljR0Z5Wlc1MFhDSmRKeWs3WEc0Z0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZEVWc1pXMWxiblFnUFNCbGJHVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSW9KMXRrWVhSaExXRmpZMjl5WkdsdmJqMWNJbU52Ym5SbGJuUmNJbDBuS1R0Y2JpQWdJQ0IwYUdsekxsOXZjR1Z1U0dWcFoyaDBJQ3M5SUdOdmJuUmxiblJGYkdWdFpXNTBMbk5qY205c2JFaGxhV2RvZER0Y2JseHVJQ0FnSUdsbUlDaHdZWEpsYm5SRmJHVnRaVzUwTG1oaGMwRjBkSEpwWW5WMFpTZ25aR0YwWVMxemFXNW5iR1VuS1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVqYkc5elpVRnNiRUZqWTI5eVpHbHZiaWh3WVhKbGJuUkZiR1Z0Wlc1MEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMmx6TFdGamRHbDJaU2NwTzF4dUlDQWdJR2xtSUNoMGNtRnVjMmwwYVc5dUtTQjdYRzRnSUNBZ0lDQmpiMjUwWlc1MFJXeGxiV1Z1ZEM1emRIbHNaUzV0WVhoSVpXbG5hSFFnUFNCZ0pIdDBhR2x6TGw5dmNHVnVTR1ZwWjJoMGZYQjRZRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1kyOXVkR1Z1ZEVWc1pXMWxiblF1YzNSNWJHVXVkSEpoYm5OcGRHbHZiaUE5SUNkdWIyNWxKenRjYmlBZ0lDQWdJR052Ym5SbGJuUkZiR1Z0Wlc1MExuTjBlV3hsTG0xaGVFaGxhV2RvZENBOUlHQWtlM1JvYVhNdVgyOXdaVzVJWldsbmFIUjljSGhnTzF4dUlDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuUmxiblJGYkdWdFpXNTBMbk4wZVd4bExuUnlZVzV6YVhScGIyNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEJoY21WdWRFVnNaVzFsYm5RdVkyeHZjMlZ6ZENnblcyUmhkR0V0WVdOamIzSmthVzl1UFZ3aVpXeGxiV1Z1ZEZ3aVhTY3BLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtOXdaVzVCWTJOdmNtUnBiMjRvY0dGeVpXNTBSV3hsYldWdWRDNWpiRzl6WlhOMEtDZGJaR0YwWVMxaFkyTnZjbVJwYjI0OVhDSmxiR1Z0Wlc1MFhDSmRKeWtzSUhSeVlXNXphWFJwYjI0cE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgyOXdaVzVJWldsbmFIUWdQU0F3TzF4dUlDQjlYRzVjYmlBZ1kyeHZjMlZCWTJOdmNtUnBiMjRvWld4bGJXVnVkQ3dnZEhKaGJuTnBkR2x2YmlBOUlIUnlkV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQmpiMjUwWlc1MFJXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduVzJSaGRHRXRZV05qYjNKa2FXOXVQVndpWTI5dWRHVnVkRndpWFNjcE8xeHVJQ0FnSUdsbUlDZ2hZMjl1ZEdWdWRFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZHBjeTFoWTNScGRtVW5LVHRjYmlBZ0lDQnBaaUFvZEhKaGJuTnBkR2x2YmlrZ2UxeHVJQ0FnSUNBZ1kyOXVkR1Z1ZEVWc1pXMWxiblF1YzNSNWJHVXViV0Y0U0dWcFoyaDBJRDBnSnpBbk8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1MFpXNTBSV3hsYldWdWRDNXpkSGxzWlM1MGNtRnVjMmwwYVc5dUlEMGdKMjV2Ym1Vbk8xeHVJQ0FnSUNBZ1kyOXVkR1Z1ZEVWc1pXMWxiblF1YzNSNWJHVXViV0Y0U0dWcFoyaDBJRDBnSnpBbk8xeHVJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsYm5SRmJHVnRaVzUwTG5OMGVXeGxMblJ5WVc1emFYUnBiMjRnUFNCdWRXeHNPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzRpTENKbGVIQnZjblFnWTI5dWMzUWdhVzl6UTJobFkydGxjaUE5SUNncElEMCtJRnRjYmlBZ0oybFFZV1FnVTJsdGRXeGhkRzl5Snl4Y2JpQWdKMmxRYUc5dVpTQlRhVzExYkdGMGIzSW5MRnh1SUNBbmFWQnZaQ0JUYVcxMWJHRjBiM0luTEZ4dUlDQW5hVkJoWkNjc1hHNGdJQ2RwVUdodmJtVW5MRnh1SUNBbmFWQnZaQ2NzWEc1ZExtbHVZMngxWkdWektHNWhkbWxuWVhSdmNpNXdiR0YwWm05eWJTbGNiaUFnSUNBdkx5QnBVR0ZrSUc5dUlHbFBVeUF4TXlCa1pYUmxZM1JwYjI1Y2JpQWdJQ0I4ZkNBb2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDNXBibU5zZFdSbGN5Z25UV0ZqSnlrZ0ppWWdKMjl1ZEc5MVkyaGxibVFuSUdsdUlHUnZZM1Z0Wlc1MEtUdGNiaUlzSW1sdGNHOXlkQ0I3SUdsdmMwTm9aV05yWlhJZ2ZTQm1jbTl0SUNjdUwybHZjME5vWldOclpYSW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVMk55YjJ4c1RHOWpheUI3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSFJvYVhNdVgybHZjME5vWldOclpYSWdQU0JwYjNORGFHVmphMlZ5TzF4dUlDQWdJSFJvYVhNdVgyeHZZMnREYkdGemN5QTlJSFJvYVhNdVgybHZjME5vWldOclpYSW9LU0EvSUNkelkzSnZiR3d0Ykc5amF5MXBiM01uSURvZ0ozTmpjbTlzYkMxc2IyTnJKenRjYmlBZ0lDQjBhR2x6TGw5elkzSnZiR3hVYjNBZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdVgyWnBlR1ZrUW14dlkydEZiR1Z0Wlc1MGN5QTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KMXRrWVhSaExXWnBlQzFpYkc5amExMG5LVHRjYmlBZ2ZWeHVYRzRnSUY5blpYUlRZM0p2Ykd4aVlYSlhhV1IwYUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZDJsdVpHOTNMbWx1Ym1WeVYybGtkR2dnTFNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1WTJ4cFpXNTBWMmxrZEdnN1hHNGdJSDFjYmx4dUlDQmZaMlYwUW05a2VWTmpjbTlzYkZSdmNDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ2MyVnNaaTV3WVdkbFdVOW1abk5sZENCOGZGeHVJQ0FnSUNBZ0tHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdVUyTnliMnhzVkc5d0tTQjhmRnh1SUNBZ0lDQWdLR1J2WTNWdFpXNTBMbUp2WkhrZ0ppWWdaRzlqZFcxbGJuUXVZbTlrZVM1elkzSnZiR3hVYjNBcFhHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHUnBjMkZpYkdWVFkzSnZiR3hwYm1jb0tTQjdYRzRnSUNBZ2RHaHBjeTVmYzJOeWIyeHNWRzl3SUQwZ1pHOWpkVzFsYm5RdVltOWtlUzVrWVhSaGMyVjBMbk5qY205c2JDQTlJR1J2WTNWdFpXNTBMbUp2WkhrdVpHRjBZWE5sZEM1elkzSnZiR3dnUHlCa2IyTjFiV1Z1ZEM1aWIyUjVMbVJoZEdGelpYUXVjMk55YjJ4c0lEb2dkR2hwY3k1ZloyVjBRbTlrZVZOamNtOXNiRlJ2Y0NncE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5blpYUlRZM0p2Ykd4aVlYSlhhV1IwYUNncEtTQjdYRzRnSUNBZ0lDQmtiMk4xYldWdWRDNWliMlI1TG5OMGVXeGxMbkJoWkdScGJtZFNhV2RvZENBOUlHQWtlM1JvYVhNdVgyZGxkRk5qY205c2JHSmhjbGRwWkhSb0tDbDljSGhnTzF4dUlDQWdJQ0FnZEdocGN5NWZabWw0WldSQ2JHOWphMFZzWlcxbGJuUnpMbVp2Y2tWaFkyZ29LR0pzYjJOcktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdKc2IyTnJMbk4wZVd4bExuQmhaR1JwYm1kU2FXZG9kQ0E5SUdBa2UzUm9hWE11WDJkbGRGTmpjbTlzYkdKaGNsZHBaSFJvS0NsOWNIaGdPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1YzNSNWJHVXVkRzl3SUQwZ1lDMGtlM1JvYVhNdVgzTmpjbTlzYkZSdmNIMXdlR0E3WEc0Z0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1amJHRnpjMHhwYzNRdVlXUmtLSFJvYVhNdVgyeHZZMnREYkdGemN5azdYRzRnSUgxY2JseHVJQ0JsYm1GaWJHVlRZM0p2Ykd4cGJtY29LU0I3WEc0Z0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0hSb2FYTXVYMnh2WTJ0RGJHRnpjeWs3WEc0Z0lDQWdkMmx1Wkc5M0xuTmpjbTlzYkZSdktEQXNJQ3RrYjJOMWJXVnVkQzVpYjJSNUxtUmhkR0Z6WlhRdWMyTnliMnhzS1R0Y2JpQWdJQ0JrYjJOMWJXVnVkQzVpYjJSNUxuTjBlV3hsTG5CaFpHUnBibWRTYVdkb2RDQTlJRzUxYkd3N1hHNGdJQ0FnWkc5amRXMWxiblF1WW05a2VTNXpkSGxzWlM1MGIzQWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVYMlpwZUdWa1FteHZZMnRGYkdWdFpXNTBjeTVtYjNKRllXTm9LQ2hpYkc5amF5a2dQVDRnZTF4dUlDQWdJQ0FnWW14dlkyc3VjM1I1YkdVdWNHRmtaR2x1WjFKcFoyaDBJRDBnYm5Wc2JEdGNiaUFnSUNCOUtUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25aR0YwWVMxelkzSnZiR3duS1R0Y2JpQWdJQ0IwYUdsekxsOXpZM0p2Ykd4VWIzQWdQU0J1ZFd4c08xeHVJQ0I5WEc1OVhHNWNibmRwYm1SdmR5NXpZM0p2Ykd4TWIyTnJJRDBnYm1WM0lGTmpjbTlzYkV4dlkyc29LVHRjYmlKZGZRPT0ifQ==
